<!-- Active Sessions View -->
<div class="active-sessions-container">
  <!-- Page Header -->
  <div class="flex justify-between items-center mb-6">
    <div>
      <h1 class="text-3xl font-bold text-gray-900 dark:text-white">
        <i class="fas fa-users text-green-600 mr-2"></i>Active Sessions
      </h1>
      <p class="text-gray-600 dark:text-gray-300 mt-2">
        Monitor and manage active user sessions across the application
      </p>
    </div>
    <div class="flex space-x-3">
      <a href="/admin/security" class="btn btn-outline">
        <i class="fas fa-arrow-left mr-2"></i>Back to Center
      </a>
      <button onclick="refreshSessions()" class="btn btn-primary">
        <i class="fas fa-sync-alt mr-2"></i>Refresh
      </button>
    </div>
  </div>

  <!-- Session Statistics -->
  <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
    <!-- Total Active Sessions -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 border-l-4 border-green-500">
      <div class="flex items-center justify-between">
        <div>
          <p class="text-sm font-medium text-gray-600 dark:text-gray-400">Active Sessions</p>
          <p class="text-3xl font-bold text-green-600"><%= sessions.length %></p>
        </div>
        <div class="p-3 bg-green-100 dark:bg-green-900 rounded-full">
          <i class="fas fa-users text-green-600 dark:text-green-300 text-xl"></i>
        </div>
      </div>
    </div>

    <!-- Unique Users -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 border-l-4 border-blue-500">
      <div class="flex items-center justify-between">
        <div>
          <p class="text-sm font-medium text-gray-600 dark:text-gray-400">Unique Users</p>
          <% const uniqueUsers = new Set(sessions.map(s => s.user_id)).size; %>
          <p class="text-3xl font-bold text-blue-600"><%= uniqueUsers %></p>
        </div>
        <div class="p-3 bg-blue-100 dark:bg-blue-900 rounded-full">
          <i class="fas fa-user text-blue-600 dark:text-blue-300 text-xl"></i>
        </div>
      </div>
    </div>

    <!-- Recently Active -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 border-l-4 border-yellow-500">
      <div class="flex items-center justify-between">
        <div>
          <p class="text-sm font-medium text-gray-600 dark:text-gray-400">Active (< 5min)</p>
          <% const recentlyActive = sessions.filter(s => s.minutes_inactive < 5).length; %>
          <p class="text-3xl font-bold text-yellow-600"><%= recentlyActive %></p>
        </div>
        <div class="p-3 bg-yellow-100 dark:bg-yellow-900 rounded-full">
          <i class="fas fa-clock text-yellow-600 dark:text-yellow-300 text-xl"></i>
        </div>
      </div>
    </div>

    <!-- Idle Sessions -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 border-l-4 border-red-500">
      <div class="flex items-center justify-between">
        <div>
          <p class="text-sm font-medium text-gray-600 dark:text-gray-400">Idle (> 30min)</p>
          <% const idleSessions = sessions.filter(s => s.minutes_inactive > 30).length; %>
          <p class="text-3xl font-bold text-red-600"><%= idleSessions %></p>
        </div>
        <div class="p-3 bg-red-100 dark:bg-red-900 rounded-full">
          <i class="fas fa-moon text-red-600 dark:text-red-300 text-xl"></i>
        </div>
      </div>
    </div>
  </div>

  <!-- Bulk Actions -->
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6">
    <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">
      <i class="fas fa-cogs text-gray-500 mr-2"></i>Bulk Actions
    </h2>

    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
      <button onclick="killIdleSessions()" class="btn btn-danger">
        <i class="fas fa-times-circle mr-2"></i>Kill Idle Sessions (30+ min)
      </button>

      <button onclick="killExpiredSessions()" class="btn btn-warning">
        <i class="fas fa-clock mr-2"></i>Kill Expired Sessions
      </button>

      <button onclick="exportSessionReport()" class="btn btn-info">
        <i class="fas fa-download mr-2"></i>Export Report
      </button>

      <button onclick="showSessionStats()" class="btn btn-outline">
        <i class="fas fa-chart-bar mr-2"></i>View Statistics
      </button>
    </div>
  </div>

  <!-- Active Sessions Table -->
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-md">
    <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
      <h2 class="text-xl font-semibold text-gray-900 dark:text-white">
        <i class="fas fa-list text-green-500 mr-2"></i>Active Sessions
      </h2>
    </div>

    <% if (sessions.length > 0) { %>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead class="bg-gray-50 dark:bg-gray-900">
            <tr>
              <th class="px-6 py-3 text-left">
                <input type="checkbox" id="selectAll" onchange="toggleSelectAll()" class="rounded border-gray-300 dark:border-gray-600">
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                User
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Session Info
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                IP Address
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Activity
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Duration
              </th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
            <% sessions.forEach(session => { %>
              <tr class="hover:bg-gray-50 dark:hover:bg-gray-700">
                <td class="px-6 py-4 whitespace-nowrap">
                  <input type="checkbox" class="session-checkbox rounded border-gray-300 dark:border-gray-600"
                         value="<%= session.session_id %>" onchange="updateBulkActions()">
                </td>

                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center">
                    <div class="flex-shrink-0 h-10 w-10">
                      <div class="h-10 w-10 rounded-full bg-blue-100 dark:bg-blue-900 flex items-center justify-center">
                        <i class="fas fa-user text-blue-600 dark:text-blue-300"></i>
                      </div>
                    </div>
                    <div class="ml-4">
                      <div class="text-sm font-medium text-gray-900 dark:text-white">
                        <%= session.user_name %>
                      </div>
                      <div class="text-sm text-gray-500 dark:text-gray-400">
                        <%= session.user_email %>
                      </div>
                      <% if (session.cep_id) { %>
                        <div class="text-xs text-gray-400 dark:text-gray-500">
                          CEP: <%= session.cep_id %>
                        </div>
                      <% } %>
                    </div>
                  </div>
                </td>

                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                  <div>
                    <div class="font-mono text-xs text-gray-500 dark:text-gray-400">
                      <%= session.session_id.substring(0, 12) %>...
                    </div>
                    <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                      Created: <%= new Date(session.created_at).toLocaleString() %>
                    </div>
                    <div class="text-xs text-gray-500 dark:text-gray-400">
                      Expires: <%= new Date(session.expires_at).toLocaleString() %>
                    </div>
                  </div>
                </td>

                <td class="px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-900 dark:text-white">
                  <%= session.ip_address %>
                </td>

                <td class="px-6 py-4 whitespace-nowrap">
                  <%
                    const minutesInactive = Math.round(session.minutes_inactive);
                    const activityStatus = minutesInactive < 5 ? 'active' :
                                         minutesInactive < 30 ? 'idle' : 'inactive';
                    const statusColors = {
                      'active': 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300',
                      'idle': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300',
                      'inactive': 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300'
                    };
                  %>
                  <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full <%= statusColors[activityStatus] %>">
                    <%= activityStatus.toUpperCase() %>
                  </span>
                  <div class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                    Last activity: <%= new Date(session.last_activity).toLocaleString() %>
                  </div>
                  <div class="text-xs text-gray-500 dark:text-gray-400">
                    <%= minutesInactive %> minutes ago
                  </div>
                </td>

                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white">
                  <%
                    const sessionDuration = Math.round((new Date(session.last_activity) - new Date(session.created_at)) / (1000 * 60));
                    const hours = Math.floor(sessionDuration / 60);
                    const minutes = sessionDuration % 60;
                  %>
                  <div class="font-medium">
                    <%= hours > 0 ? hours + 'h ' : '' %><%= minutes %>m
                  </div>
                  <div class="text-xs text-gray-500 dark:text-gray-400">
                    Total session time
                  </div>
                </td>

                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium space-y-1">
                  <button onclick="killSession('<%= session.session_id %>', '<%= session.user_name %>')"
                          class="block text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300">
                    <i class="fas fa-times mr-1"></i>Kill Session
                  </button>

                  <button onclick="showSessionDetails('<%= session.session_id %>')"
                          class="block text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300">
                    <i class="fas fa-eye mr-1"></i>View Details
                  </button>

                  <% if (session.user_agent) { %>
                    <button onclick="showUserAgent('<%= encodeURIComponent(session.user_agent) %>')"
                            class="block text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-300">
                      <i class="fas fa-desktop mr-1"></i>User Agent
                    </button>
                  <% } %>
                </td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>
    <% } else { %>
      <div class="text-center py-12">
        <i class="fas fa-users-slash text-gray-400 text-4xl mb-4"></i>
        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No Active Sessions</h3>
        <p class="text-gray-500 dark:text-gray-400">
          There are currently no active user sessions.
        </p>
      </div>
    <% } %>
  </div>

  <!-- Selected Actions Bar (Hidden by default) -->
  <div id="selectedActionsBar" class="hidden fixed bottom-6 left-1/2 transform -translate-x-1/2 bg-white dark:bg-gray-800 shadow-lg rounded-lg p-4 border border-gray-200 dark:border-gray-700">
    <div class="flex items-center space-x-4">
      <span id="selectedCount" class="text-sm font-medium text-gray-700 dark:text-gray-300">0 sessions selected</span>
      <button onclick="killSelectedSessions()" class="btn btn-danger btn-sm">
        <i class="fas fa-times mr-1"></i>Kill Selected
      </button>
      <button onclick="clearSelection()" class="btn btn-outline btn-sm">
        Clear Selection
      </button>
    </div>
  </div>
</div>

<!-- Session Details Modal -->
<div id="sessionDetailsModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
  <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-1/2 shadow-lg rounded-md bg-white dark:bg-gray-800">
    <div class="mt-3">
      <div class="flex justify-between items-center mb-4">
        <h3 class="text-lg font-medium text-gray-900 dark:text-white">Session Details</h3>
        <button onclick="closeSessionDetails()" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
          <i class="fas fa-times text-xl"></i>
        </button>
      </div>
      <div id="sessionDetailsContent" class="text-sm text-gray-700 dark:text-gray-300">
        <!-- Content will be populated by JavaScript -->
      </div>
    </div>
  </div>
</div>

<script>
function killSession(sessionId, userName) {
  if (confirm(`Are you sure you want to kill the session for ${userName}? They will be logged out immediately.`)) {
    fetch('/admin/security/kill-session', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
      body: JSON.stringify({
        sessionId: sessionId,
        _csrf: '<%= typeof csrfToken !== "undefined" ? csrfToken : "" %>'
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showToast(data.message, 'success');
        setTimeout(() => window.location.reload(), 1500);
      } else {
        showToast(data.error || 'Failed to kill session', 'error');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      showToast('An error occurred while killing the session', 'error');
    });
  }
}

function refreshSessions() {
  window.location.reload();
}

function toggleSelectAll() {
  const selectAll = document.getElementById('selectAll');
  const checkboxes = document.querySelectorAll('.session-checkbox');

  checkboxes.forEach(checkbox => {
    checkbox.checked = selectAll.checked;
  });

  updateBulkActions();
}

function updateBulkActions() {
  const checkboxes = document.querySelectorAll('.session-checkbox:checked');
  const selectedCount = checkboxes.length;
  const actionsBar = document.getElementById('selectedActionsBar');
  const countSpan = document.getElementById('selectedCount');

  if (selectedCount > 0) {
    actionsBar.classList.remove('hidden');
    countSpan.textContent = `${selectedCount} session${selectedCount !== 1 ? 's' : ''} selected`;
  } else {
    actionsBar.classList.add('hidden');
  }
}

function clearSelection() {
  document.querySelectorAll('.session-checkbox').forEach(checkbox => {
    checkbox.checked = false;
  });
  document.getElementById('selectAll').checked = false;
  updateBulkActions();
}

function killSelectedSessions() {
  const checkboxes = document.querySelectorAll('.session-checkbox:checked');
  const sessionIds = Array.from(checkboxes).map(cb => cb.value);

  if (sessionIds.length === 0) return;

  if (confirm(`Are you sure you want to kill ${sessionIds.length} selected session(s)? All selected users will be logged out immediately.`)) {
    Promise.all(sessionIds.map(sessionId =>
      fetch('/admin/security/kill-session', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        body: JSON.stringify({
          sessionId: sessionId,
          _csrf: '<%= typeof csrfToken !== "undefined" ? csrfToken : "" %>'
        })
      }).then(response => response.json())
    ))
    .then(results => {
      const successful = results.filter(r => r.success).length;
      const failed = results.length - successful;

      if (successful > 0) {
        showToast(`Successfully killed ${successful} session(s)`, 'success');
      }
      if (failed > 0) {
        showToast(`Failed to kill ${failed} session(s)`, 'error');
      }

      setTimeout(() => window.location.reload(), 2000);
    })
    .catch(error => {
      console.error('Error:', error);
      showToast('An error occurred while killing sessions', 'error');
    });
  }
}

function killIdleSessions() {
  if (confirm('Kill all idle sessions (inactive for 30+ minutes)? This will log out inactive users.')) {
    fetch('/admin/security/kill-idle-sessions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
      body: JSON.stringify({
        _csrf: '<%= typeof csrfToken !== "undefined" ? csrfToken : "" %>'
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showToast(data.message || 'Idle sessions killed successfully', 'success');
        setTimeout(() => window.location.reload(), 2000);
      } else {
        showToast(data.error || 'Failed to kill idle sessions', 'error');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      showToast('An error occurred while killing idle sessions', 'error');
    });
  }
}

function showSessionDetails(sessionId) {
  // Show modal with loading
  const modal = document.getElementById('sessionDetailsModal');
  const content = document.getElementById('sessionDetailsContent');
  content.innerHTML = '<div class="text-center py-4"><i class="fas fa-spinner fa-spin text-2xl text-blue-500"></i><br><span class="text-sm">Loading...</span></div>';
  modal.classList.remove('hidden');

  // Fetch session details (implement endpoint if needed)
  // For now, just show basic info from the table
  const sessionRow = document.querySelector(`input[value="${sessionId}"]`).closest('tr');
  const userName = sessionRow.cells[1].textContent.trim().split('\n')[0];

  content.innerHTML = `
    <div class="space-y-4">
      <div><strong>Session ID:</strong> ${sessionId}</div>
      <div><strong>User:</strong> ${userName}</div>
      <div class="text-xs text-gray-500">More detailed session information can be added here.</div>
    </div>
  `;
}

function closeSessionDetails() {
  document.getElementById('sessionDetailsModal').classList.add('hidden');
}

function showUserAgent(userAgent) {
  alert(`User Agent:\n${decodeURIComponent(userAgent)}`);
}

// Auto-refresh every 30 seconds
setInterval(() => {
  refreshSessions();
}, 30 * 1000);
</script>

<style>
.active-sessions-container {
  max-width: 1600px;
  margin: 0 auto;
  padding: 20px;
}

.btn {
  padding: 0.5rem 1rem;
  border-radius: 0.5rem;
  font-weight: 500;
  transition: all 0.2s ease-in-out;
  display: inline-flex;
  align-items: center;
  text-decoration: none;
  border: none;
  cursor: pointer;
}

.btn-sm {
  padding: 0.25rem 0.75rem;
  font-size: 0.875rem;
}

.btn-primary {
  background-color: #2563eb;
  color: white;
}

.btn-primary:hover {
  background-color: #1d4ed8;
}

.btn-outline {
  border: 1px solid #d1d5db;
  color: #374151;
  background-color: transparent;
}

.btn-outline:hover {
  background-color: #f9fafb;
}

.btn-danger {
  background-color: #dc2626;
  color: white;
}

.btn-danger:hover {
  background-color: #b91c1c;
}

.btn-warning {
  background-color: #d97706;
  color: white;
}

.btn-warning:hover {
  background-color: #b45309;
}

.btn-info {
  background-color: #0891b2;
  color: white;
}

.btn-info:hover {
  background-color: #0e7490;
}

.dark .btn-outline {
  border-color: #4b5563;
  color: #d1d5db;
}

.dark .btn-outline:hover {
  background-color: #374151;
}

@media (max-width: 768px) {
  .active-sessions-container {
    padding: 10px;
  }

  .overflow-x-auto {
    font-size: 0.75rem;
  }

  #selectedActionsBar {
    position: fixed;
    bottom: 10px;
    left: 10px;
    right: 10px;
    transform: none;
  }
}
</style>
