<div class="container mx-auto px-4 py-8">
  <div class="max-w-lg mx-auto bg-white dark:bg-gray-800 rounded-lg shadow p-8">
    <h1 class="text-2xl font-bold text-gray-800 dark:text-gray-100 mb-6 flex items-center gap-2">
      <i class="fas fa-user-edit"></i> Edit User
    </h1>

    <% if (typeof errors !== 'undefined' && errors.length > 0) { %>
      <div class="mb-6 flex flex-col gap-2 px-4 py-3 rounded-lg bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200 border border-red-200 dark:border-red-700">
        <div class="flex items-center gap-2">
          <i class="fas fa-exclamation-triangle"></i>
          <strong>Please fix the following errors:</strong>
        </div>
        <ul class="list-disc pl-6">
          <% errors.forEach(error => { %>
            <li><%= error %></li>
          <% }) %>
        </ul>
      </div>
    <% } %>

    <form method="POST" action="/admin/users/<%= editUser.id %>/edit" class="space-y-6" autocomplete="off">
      <div>
        <label for="name" class="block font-semibold mb-1 text-gray-700 dark:text-gray-200">Name <span class="text-red-500">*</span></label>
        <input type="text" id="name" name="name" value="<%= editUser.name %>" required
          class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
          placeholder="Enter user name">
      </div>

      <div>
        <label for="email" class="block font-semibold mb-1 text-gray-700 dark:text-gray-200">Email <span class="text-red-500">*</span></label>
        <input type="email" id="email" name="email" value="<%= editUser.email %>" required
          class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
          placeholder="Enter email address">
      </div>

      <div>
        <label for="password" class="block font-semibold mb-1 text-gray-700 dark:text-gray-200">New Password</label>
        <input type="password" id="password" name="password"
          class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
          placeholder="Leave blank to keep current password">
        <small class="text-gray-500 dark:text-gray-400">Only enter a password if you want to change it (min 6 chars)</small>
      </div>

      <div>
        <label for="confirm_password" class="block font-semibold mb-1 text-gray-700 dark:text-gray-200">Confirm New Password</label>
        <input type="password" id="confirm_password" name="confirm_password"
          class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
          placeholder="Re-enter new password">
      </div>

      <!-- Role Management Section -->
      <div>
        <label class="block font-semibold mb-3 text-gray-700 dark:text-gray-200 flex items-center gap-2">
          Assign Roles
          <% if (!can('users.manage_roles')) { %>
            <i class="fas fa-lock text-gray-500 text-sm" title="You don't have permission to manage user roles"></i>
          <% } %>
        </label>

        <% if (can('users.manage_roles')) { %>
          <div class="max-h-48 overflow-y-auto border border-gray-300 dark:border-gray-700 rounded-md p-3 bg-gray-50 dark:bg-gray-900">
            <% if (typeof roles !== 'undefined' && roles.length > 0) { %>
              <% roles.forEach(role => { %>
                <div class="flex items-start gap-2 mb-2">
                  <input type="checkbox" id="role_<%= role.id %>" name="selectedRoles" value="<%= role.id %>"
                    class="mt-1 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                    <%= userRoleIds.includes(role.id) ? 'checked' : '' %>>
                  <div class="flex-1">
                    <label for="role_<%= role.id %>" class="text-sm font-medium text-gray-900 dark:text-gray-100 cursor-pointer">
                      <%= role.display_name %>
                      <% if (role.is_system_role) { %>
                        <span class="inline-flex items-center px-1.5 py-0.5 rounded text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-300 ml-1">
                          System
                        </span>
                      <% } %>
                    </label>
                    <% if (role.description) { %>
                      <p class="text-xs text-gray-500 dark:text-gray-400 mt-1"><%= role.description %></p>
                    <% } %>
                  </div>
                </div>
              <% }) %>
            <% } else { %>
              <p class="text-gray-500 dark:text-gray-400 text-sm">No roles available</p>
            <% } %>
          </div>
          <small class="text-gray-500 dark:text-gray-400">Select one or more roles for this user.</small>
        <% } else { %>
          <!-- Display current roles as read-only when user doesn't have permission -->
          <div class="max-h-48 overflow-y-auto border border-gray-300 dark:border-gray-700 rounded-md p-3 bg-gray-100 dark:bg-gray-700 opacity-60">
            <% if (typeof roles !== 'undefined' && roles.length > 0) { %>
              <% roles.forEach(role => { %>
                <% if (userRoleIds.includes(role.id)) { %>
                  <div class="flex items-start gap-2 mb-2">
                    <input type="checkbox" disabled checked
                      class="mt-1 h-4 w-4 text-gray-400 border-gray-300 rounded cursor-not-allowed">
                    <div class="flex-1">
                      <label class="text-sm font-medium text-gray-600 dark:text-gray-400 cursor-not-allowed">
                        <%= role.display_name %>
                        <% if (role.is_system_role) { %>
                          <span class="inline-flex items-center px-1.5 py-0.5 rounded text-xs font-medium bg-gray-200 dark:bg-gray-600 text-gray-600 dark:text-gray-400 ml-1">
                            System
                          </span>
                        <% } %>
                      </label>
                      <% if (role.description) { %>
                        <p class="text-xs text-gray-400 dark:text-gray-500 mt-1"><%= role.description %></p>
                      <% } %>
                    </div>
                  </div>
                <% } %>
              <% }) %>
            <% } else { %>
              <p class="text-gray-400 dark:text-gray-500 text-sm">No roles assigned</p>
            <% } %>
          </div>
          <small class="text-gray-400 dark:text-gray-500">You don't have permission to modify user roles.</small>
        <% } %>
      </div>

      <div class="flex gap-2 mt-4">
        <button type="submit" class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md transition flex items-center gap-2">
          <i class="fas fa-save"></i> Update User
        </button>
        <a href="/admin/users" class="px-6 py-2 bg-gray-300 dark:bg-gray-700 hover:bg-gray-400 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 font-semibold rounded-md transition flex items-center gap-2">
          <i class="fas fa-times"></i> Cancel
        </a>
      </div>
    </form>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const passwordField = document.getElementById('password');
  const confirmPasswordField = document.getElementById('confirm_password');
  const nameField = document.getElementById('name');
  const emailField = document.getElementById('email');
  const form = document.querySelector('form');

  form.addEventListener('submit', function(e) {
    clearErrorStyling();

    let hasErrors = false;

    // Validate name
    if (!nameField.value || nameField.value.trim() === '') {
      e.preventDefault();
      showFieldError(nameField, 'Name is required');
      hasErrors = true;
    }

    // Validate email
    if (!emailField.value || emailField.value.trim() === '') {
      e.preventDefault();
      showFieldError(emailField, 'Email is required');
      hasErrors = true;
    } else if (!isValidEmail(emailField.value.trim())) {
      e.preventDefault();
      showFieldError(emailField, 'Please enter a valid email address');
      hasErrors = true;
    }

    const password = passwordField.value;
    const confirmPassword = confirmPasswordField.value;

    // Password validation (only if password is being changed)
    if (password && password !== confirmPassword) {
      e.preventDefault();
      showFieldError(confirmPasswordField, 'Passwords do not match!');
      hasErrors = true;
    }

    if (password && password.length < 6) {
      e.preventDefault();
      showFieldError(passwordField, 'Password must be at least 6 characters long!');
      hasErrors = true;
    }

    if (hasErrors) {
      return false;
    }
  });

  passwordField.addEventListener('input', function() {
    if (!this.value) {
      confirmPasswordField.value = '';
    }
  });

  nameField.addEventListener('blur', function() {
    if (!this.value || this.value.trim() === '') {
      showFieldError(this, 'Name is required');
    } else {
      clearFieldError(this);
    }
  });

  emailField.addEventListener('blur', function() {
    if (!this.value || this.value.trim() === '') {
      showFieldError(this, 'Email is required');
    } else if (!isValidEmail(this.value.trim())) {
      showFieldError(this, 'Please enter a valid email address');
    } else {
      clearFieldError(this);
    }
  });

  function showFieldError(field, message) {
    field.classList.add('border-red-500', 'focus:ring-red-500');
    // Remove existing error message
    const existingError = field.parentNode.querySelector('.error-message');
    if (existingError) {
      existingError.remove();
    }
    // Add error message
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message text-red-600 dark:text-red-400 text-xs mt-1';
    errorDiv.textContent = message;
    field.parentNode.appendChild(errorDiv);
    field.focus();
  }

  function clearFieldError(field) {
    field.classList.remove('border-red-500', 'focus:ring-red-500');
    const errorMessage = field.parentNode.querySelector('.error-message');
    if (errorMessage) {
      errorMessage.remove();
    }
  }

  function clearErrorStyling() {
    const errorFields = document.querySelectorAll('.border-red-500');
    errorFields.forEach(field => clearFieldError(field));
  }

  function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }
});
</script>
