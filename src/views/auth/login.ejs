<div class="min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-900 via-blue-900 to-black relative overflow-hidden">
  <div class="absolute inset-0 pointer-events-none">
    <div class="absolute w-96 h-96 bg-cyan-400 opacity-20 rounded-full blur-3xl animate-pulse -top-20 -left-20"></div>
    <div class="absolute w-72 h-72 bg-pink-400 opacity-20 rounded-full blur-3xl animate-pulse -bottom-20 -right-20"></div>
    <div class="absolute w-40 h-40 bg-blue-400 opacity-10 rounded-full blur-2xl animate-bounce-slow left-1/2 top-1/4"></div>
  </div>
  <div id="glassCard" class="relative z-10 w-full max-w-md bg-white/20 backdrop-blur-xl rounded-2xl shadow-2xl p-8 border border-white/30 transition-all duration-500 animate-fade-in-up">
    <div class="flex flex-col items-center mb-8 animate-fade-in">
      <div class="w-16 h-16 flex items-center justify-center bg-gradient-to-br from-cyan-400 to-blue-500 rounded-xl shadow-lg animate-bounce">
        <i class="fas fa-server text-white text-3xl"></i>
      </div>
      <h1 class="text-2xl font-bold text-white mt-4 bg-gradient-to-r from-cyan-400 to-blue-400 bg-clip-text text-transparent animate-gradient-x">AssetTrack</h1>
      <p class="text-gray-200">IT Asset Management</p>
    </div>
    <form id="loginForm" method="POST" action="/auth/login" class="space-y-6" >
      <div>
        <label for="login" class="block text-sm font-medium text-gray-200">
          <i class="fas fa-user mr-1"></i>
        Email or CEP
        </label>
        <div class="relative mt-1">
          <input
            type="text"
            name="login"
            id="login"
            required
            autofocus
            class="block w-full rounded-lg border border-gray-300 bg-white/60 py-2 pl-5 pr-3 text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cyan-400 focus:border-cyan-400 transition-all duration-300 peer"
            placeholder="Enter your email or CEP ID"
            value="<%= typeof login !== 'undefined' ? login : '' %>"
            autocomplete="username"
          >
          <span class="input-icon pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 text-cyan-400 transition-all duration-300 peer-focus:-left-10 peer-[not(:placeholder-shown)]:-left-10 peer-focus:opacity-0 peer-[not(:placeholder-shown)]:opacity-0">
            <i class="fas fa-id-badge"></i>
          </span>
        </div>
        <div class="mt-1 text-xs text-gray-400">
          <i class="fas fa-info-circle mr-1"></i>
          Use your email or CEP ID to log in.
        </div>
      </div>
      <div>
        <label for="password" class="block text-sm font-medium text-gray-200">Password</label>
        <div class="relative mt-1">
          <input
            type="password"
            name="password"
            id="password"
            required
            class="block w-full rounded-lg border border-gray-300 bg-white/60 py-2 pl-5 pr-10 text-gray-900 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cyan-400 focus:border-cyan-400 transition-all duration-300 peer"
            placeholder="Password"
            autocomplete="current-password"
          >
          <span class="input-icon pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 text-cyan-400 transition-all duration-300 peer-focus:-left-10 peer-[not(:placeholder-shown)]:-left-10 peer-focus:opacity-0 peer-[not(:placeholder-shown)]:opacity-0">
            <i class="fas fa-lock"></i>
          </span>
          <button type="button" onclick="togglePasswordPro()" class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hover:text-cyan-400 transition">
            <i class="fas fa-eye" id="passwordToggleIcon"></i>
          </button>
        </div>
      </div>
      <div class="flex items-center justify-between">
        <div class="flex items-center">
          <input type="checkbox" id="remember" name="remember" class="h-4 w-4 text-cyan-600 focus:ring-cyan-500 border-gray-300 rounded" <%= typeof remember !== 'undefined' && remember ? 'checked' : '' %>>
          <label for="remember" class="ml-2 text-sm text-gray-400">
            Remember Me
          </label>
        </div>
      </div>
      <button type="submit" class="w-full py-3 rounded-lg bg-gradient-to-r from-cyan-400 to-blue-500 text-white font-bold shadow-lg hover:scale-105 transition-transform duration-300 flex items-center justify-center gap-2 animate-fade-in-up">
        <span class="btn-text">Sign In</span>
      </button>
    </form>
    <div class="flex flex-col items-center mt-6 gap-2 animate-fade-in">
      <div class="flex items-center gap-2 text-gray-400 text-sm">
        <i class="fas fa-shield-alt animate-pulse"></i>
        Secure Login â€¢ v1.0.0
      </div>
    </div>
  </div>
</div>
<script>

  // Save last visited page (except auth pages)
(function() {
  const skipPaths = ['/auth/login', '/auth/register', '/auth/logout'];
  if (!skipPaths.includes(window.location.pathname)) {
    document.cookie = `last_page=${encodeURIComponent(window.location.pathname + window.location.search)}; path=/; max-age=1800; SameSite=Strict;`;
  }
})();

// Password toggle
function togglePasswordPro() {
  const passwordInput = document.getElementById('password');
  const toggleIcon = document.getElementById('passwordToggleIcon');
  if (passwordInput.type === 'password') {
    passwordInput.type = 'text';
    toggleIcon.className = 'fas fa-eye-slash';
  } else {
    passwordInput.type = 'password';
    toggleIcon.className = 'fas fa-eye';
  }
}

// Show error message
function showError(message) {
  // Remove existing error
  const existingError = document.querySelector('.error-message');
  if (existingError) {
    existingError.remove();
  }

  // Create new error element
  const errorDiv = document.createElement('div');
  errorDiv.className = 'error-message bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4 animate-shake flex items-center gap-2';
  errorDiv.setAttribute('role', 'alert');
  errorDiv.innerHTML = `
    <i class="fas fa-exclamation-circle text-red-500"></i>
    <span class="block sm:inline">${message}</span>
  `;

  // Insert before the submit button
  const submitButton = document.querySelector('button[type="submit"]');
  if (submitButton && submitButton.parentNode) {
    submitButton.parentNode.insertBefore(errorDiv, submitButton);
  }

  // Auto-remove after 5 seconds
  setTimeout(() => {
    if (errorDiv && errorDiv.parentNode) {
      errorDiv.remove();
    }
  }, 5000);
}

// Show loading state
function setLoading(isLoading) {
  const submitButton = document.querySelector('button[type="submit"]');
  const buttonText = submitButton?.querySelector('.btn-text');

  if (!submitButton) return;

  if (isLoading) {
    submitButton.disabled = true;
    submitButton.classList.add('opacity-50', 'cursor-not-allowed');
    if (buttonText) {
      buttonText.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Signing in...';
    }
  } else {
    submitButton.disabled = false;
    submitButton.classList.remove('opacity-50', 'cursor-not-allowed');
    if (buttonText) {
      buttonText.innerHTML = '<%= t("sign_in") || "Sign In" %>';
    }
  }
}

window.addEventListener('DOMContentLoaded', function() {
  // Autofill login field from cookie if present
  const match = document.cookie.match(/(?:^|; )remember_login=([^;]*)/);
  if (match) {
    const loginField = document.getElementById('login');
    const rememberField = document.getElementById('remember');
    if (loginField) loginField.value = decodeURIComponent(match[1]);
    if (rememberField) rememberField.checked = true;
  }
});

document.getElementById('loginForm').addEventListener('submit', async function(e) {
  e.preventDefault();

  const form = e.target;
  const loginInput = document.getElementById('login')?.value?.trim() || '';
  const password = document.getElementById('password')?.value || '';
  const remember = document.getElementById('remember')?.checked || false;

  // Basic validation
  if (!loginInput || !password) {
    showError('Please enter both email/CEP ID and password.');
    return;
  }

  // Handle remember me functionality
  if (remember) {
    document.cookie = `remember_login=${encodeURIComponent(loginInput)}; path=/; max-age=2592000; Secure; SameSite=Strict;`;
  } else {
    document.cookie = 'remember_login=; path=/; max-age=0; Secure; SameSite=Strict;';
  }

  try {
    setLoading(true);

    // Use URLSearchParams for proper form encoding
    const formData = new URLSearchParams();
    formData.append('login', loginInput);
    formData.append('password', password);
    if (remember) {
      formData.append('remember', 'on');
    }

    const response = await fetch(form.action, {
      method: 'POST',
      headers: {
        'X-Requested-With': 'XMLHttpRequest',
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json'
      },
      body: formData
    });

    const contentType = response.headers.get('content-type');
    console.log('Response status:', response.status);
    console.log('Response content-type:', contentType);

    if (contentType && contentType.includes('application/json')) {
      const result = await response.json();
      console.log('JSON response:', result);

      if (result.success) {
        // Show success message briefly before redirect
        const successDiv = document.createElement('div');
        successDiv.className = 'bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4 flex items-center gap-2';
        successDiv.innerHTML = `
          <i class="fas fa-check-circle text-green-500"></i>
          <span class="block sm:inline">${result.message || 'Login successful!'}</span>
        `;

        const submitButton = document.querySelector('button[type="submit"]');
        if (submitButton && submitButton.parentNode) {
          submitButton.parentNode.insertBefore(successDiv, submitButton);
        }

        // Redirect after brief delay
        setTimeout(() => {
          // Try to redirect to last_page cookie if present and not /auth/*
          const match = document.cookie.match(/(?:^|; )last_page=([^;]*)/);
          let redirectUrl = result.redirect || '/';
          if (match) {
            const lastPage = decodeURIComponent(match[1]);
            if (lastPage && !lastPage.startsWith('/auth/')) {
              redirectUrl = lastPage;
            }
          }
          window.location.href = redirectUrl;
        }, 1000);
      } else {
        // Show error message
        showError(result.message || 'Login failed. Please try again.');
      }
    } else {
      // Handle non-JSON responses
      const responseText = await response.text();

      if (response.status >= 400) {
        showError('An error occurred during login. Please try again.');
      } else if (response.redirected || response.url !== form.action) {
        // Handle redirect
        window.location.href = response.url || '/';
      } else {
        // Check if response contains error indicators
        if (responseText.includes('error') || responseText.includes('Invalid')) {
          showError('Invalid login credentials. Please try again.');
        } else {
          // Assume success and redirect
          window.location.href = '/';
        }
      }
    }
  } catch (error) {
    console.error('Login error:', error);
    showError('Network error. Please check your connection and try again.');
  } finally {
    setLoading(false);
  }
});
</script>
<style>
@keyframes animate-shake {
  10%, 90% { transform: translateX(-1px);}
  20%, 80% { transform: translateX(2px);}
  30%, 50%, 70% { transform: translateX(-4px);}
  40%, 60% { transform: translateX(4px);}
}
.animate-shake { animation: animate-shake 0.5s; }
@keyframes fade-in {
  from { opacity: 0; transform: translateY(20px);}
  to { opacity: 1; transform: translateY(0);}
}
.animate-fade-in { animation: fade-in 1s cubic-bezier(.4,0,.2,1);}
@keyframes fade-in-up {
  from { opacity: 0; transform: translateY(40px);}
  to { opacity: 1; transform: translateY(0);}
}
.animate-fade-in-up { animation: fade-in-up 1s cubic-bezier(.4,0,.2,1);}
@keyframes gradient-x {
  0%,100% { background-position: 0% 50%;}
  50% { background-position: 100% 50%;}
}
.animate-gradient-x {
  background-size: 200% 200%;
  animation: gradient-x 3s ease-in-out infinite;
}
@keyframes bounce-slow {
  0%,100% { transform: translateY(0);}
  50% { transform: translateY(-30px);}
}
.animate-bounce-slow { animation: bounce-slow 4s infinite;}
/* Hide icon when input has value or is focused (for browsers that don't support peer-[not(:placeholder-shown)]) */
input:not(:placeholder-shown) + .input-icon,
input:focus + .input-icon {
  left: -2.5rem !important;
  opacity: 0 !important;
}
</style>
