<div class="min-h-screen bg-gray-50 dark:bg-gray-900 transition-colors duration-200">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">

    <!-- Header -->
    <div class="mb-8">
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div class="flex items-center space-x-4">
          <div class="w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center">
            <i class="fas fa-building text-xl text-blue-600 dark:text-blue-300"></i>
          </div>
          <div>
            <h1 class="text-3xl font-bold text-gray-900 dark:text-gray-100"><%= client.name %></h1>
            <p class="text-gray-600 dark:text-gray-400">Client #<%= client.pnumber %></p>
          </div>
        </div>
        <div class="flex items-center space-x-3">
          <a href="/clients/<%= client.id %>/edit" class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md transition-colors duration-200">
            <i class="fas fa-edit mr-2"></i> Edit Client
          </a>
          <a href="/clients" class="inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200">
            <i class="fas fa-arrow-left mr-2"></i> Back to Clients
          </a>
        </div>
      </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
      <!-- Client Information -->
      <div class="lg:col-span-1">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700">
          <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
            <h2 class="text-lg font-semibold text-gray-800 dark:text-gray-100">Client Information</h2>
          </div>
          <div class="p-6 space-y-6">
            <!-- Basic Info -->
            <div>
              <label class="block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1">Client Name</label>
              <p class="text-lg font-medium text-gray-900 dark:text-gray-100"><%= client.name %></p>
            </div>

            <div>
              <label class="block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1">Client Number</label>
              <p class="text-lg font-medium text-gray-900 dark:text-gray-100">#<%= client.pnumber %></p>
            </div>

            <% if (client.description) { %>
              <div>
                <label class="block text-sm font-medium text-gray-500 dark:text-gray-400 mb-1">Description</label>
                <p class="text-gray-900 dark:text-gray-100"><%= client.description %></p>
              </div>
            <% } %>

            <!-- Timestamps -->
            <div class="pt-4 border-t border-gray-200 dark:border-gray-700">
              <div class="grid grid-cols-1 gap-4 text-sm">
                <div>
                  <label class="block font-medium text-gray-500 dark:text-gray-400 mb-1">Created</label>
                  <p class="text-gray-900 dark:text-gray-100">
                    <% const createdDate = new Date(client.created_at); %>
                    <%= createdDate.toLocaleDateString() %> at <%= createdDate.toLocaleTimeString() %>
                  </p>
                </div>
                <% if (client.updated_at && client.updated_at !== client.created_at) { %>
                  <div>
                    <label class="block font-medium text-gray-500 dark:text-gray-400 mb-1">Last Updated</label>
                    <p class="text-gray-900 dark:text-gray-100">
                      <% const updatedDate = new Date(client.updated_at); %>
                      <%= updatedDate.toLocaleDateString() %> at <%= updatedDate.toLocaleTimeString() %>
                    </p>
                  </div>
                <% } %>
              </div>
            </div>
          </div>
        </div>

        <!-- Asset Summary Card -->
        <div class="mt-6 bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700">
          <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
            <h2 class="text-lg font-semibold text-gray-800 dark:text-gray-100">Asset Summary</h2>
          </div>
          <div class="p-6">
            <% if (assetSummary && assetSummary.printers > 0) { %>
              <div class="grid grid-cols-1 gap-4">
                <div class="flex items-center justify-between p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                  <div class="flex items-center space-x-3">
                    <div class="w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center">
                      <i class="fas fa-print text-blue-600 dark:text-blue-300"></i>
                    </div>
                    <span class="font-medium text-gray-900 dark:text-gray-100">Printers</span>
                  </div>
                  <span class="text-xl font-bold text-blue-600 dark:text-blue-300"><%= assetSummary.printers %></span>
                </div>
                <div class="mt-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                  <div class="flex items-center justify-between">
                    <span class="font-semibold text-gray-900 dark:text-gray-100">Total Printer Assets</span>
                    <span class="text-xl font-bold text-gray-900 dark:text-gray-100"><%= assetSummary.printers %></span>
                  </div>
                </div>
              </div>
            <% } else { %>
              <div class="text-center py-6">
                <div class="w-12 h-12 mx-auto mb-4 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center">
                  <i class="fas fa-box-open text-xl text-gray-400 dark:text-gray-500"></i>
                </div>
                <p class="text-gray-500 dark:text-gray-400">No printers assigned to this client</p>
              </div>
            <% } %>
          </div>
        </div>
      </div>

      <!-- Assets Detail -->
      <div class="lg:col-span-2">
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700">
          <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
            <div class="flex items-center justify-between">
              <h2 class="text-lg font-semibold text-gray-800 dark:text-gray-100 flex items-center gap-2">
                <i class="fas fa-print"></i> Assigned Printers
                <% if (assets && assets.length > 0) { %>
                  <span class="ml-2 bg-blue-600 text-white px-2 py-0.5 rounded text-xs font-semibold"><%= assets.length %></span>
                <% } %>
              </h2>
              <!-- Add Assign Printer Button -->
              <button type="button" id="assignPrinterBtn" class="inline-flex items-center px-3 py-1 bg-blue-600 hover:bg-blue-700 text-white text-xs font-semibold rounded transition">
                <i class="fas fa-link mr-1"></i> Assign Printer
              </button>
            </div>
          </div>

          <% if (assets && assets.length > 0) { %>
            <div class="overflow-x-auto">
              <table class="w-full">
                <thead class="bg-gray-50 dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Asset</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Type</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Details</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                  <% assets.filter(asset => asset.asset_type === 'printer').forEach(asset => { %>
                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200">
                      <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                          <div class="w-8 h-8 flex items-center justify-center rounded-full bg-blue-100 dark:bg-blue-900">
                            <i class="fas fa-print text-blue-600 dark:text-blue-300"></i>
                          </div>
                          <div class="ml-3">
                            <div class="text-sm font-medium text-gray-900 dark:text-gray-100">
                              <%= asset.name || asset.model || 'Unnamed Printer' %>
                            </div>
                            <% if (asset.serial_number) { %>
                              <div class="text-sm text-gray-500 dark:text-gray-400">
                                SN: <%= asset.serial_number %>
                              </div>
                            <% } %>
                          </div>
                        </div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                          PRINTER
                        </span>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <% if (asset.status_name) { %>
                          <%
                            // Use status color and icon from database
                            let statusStyle = '';
                            let statusIcon = asset.status_icon || 'fas fa-question-circle';
                            const statusColor = asset.status_color || '#6B7280';

                            // Convert hex color to rgba for background with opacity
                            if (statusColor.startsWith('#') && statusColor.length === 7) {
                              const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(statusColor);
                              if (result) {
                                const r = parseInt(result[1], 16);
                                const g = parseInt(result[2], 16);
                                const b = parseInt(result[3], 16);
                                statusStyle = `background-color: rgba(${r}, ${g}, ${b}, 0.1); color: ${statusColor}; border: 1px solid rgba(${r}, ${g}, ${b}, 0.3);`;
                              } else {
                                statusStyle = `background-color: rgba(107, 114, 128, 0.1); color: #6B7280; border: 1px solid rgba(107, 114, 128, 0.3);`;
                              }
                            } else {
                              statusStyle = `background-color: rgba(107, 114, 128, 0.1); color: #6B7280; border: 1px solid rgba(107, 114, 128, 0.3);`;
                            }
                          %>
                          <span class="inline-flex items-center gap-2 px-2.5 py-0.5 rounded-full text-xs font-medium" style="<%= statusStyle %>">
                            <% if (statusIcon.startsWith('fas ') || statusIcon.startsWith('far ') || statusIcon.startsWith('fab ')) { %>
                              <i class="<%= statusIcon %>"></i>
                            <% } else { %>
                              <span class="text-sm"><%= statusIcon %></span>
                            <% } %>
                            <%= asset.status_name %>
                          </span>
                        <% } else { %>
                          <span class="text-sm text-gray-500 dark:text-gray-400">No status</span>
                        <% } %>
                      </td>
                      <td class="px-6 py-4">
                        <div class="text-sm text-gray-900 dark:text-gray-100">
                          <% if (asset.ip_address) { %>
                            IP: <%= asset.ip_address %>
                          <% } else if (asset.description) { %>
                            <%= asset.description.length > 30 ? asset.description.substring(0, 30) + '...' : asset.description %>
                          <% } else { %>
                            <span class="text-gray-500 dark:text-gray-400 italic">No details</span>
                          <% } %>
                        </div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <a href="/printers/<%= asset.id %>" class="text-blue-600 dark:text-blue-400 hover:text-blue-900 dark:hover:text-blue-300">View</a>
                      </td>
                    </tr>
                  <% }); %>
                </tbody>
              </table>
            </div>
          <% } else { %>
            <div class="flex flex-col items-center justify-center py-8 text-center border border-dashed border-blue-400 rounded bg-blue-50 dark:bg-blue-950">
              <div class="text-4xl text-blue-500 mb-2">
                <i class="fas fa-print"></i>
              </div>
              <h4 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-1">No printers assigned</h4>
              <p class="text-gray-500 dark:text-gray-400">This client doesn't have any printers assigned yet.</p>
            </div>
          <% } %>
        </div>
      </div>
    </div>

    <!-- Action Buttons -->
    <div class="mt-8 flex items-center justify-end space-x-4">
      <button type="button"
              class="delete-client-btn inline-flex items-center px-4 py-2 text-sm font-medium text-red-700 dark:text-red-300 bg-red-100 dark:bg-red-900 hover:bg-red-200 dark:hover:bg-red-800 rounded-md transition-colors duration-200"
              data-client-id="<%= client.id %>"
              data-client-name="<%= client.name %>"
              data-client-pnumber="<%= client.pnumber %>">
        <i class="fas fa-trash mr-2"></i> Delete Client
      </button>
    </div>

  </div>
</div>

<!-- Assign Printer Modal -->
<!-- Assign Printer Modal -->
<div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 backdrop-blur-sm" id="assignPrinterModal" style="display:none;">
  <div class="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-hidden modal-content">
    <!-- Modal Header -->
    <div class="bg-gradient-to-r from-blue-600 to-blue-700 px-6 py-4">
      <div class="flex items-center justify-between">
        <div class="flex items-center gap-3">
          <div class="bg-white/20 p-2 rounded-lg">
            <i class="fas fa-print text-white text-xl"></i>
          </div>
          <div>
            <h4 class="text-xl font-bold text-white">Assign Printer</h4>
            <p class="text-blue-100 text-sm">to <%= client.name %></p>
          </div>
        </div>
        <button type="button" id="cancelAssign" class="text-white/80 hover:text-white hover:bg-white/20 p-2 rounded-lg transition-all duration-200">
          <i class="fas fa-times text-lg"></i>
        </button>
      </div>
    </div>

    <!-- Modal Body -->
    <div class="p-6">
      <!-- Enhanced Search -->
      <div class="mb-6">
        <div class="relative mb-4">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <i class="fas fa-search text-gray-400"></i>
          </div>
          <input
            type="text"
            id="assignPrinterSearchInput"
            class="block w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all"
            placeholder="Search by name, brand, model, or location..."
          >
        </div>
      </div>

      <!-- Printer List -->
      <div id="assignPrinterContent" class="max-h-96 overflow-y-auto border border-gray-200 dark:border-gray-700 rounded-lg">
        <div class="text-center text-gray-500 dark:text-gray-400 py-12">
          <div class="animate-spin w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-4"></div>
          <p>Loading available printers...</p>
        </div>
      </div>

      <!-- Results Summary -->
      <div id="printerResultsSummary" class="mt-4 text-sm text-gray-600 dark:text-gray-400 hidden">
        <i class="fas fa-info-circle mr-2"></i>
        <span id="printersFoundCount">0</span> printers found
      </div>
    </div>

    <!-- Modal Footer -->
    <div class="bg-gray-50 dark:bg-gray-900 px-6 py-4 border-t border-gray-200 dark:border-gray-700">
      <div class="flex items-center justify-between">
        <div class="text-sm text-gray-500 dark:text-gray-400">
          <i class="fas fa-lightbulb mr-2"></i>
          Click on any printer to assign it to <%= client.name %>
        </div>
        <button type="button" class="px-4 py-2 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 font-medium rounded-lg transition-all duration-200 flex items-center gap-2" id="cancelAssignFooter">
          <i class="fas fa-times"></i> Close
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 hidden">
  <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white dark:bg-gray-800">
    <div class="mt-3">
      <div class="flex items-center">
        <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 dark:bg-red-900">
          <i class="fas fa-exclamation-triangle text-red-600 dark:text-red-400"></i>
        </div>
        <div class="ml-4 text-left">
          <h3 class="text-lg font-medium text-gray-900 dark:text-gray-100">Delete Client</h3>
          <div class="mt-2">
            <p class="text-sm text-gray-500 dark:text-gray-400">
              Are you sure you want to delete "<span id="deleteClientName" class="font-medium"></span>"?
            </p>
            <div id="deleteWarning" class="mt-3 p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-md hidden">
              <div class="flex">
                <div class="flex-shrink-0">
                  <i class="fas fa-exclamation-triangle text-yellow-400"></i>
                </div>
                <div class="ml-3">
                  <p class="text-sm text-yellow-800 dark:text-yellow-200">
                    <span id="deleteAssetCount"></span>
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="flex items-center justify-end space-x-4 mt-6">
      <button type="button" id="cancelDelete" class="px-4 py-2 bg-gray-300 dark:bg-gray-700 text-gray-800 dark:text-gray-200 text-sm font-medium rounded-md hover:bg-gray-400 dark:hover:bg-gray-600 transition-colors duration-200">
        Cancel
      </button>
      <button type="button" id="confirmDelete" class="px-4 py-2 bg-red-600 text-white text-sm font-medium rounded-md hover:bg-red-700 transition-colors duration-200">
        Delete Client
      </button>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const deleteModal = document.getElementById('deleteModal');
    const deleteClientName = document.getElementById('deleteClientName');
    const deleteWarning = document.getElementById('deleteWarning');
    const deleteAssetCount = document.getElementById('deleteAssetCount');
    const cancelDelete = document.getElementById('cancelDelete');
    const confirmDelete = document.getElementById('confirmDelete');

    const assignPrinterModal = document.getElementById('assignPrinterModal');
    const assignPrinterBtn = document.getElementById('assignPrinterBtn');
    const assignPrinterContent = document.getElementById('assignPrinterContent');
    const cancelAssign = document.getElementById('cancelAssign');
    const confirmAssign = document.getElementById('confirmAssign');

    let currentClientData = null;
    let selectedPrinterId = null;

    // Setup CSRF token for AJAX requests
    function setupCSRF() {
        const token = document.querySelector('input[name="_csrf"]') ||
                     document.querySelector('meta[name="csrf-token"]');
        return {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest',
            'X-CSRF-Token': token ? token.getAttribute('content') || token.value : ''
        };
    }

    // Handle delete button click
    document.addEventListener('click', function(e) {
        if (e.target.closest('.delete-client-btn')) {
            e.preventDefault();
            const button = e.target.closest('.delete-client-btn');

            currentClientData = {
                id: button.dataset.clientId,
                name: button.dataset.clientName,
                pnumber: button.dataset.clientPnumber
            };

            deleteClientName.textContent = currentClientData.name;

            // Check for assets before showing modal
            checkClientAssets(currentClientData.id);
        }
    });

    // Check if client has assets
    function checkClientAssets(clientId) {
        fetch(`/api/clients/${clientId}/check-delete`, {
            method: 'GET',
            headers: setupCSRF()
        })
        .then(response => response.json())
        .then(data => {
            if (data.hasAssets) {
                deleteWarning.classList.remove('hidden');
                deleteAssetCount.textContent = `This client has ${data.assetCount} assigned asset${data.assetCount !== 1 ? 's' : ''}. Deleting this client will unassign all assets.`;
            } else {
                deleteWarning.classList.add('hidden');
            }

            deleteModal.classList.remove('hidden');
        })
        .catch(error => {
            console.error('Error checking client assets:', error);
            deleteWarning.classList.add('hidden');
            deleteModal.classList.remove('hidden');
        });
    }

    // Handle modal close
    function closeModal() {
        deleteModal.classList.add('hidden');
        currentClientData = null;
    }

    cancelDelete.addEventListener('click', closeModal);

    // Close modal when clicking outside
    deleteModal.addEventListener('click', function(e) {
        if (e.target === deleteModal) {
            closeModal();
        }
    });

    // Handle delete confirmation
    confirmDelete.addEventListener('click', function() {
        if (!currentClientData) return;

        // Show loading state
        confirmDelete.disabled = true;
        confirmDelete.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Deleting...';

        // Create a form and submit it
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = `/clients/${currentClientData.id}`;
        form.style.display = 'none';

        // Add CSRF token
        const csrfInput = document.createElement('input');
        csrfInput.type = 'hidden';
        csrfInput.name = '_csrf';
        const token = document.querySelector('input[name="_csrf"]') ||
                     document.querySelector('meta[name="csrf-token"]');
        csrfInput.value = token ? token.getAttribute('content') || token.value : '';
        form.appendChild(csrfInput);

        // Add method override
        const methodInput = document.createElement('input');
        methodInput.type = 'hidden';
        methodInput.name = '_method';
        methodInput.value = 'DELETE';
        form.appendChild(methodInput);

        document.body.appendChild(form);
        form.submit();
    });

    // Assign Printer Modal Functions
    if (assignPrinterBtn) {
        assignPrinterBtn.addEventListener('click', function() {
            assignPrinterModal.style.display = 'flex';
            loadAvailablePrinters();
        });
    }

    function loadAvailablePrinters() {
        fetch('/api/printers/available')
        .then(response => response.json())
        .then(data => {
            // Store all printers for search functionality
            window.allPrinters = data;

            // Update results summary
            const summary = document.getElementById('printerResultsSummary');
            const count = document.getElementById('printersFoundCount');
            if (summary && count) {
                count.textContent = data.length;
                summary.classList.remove('hidden');
            }

            if (data.length === 0) {
                assignPrinterContent.innerHTML = `
                    <div class="text-center text-gray-500 dark:text-gray-400 py-12">
                        <i class="fas fa-info-circle text-4xl mb-4 text-gray-300 dark:text-gray-600"></i>
                        <h3 class="text-lg font-medium text-gray-700 dark:text-gray-300 mb-2">No available printers found</h3>
                        <p class="text-sm">All printers are currently assigned to other clients.</p>
                    </div>
                `;
                return;
            }

            renderPrinters(data);
            setupSearchFunctionality();
        })
        .catch(error => {
            console.error('Error loading available printers:', error);
            assignPrinterContent.innerHTML = `
                <div class="text-center text-gray-500 dark:text-gray-400 py-12">
                    <i class="fas fa-exclamation-triangle text-4xl mb-4 text-red-400"></i>
                    <h3 class="text-lg font-medium text-gray-700 dark:text-gray-300 mb-2">Error loading printers</h3>
                    <p class="text-sm">Please try again later.</p>
                </div>
            `;
        });
    }

    function renderPrinters(printers) {
        if (printers.length === 0) {
            assignPrinterContent.innerHTML = `
                <div class="text-center text-gray-500 dark:text-gray-400 py-12">
                    <i class="fas fa-search text-4xl mb-4 text-gray-300 dark:text-gray-600"></i>
                    <h3 class="text-lg font-medium text-gray-700 dark:text-gray-300 mb-2">No printers found</h3>
                    <p class="text-sm">Try adjusting your search terms.</p>
                </div>
            `;
            return;
        }

        let html = '<div class="space-y-2">';

        printers.forEach(printer => {
            html += `
                <div class="printer-item p-4 border border-gray-200 dark:border-gray-700 rounded-lg hover:border-blue-300 dark:hover:border-blue-600 hover:bg-blue-50 dark:hover:bg-blue-950/30 cursor-pointer transition-all duration-200" data-printer-id="${printer.id}">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center gap-3">
                            <div class="bg-blue-100 dark:bg-blue-900/30 p-2 rounded-lg flex-shrink-0">
                                <i class="fas fa-print text-blue-600 dark:text-blue-400"></i>
                            </div>
                            <div class="flex-1 min-w-0">
                                <h4 class="font-medium text-gray-900 dark:text-gray-100 truncate">
                                    ${printer.name || printer.model || 'Unnamed Printer'}
                                </h4>
                                <div class="text-sm text-gray-500 dark:text-gray-400 space-y-1">
                                    ${printer.brand_name ? `<p><i class="fas fa-tag w-4"></i> ${printer.brand_name}</p>` : ''}
                                    ${printer.serial_cod ? `<p><i class="fas fa-barcode w-4"></i> ${printer.serial_cod}</p>` : ''}
                                    ${printer.location ? `<p><i class="fas fa-map-marker-alt w-4"></i> ${printer.location}</p>` : ''}
                                </div>
                            </div>
                        </div>
                        <div class="flex items-center gap-2">
                            <span class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400">
                                <i class="fas fa-check w-3 h-3 mr-1"></i>
                                Available
                            </span>
                            <i class="fas fa-chevron-right text-gray-400 text-sm"></i>
                        </div>
                    </div>
                </div>
            `;
        });

        html += '</div>';
        assignPrinterContent.innerHTML = html;

        // Add click handlers for printer selection
        const printerItems = assignPrinterContent.querySelectorAll('.printer-item');
        printerItems.forEach(item => {
            item.addEventListener('click', function() {
                // Remove previous selection
                printerItems.forEach(p => p.classList.remove('border-blue-500', 'bg-blue-50', 'dark:bg-blue-950/50'));

                // Add selection styling
                this.classList.add('border-blue-500', 'bg-blue-50', 'dark:bg-blue-950/50');

                selectedPrinterId = this.dataset.printerId;

                // Show confirmation
                assignPrinter(selectedPrinterId);
            });
        });
    }

    function setupSearchFunctionality() {
        const searchInput = document.getElementById('assignPrinterSearchInput');
        if (!searchInput) return;

        searchInput.addEventListener('input', function() {
            const query = this.value.toLowerCase().trim();

            if (!window.allPrinters) return;

            let filteredPrinters = window.allPrinters;

            if (query) {
                filteredPrinters = window.allPrinters.filter(printer => {
                    const searchText = [
                        printer.name,
                        printer.model,
                        printer.brand_name,
                        printer.serial_cod,
                        printer.location
                    ].filter(Boolean).join(' ').toLowerCase();

                    return searchText.includes(query);
                });
            }

            // Update results count
            const count = document.getElementById('printersFoundCount');
            if (count) {
                count.textContent = filteredPrinters.length;
            }

            renderPrinters(filteredPrinters);
        });
    }

    function assignPrinter(printerId) {
        // Show loading state in modal
        assignPrinterContent.innerHTML = `
            <div class="text-center text-gray-500 dark:text-gray-400 py-12">
                <div class="animate-spin w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-4"></div>
                <p>Assigning printer...</p>
            </div>
        `;

        fetch(`/clients/<%= client.id %>/assign-printer`, {
            method: 'POST',
            headers: setupCSRF(),
            body: JSON.stringify({ printerId: printerId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Reload the page to show the assigned printer
                window.location.reload();
            } else {
                throw new Error(data.error || 'Assignment failed');
            }
        })
        .catch(error => {
            console.error('Error assigning printer:', error);
            alert('Failed to assign printer. Please try again.');
            // Reload available printers on error
            loadAvailablePrinters();
        });
    }

    function closeAssignModal() {
        assignPrinterModal.style.display = 'none';
        selectedPrinterId = null;
        assignPrinterContent.innerHTML = `
            <div class="text-center text-gray-500 dark:text-gray-400 py-12">
                <div class="animate-spin w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-4"></div>
                <p>Loading available printers...</p>
            </div>
        `;
        // Clear search input
        const searchInput = document.getElementById('assignPrinterSearchInput');
        if (searchInput) searchInput.value = '';
        // Hide results summary
        const summary = document.getElementById('printerResultsSummary');
        if (summary) summary.classList.add('hidden');
    }

    cancelAssign.addEventListener('click', closeAssignModal);

    // Add footer close button handler
    const cancelAssignFooter = document.getElementById('cancelAssignFooter');
    if (cancelAssignFooter) {
        cancelAssignFooter.addEventListener('click', closeAssignModal);
    }

    // Close assign modal when clicking outside
    assignPrinterModal.addEventListener('click', function(e) {
        if (e.target === assignPrinterModal) {
            closeAssignModal();
        }
    });



    // Close modal with Escape key
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            if (!deleteModal.classList.contains('hidden')) {
                closeModal();
            }
            if (assignPrinterModal.style.display === 'flex') {
                closeAssignModal();
            }
        }
    });
});
</script>
