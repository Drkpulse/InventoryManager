<div class="page-container">
  <div class="page-header-simple">
    <div class="header-title-section">
      <div class="breadcrumb-nav">
        <a href="/employees" class="breadcrumb-link">
          <i class="fas fa-users"></i> Employees
        </a>
        <i class="fas fa-chevron-right breadcrumb-separator"></i>
        <a href="/employees/<%= employee.id %>" class="breadcrumb-link">
          <%= employee.name %>
        </a>
        <i class="fas fa-chevron-right breadcrumb-separator"></i>
        <span class="breadcrumb-current"><%= t("common.edit") %></span>
      </div>
      <h1>Edit Employee</h1>
    </div>
    <div class="header-actions">
      <div class="action-buttons">
        <a href="/employees/<%= employee.id %>" class="btn btn-secondary">
          <i class="fas fa-arrow-left"></i> Back to Employee
        </a>
        <a href="/employees/<%= employee.id %>/history" class="btn btn-info">
          <i class="fas fa-history"></i> View History
        </a>
      </div>
    </div>
  </div>

  <div class="content-section">
    <div class="form-container">
      <% if (typeof errors !== 'undefined' && errors.length > 0) { %>
        <div class="alert alert-danger">
          <i class="fas fa-exclamation-triangle"></i>
          <div>
            <strong>Please fix the following errors:</strong>
            <ul>
              <% errors.forEach(error => { %>
                <li><%= error %></li>
              <% }) %>
            </ul>
          </div>
        </div>
      <% } %>

      <form method="POST" action="/employees/<%= employee.id %>" id="editEmployeeForm" class="modern-form" data-no-ajax="true">
        <!-- Employee Information Section -->
        <div class="form-section">
          <div class="section-header">
            <i class="fas fa-user section-icon"></i>
            <h3>Employee Information</h3>
          </div>

          <div class="form-grid">
            <div class="form-group full-width">
              <label for="name" class="required">Full Name</label>
              <input type="text" id="name" name="name" value="<%= employee.name %>"
                class="form-input" required placeholder="Enter employee's full name">
              <small class="field-help">
                <i class="fas fa-info-circle"></i>
                Enter the employee's complete legal name
              </small>
            </div>

            <div class="form-group">
              <label for="cep" class="required">Employee ID</label>
              <div class="input-with-validation">
                <input type="text" id="cep" name="cep" value="<%= employee.cep %>"
                  class="form-input" required placeholder="e.g., EMP001, CEP123">
                <div class="validation-feedback" id="cepValidation"></div>
                <small class="field-help">
                  <i class="fas fa-id-badge"></i>
                  Unique identifier for this employee
                </small>
              </div>
            </div>

            <div class="form-group">
              <label for="email" class="required">Email Address</label>
              <input type="email" id="email" name="email" value="<%= employee.email %>"
                class="form-input" required placeholder="employee@company.com">
              <small class="field-help">
                <i class="fas fa-envelope"></i>
                Corporate email address for communications
              </small>
            </div>
          </div>
        </div>

        <!-- Employment Details Section -->
        <div class="form-section">
          <div class="section-header">
            <i class="fas fa-briefcase section-icon"></i>
            <h3>Employment Details</h3>
          </div>

          <div class="form-grid">
            <div class="form-group">
              <label for="dept_id" class="required">Department</label>
              <select id="dept_id" name="dept_id" class="form-select" required>
                <option value="">Select Department</option>
                <% departments.forEach(dept => { %>
                  <option value="<%= dept.id %>" <%= employee.dept_id === dept.id ? 'selected' : '' %>>
                    <%= dept.name %>
                  </option>
                <% }) %>
              </select>
              <small class="field-help">
                <i class="fas fa-building"></i>
                Employee's primary department or team
              </small>
            </div>

            <div class="form-group">
              <label for="location_id" class="required">Location</label>
              <select id="location_id" name="location_id" class="form-select" required>
                <option value="">Select Location</option>
                <% locations.forEach(location => { %>
                  <option value="<%= location.id %>" <%= employee.location_id === location.id ? 'selected' : '' %>>
                    <%= location.name %>
                  </option>
                <% }) %>
              </select>
              <small class="field-help">
                <i class="fas fa-map-marker-alt"></i>
                Physical location where the employee is based
              </small>
            </div>

            <div class="form-group">
              <label for="joined_date" class="required">Start Date</label>
              <input type="date" id="joined_date" name="joined_date"
                value="<%= employee.joined_date ? new Date(employee.joined_date).toISOString().split('T')[0] : '' %>"
                class="form-input" required>
              <small class="field-help">
                <i class="fas fa-calendar-plus"></i>
                Official start date of employment
              </small>
            </div>

            <div class="form-group">
              <label for="left_date">End Date</label>
              <input type="date" id="left_date" name="left_date"
                value="<%= employee.left_date ? new Date(employee.left_date).toISOString().split('T')[0] : '' %>"
                class="form-input" placeholder="Leave blank if still employed">
              <small class="field-help">
                <i class="fas fa-calendar-times"></i>
                Leave blank if employee is still active
              </small>
            </div>

            <div class="form-group">
              <label for="job_title">Job Title</label>
              <input type="text" id="job_title" name="job_title"
                value="<%= employee.job_title || '' %>"
                class="form-input" placeholder="e.g., Software Developer, Manager">
              <small class="field-help">
                <i class="fas fa-user-tie"></i>
                Employee's official job title (optional)
              </small>
            </div>
          </div>
        </div>

        <!-- Software Assignments Section -->
        <div class="form-section">
          <div class="section-header">
            <i class="fas fa-laptop-code section-icon"></i>
            <h3>Software Assignments</h3>
          </div>

          <div class="software-assignment-container">
            <div class="software-selection">
              <% if (software && software.length > 0) { %>
                <% software.forEach(sw => { %>
                  <div class="software-option">
                    <label class="checkbox-label">
                      <input type="checkbox"
                             name="software_assignments"
                             value="<%= sw.id %>"
                             <%= assignedSoftwareIds.includes(sw.id) ? 'checked' : '' %>>
                      <span class="checkmark"></span>
                      <div class="software-info">
                        <div class="software-header">
                          <strong class="software-name"><%= sw.name %></strong>
                          <% if (sw.version) { %>
                            <span class="version">v<%= sw.version %></span>
                          <% } %>
                        </div>
                        <div class="software-details">
                          <% if (sw.vendor) { %>
                            <span class="vendor">
                              <i class="fas fa-building"></i>
                              <%= sw.vendor %>
                            </span>
                          <% } %>
                          <% if (sw.license_type) { %>
                            <span class="license-type">
                              <i class="fas fa-certificate"></i>
                              <%= sw.license_type %>
                            </span>
                          <% } %>
                          <% if (sw.cost_per_license) { %>
                            <span class="cost">
                              <i class="fas fa-euro-sign"></i>
                              â‚¬<%= parseFloat(sw.cost_per_license).toFixed(2) %>/license
                            </span>
                          <% } %>
                        </div>
                        <% if (sw.description) { %>
                          <div class="software-description">
                            <%= sw.description %>
                          </div>
                        <% } %>
                      </div>
                    </label>
                  </div>
                <% }) %>
              <% } else { %>
                <div class="no-software-available">
                  <div class="empty-icon">
                    <i class="fas fa-laptop-code"></i>
                  </div>
                  <p>No software licenses available for assignment</p>
                  <small>Software licenses can be managed separately</small>
                </div>
              <% } %>
            </div>
            <small class="field-help">
              <i class="fas fa-info-circle"></i>
              Select software licenses to assign to this employee. Changes will be logged in the employee's history.
            </small>
          </div>
        </div>

        <!-- Additional Information Section -->
        <div class="form-section">
          <div class="section-header">
            <i class="fas fa-sticky-note section-icon"></i>
            <h3>Additional Information</h3>
          </div>

          <div class="form-grid">
            <div class="form-group full-width">
              <label for="notes">Notes</label>
              <textarea id="notes" name="notes" rows="4" class="form-textarea"
                placeholder="Any additional information or notes about the employee"><%= employee.notes || '' %></textarea>
              <small class="field-help">
                <i class="fas fa-info-circle"></i>
                Optional notes or comments about the employee
              </small>
            </div>
          </div>
        </div>

        <!-- Form Actions -->
        <div class="form-actions">
          <button type="submit" class="btn btn-primary btn-lg">
            <i class="fas fa-save"></i> Update Employee
          </button>
          <a href="/employees/<%= employee.id %>" class="btn btn-secondary btn-lg">
            <i class="fas fa-times"></i> Cancel
          </a>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('editEmployeeForm');
  const cepInput = document.getElementById('cep');
  const cepValidation = document.getElementById('cepValidation');
  const leftDateInput = document.getElementById('left_date');
  const joinedDateInput = document.getElementById('joined_date');

  let originalCep = '<%= employee.cep %>';
  let duplicateCheckTimeout;

  // Employee ID validation and duplicate checking
  if (cepInput) {
    cepInput.addEventListener('input', function() {
      const newValue = this.value.trim();

      // Clear previous timeout
      clearTimeout(duplicateCheckTimeout);

      // Reset validation state
      cepValidation.className = 'validation-feedback';
      cepValidation.innerHTML = '';

      if (newValue === originalCep) {
        cepValidation.className = 'validation-feedback success';
        cepValidation.innerHTML = '<i class="fas fa-check"></i> Current Employee ID';
        return;
      }

      if (newValue.length < 3) {
        cepValidation.className = 'validation-feedback warning';
        cepValidation.innerHTML = '<i class="fas fa-info-circle"></i> Employee ID should be at least 3 characters';
        return;
      }

      // Show checking state
      cepValidation.className = 'validation-feedback checking';
      cepValidation.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Checking availability...';

      // Check for duplicates after delay
      duplicateCheckTimeout = setTimeout(() => {
        checkDuplicateEmployeeId(newValue);
      }, 800);
    });
  }

  // Check for duplicate Employee ID
  async function checkDuplicateEmployeeId(employeeId) {
    try {
      const response = await fetch(`/api/employees/check-duplicate/${encodeURIComponent(employeeId)}`);
      const data = await response.json();

      if (data.exists && data.employee.id !== <%= employee.id %>) {
        cepValidation.className = 'validation-feedback error';
        cepValidation.innerHTML = `
          <i class="fas fa-exclamation-triangle"></i>
          Employee ID already exists -
          <a href="/employees/${data.employee.id}" target="_blank" class="error-link">View existing employee</a>
        `;
      } else {
        cepValidation.className = 'validation-feedback success';
        cepValidation.innerHTML = '<i class="fas fa-check"></i> Employee ID available';
      }
    } catch (error) {
      console.error('Error checking duplicate:', error);
      cepValidation.className = 'validation-feedback error';
      cepValidation.innerHTML = '<i class="fas fa-exclamation-circle"></i> Error checking availability';
    }
  }

  // Date validation
  function validateDates() {
    const joinedDate = new Date(joinedDateInput.value);
    const leftDate = new Date(leftDateInput.value);

    if (joinedDateInput.value && leftDateInput.value && leftDate <= joinedDate) {
      leftDateInput.setCustomValidity('End date must be after start date');
      leftDateInput.classList.add('form-error');
    } else {
      leftDateInput.setCustomValidity('');
      leftDateInput.classList.remove('form-error');
    }
  }

  if (joinedDateInput && leftDateInput) {
    joinedDateInput.addEventListener('change', validateDates);
    leftDateInput.addEventListener('change', validateDates);
  }

  // Form submission handling
  form.addEventListener('submit', function(event) {
    // Check for validation errors
    if (cepValidation.classList.contains('error')) {
      event.preventDefault();

      // Show error message
      const errorAlert = document.createElement('div');
      errorAlert.className = 'alert alert-danger';
      errorAlert.innerHTML = `
        <i class="fas fa-exclamation-triangle"></i>
        <div>
          <strong>Cannot save employee</strong>
          <p>Please resolve the Employee ID conflict before saving.</p>
        </div>
      `;

      // Insert error at top of form
      form.insertBefore(errorAlert, form.firstChild);

      // Remove error after 5 seconds
      setTimeout(() => {
        if (errorAlert.parentNode) {
          errorAlert.remove();
        }
      }, 5000);

      return;
    }

    // Validate required fields
    const requiredFields = form.querySelectorAll('[required]');
    let valid = true;
    let firstInvalidField = null;

    requiredFields.forEach(field => {
      field.classList.remove('form-error');
      if (!field.value.trim()) {
        valid = false;
        field.classList.add('form-error');
        if (!firstInvalidField) {
          firstInvalidField = field;
        }
      }
    });

    if (!valid) {
      event.preventDefault();

      // Show error message
      const errorAlert = document.createElement('div');
      errorAlert.className = 'alert alert-danger';
      errorAlert.innerHTML = `
        <i class="fas fa-exclamation-triangle"></i>
        <div>
          <strong>Please fill out all required fields</strong>
          <p>Fields marked with * are required.</p>
        </div>
      `;

      // Insert error at top of form
      form.insertBefore(errorAlert, form.firstChild);

      // Scroll to first invalid field
      if (firstInvalidField) {
        firstInvalidField.focus();
        firstInvalidField.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }

      // Remove error after 5 seconds
      setTimeout(() => {
        if (errorAlert.parentNode) {
          errorAlert.remove();
        }
      }, 5000);
    }
  });

  // Show loading state on form submission
  form.addEventListener('submit', function() {
    if (!this.querySelector('.alert-danger')) {
      const submitBtn = this.querySelector('button[type="submit"]');
      submitBtn.disabled = true;
      submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating...';
    }
  });

  // Auto-focus first input
  const firstInput = form.querySelector('input[type="text"]');
  if (firstInput) {
    firstInput.focus();
  }

  // Track software assignment changes
  const softwareCheckboxes = form.querySelectorAll('input[name="software_assignments"]');
  const originalAssignments = Array.from(softwareCheckboxes)
    .filter(cb => cb.checked)
    .map(cb => cb.value);

  let changesWarningShown = false;

  softwareCheckboxes.forEach(checkbox => {
    checkbox.addEventListener('change', function() {
      const currentAssignments = Array.from(softwareCheckboxes)
        .filter(cb => cb.checked)
        .map(cb => cb.value);

      const hasChanges = JSON.stringify(originalAssignments.sort()) !== JSON.stringify(currentAssignments.sort());

      if (hasChanges && !changesWarningShown) {
        const warningAlert = document.createElement('div');
        warningAlert.className = 'alert alert-info software-changes-warning';
        warningAlert.innerHTML = `
          <i class="fas fa-info-circle"></i>
          <div>
            <strong>Software assignment changes detected</strong>
            <p>Changes to software assignments will be logged in the employee's history.</p>
          </div>
        `;

        // Find software section and insert warning
        const softwareSection = document.querySelector('.software-assignment-container');
        if (softwareSection) {
          softwareSection.insertBefore(warningAlert, softwareSection.firstChild);
          changesWarningShown = true;
        }
      }
    });
  });
});
</script>
