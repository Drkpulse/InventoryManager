<div class="page-container">
  <div class="page-header-simple">
    <h1>Employee Management</h1>
    <div class="header-actions">
      <div class="search-container">
        <i class="fas fa-search search-icon"></i>
        <input type="text" id="employeeSearch" placeholder="Search employees by name, ID, or department..." autocomplete="off" value="<%= currentFilters && currentFilters.search || '' %>">
        <div class="search-results" id="searchResults"></div>
      </div>
      <div class="action-buttons">
        <button id="exportEmployeesBtn" class="btn btn-success">
          <i class="fas fa-download"></i> Export Employee List
        </button>
        <a href="/employees/new" class="btn btn-primary">
          <i class="fas fa-user-plus"></i> Add New Employee
        </a>
      </div>
    </div>
  </div>

  <% if (showDeletedMessage) { %>
    <div class="alert alert-success">
      <i class="fas fa-check-circle"></i>
      Employee was successfully deleted and all their items have been unassigned.
    </div>
  <% } %>

  <!-- Advanced Filters Panel -->
  <div class="filters-panel" id="filtersPanel">
    <div class="filters-header" id="filtersToggle">
      <div class="filters-title">
        <i class="fas fa-filter"></i>
        <h3>Advanced Filters</h3>
        <span class="filter-badge" id="filterBadge">0</span>
      </div>
      <div class="filters-actions">
        <span class="applied-filters-preview" id="appliedFiltersPreview">No filters applied</span>
        <i class="fas fa-chevron-down toggle-icon"></i>
      </div>
    </div>

    <div class="filters-content" id="filtersContent">
      <div class="filter-row">
        <div class="filter-group">
          <label for="departmentFilter">Department</label>
          <select id="departmentFilter" name="department">
            <option value="">All Departments</option>
            <% if (typeof departments !== 'undefined') { %>
              <% departments.forEach(dept => { %>
                <option value="<%= dept.id %>" <%= currentFilters && currentFilters.department == dept.id ? 'selected' : '' %>>
                  <%= dept.name %>
                </option>
              <% }) %>
            <% } %>
          </select>
        </div>

        <div class="filter-group">
          <label for="locationFilter">Location</label>
          <select id="locationFilter" name="location">
            <option value="">All Locations</option>
            <% if (typeof locations !== 'undefined') { %>
              <% locations.forEach(location => { %>
                <option value="<%= location.id %>" <%= currentFilters && currentFilters.location == location.id ? 'selected' : '' %>>
                  <%= location.name %>
                </option>
              <% }) %>
            <% } %>
          </select>
        </div>

        <div class="filter-group">
          <label for="statusFilter">Employment Status</label>
          <select id="statusFilter" name="status">
            <option value="" <%= currentFilters && currentFilters.status === '' ? 'selected' : '' %>>All Employees</option>
            <option value="active" <%= !currentFilters || currentFilters.status === 'active' ? 'selected' : '' %>>Active Employees</option>
            <option value="inactive" <%= currentFilters && currentFilters.status === 'inactive' ? 'selected' : '' %>>Former Employees</option>
          </select>
        </div>

        <div class="filter-group">
          <label for="joinedDateRange">Joined Date Range</label>
          <div class="date-range">
            <input type="date" id="joinedDateFrom" name="joinedDateFrom" value="<%= currentFilters && currentFilters.joinedDateFrom || '' %>">
            <span>to</span>
            <input type="date" id="joinedDateTo" name="joinedDateTo" value="<%= currentFilters && currentFilters.joinedDateTo || '' %>">
          </div>
        </div>
      </div>

      <div class="filter-actions-bar">
        <div class="applied-filters-display" id="appliedFilters"></div>
        <div class="filter-buttons">
          <button type="button" id="applyFilters" class="btn btn-primary">
            <i class="fas fa-search"></i> Apply Filters
          </button>
          <button type="button" id="resetFilters" class="btn btn-secondary">
            <i class="fas fa-times"></i> Reset All
          </button>
        </div>
      </div>
    </div>
  </div>

  <% if (employees && employees.length > 0) { %>
    <div class="content-section">
      <div class="table-container">
        <table class="data-table">
          <thead>
            <tr>
              <th class="checkbox-col">
                <input type="checkbox" id="selectAll">
              </th>
              <th class="sortable" data-sort="name">
                Name <i class="fas fa-sort"></i>
              </th>
              <th class="sortable" data-sort="cep">
                Employee ID <i class="fas fa-sort"></i>
              </th>
              <th class="sortable" data-sort="email">
                Email <i class="fas fa-sort"></i>
              </th>
              <th class="sortable" data-sort="department_name">
                Department <i class="fas fa-sort"></i>
              </th>
              <th class="sortable" data-sort="location_name">
                Location <i class="fas fa-sort"></i>
              </th>
              <th class="sortable" data-sort="joined_date">
                Status <i class="fas fa-sort"></i>
              </th>
              <th class="actions-col">Actions</th>
            </tr>
          </thead>
          <tbody>
            <%
            // Sort employees to show active first
            const sortedEmployees = employees.sort((a, b) => {
              // Active employees (no left_date) first
              if (!a.left_date && b.left_date) return -1;
              if (a.left_date && !b.left_date) return 1;
              // Then sort by name
              return a.name.localeCompare(b.name);
            });
            %>
            <% sortedEmployees.forEach(employee => { %>
              <tr data-employee-id="<%= employee.id %>" class="table-row <%= employee.left_date ? 'former-employee' : 'active-employee' %>">
                <td>
                  <input type="checkbox" class="row-checkbox" value="<%= employee.id %>">
                </td>
                <td>
                  <div class="entity-info">
                    <a href="/employees/<%= employee.id %>" class="entity-name">
                      <%= employee.name %>
                    </a>
                    <% if (employee.left_date) { %>
                      <span class="status-indicator former">Former Employee</span>
                    <% } %>
                  </div>
                </td>
                <td>
                  <span class="entity-id"><%= employee.cep %></span>
                </td>
                <td>
                  <a href="mailto:<%= employee.email %>" class="entity-name">
                    <%= employee.email %>
                  </a>
                </td>
                <td>
                  <% if (employee.department_name) { %>
                    <span class="category-badge">
                      <i class="fas fa-building"></i> <%= employee.department_name %>
                    </span>
                  <% } else { %>
                    <span class="badge badge-secondary">
                      <i class="fas fa-minus"></i> Not Assigned
                    </span>
                  <% } %>
                </td>
                <td>
                  <% if (employee.location_name) { %>
                    <span class="brand-badge">
                      <i class="fas fa-map-marker-alt"></i>
                      <%= employee.location_name %>
                    </span>
                  <% } else { %>
                    <span class="badge badge-secondary">
                      <i class="fas fa-minus"></i> Not Assigned
                    </span>
                  <% } %>
                </td>
                <td>
                  <%
                    let statusClass = 'badge-success';
                    let statusIcon = 'fas fa-check-circle';
                    let statusText = 'Active';

                    if (employee.left_date) {
                      statusClass = 'badge-dark';
                      statusIcon = 'fas fa-user-times';
                      statusText = 'Former';
                    }
                  %>
                  <span class="status-badge <%= statusClass %>">
                    <i class="<%= statusIcon %>"></i> <%= statusText %>
                  </span>
                  <% if (employee.joined_date) { %>
                    <small class="entity-detail">
                      Joined <%= new Date(employee.joined_date).toLocaleDateString() %>
                    </small>
                  <% } %>
                </td>
                <td class="actions-cell">
                  <div class="action-buttons-inline">
                    <a href="/employees/<%= employee.id %>" class="btn-action btn-view" title="View Details">
                      <i class="fas fa-eye"></i>
                    </a>
                    <a href="/employees/<%= employee.id %>/edit" class="btn-action btn-edit" title="Edit">
                      <i class="fas fa-edit"></i>
                    </a>
                    <a href="/employees/<%= employee.id %>/history" class="btn-action btn-history" title="View History">
                      <i class="fas fa-history"></i>
                    </a>
                    <form style="display: inline;" method="POST" action="/employees/<%= employee.id %>/delete" class="inline-form" onsubmit="return confirmDelete('<%= employee.name %>');">
                      <button type="submit" class="btn-action btn-delete" title="Delete Employee">
                        <i class="fas fa-trash"></i>
                      </button>
                    </form>
                  </div>
                </td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>

      <!-- Bulk Actions -->
      <div class="bulk-actions" id="bulkActions" style="display: none;">
        <div class="bulk-actions-content">
          <span class="selection-count">0 employees selected</span>
          <div class="bulk-buttons">
            <button class="btn btn-info" id="bulkExport">
              <i class="fas fa-download"></i> Export Selected
            </button>
            <button class="btn btn-warning" id="bulkTransfer">
              <i class="fas fa-exchange-alt"></i> Bulk Transfer
            </button>
            <button class="btn btn-danger" id="bulkDelete">
              <i class="fas fa-trash"></i> Delete Selected
            </button>
          </div>
        </div>
      </div>

      <!-- Results Summary Bottom with Pagination -->
      <div class="results-summary-bottom">
        <div class="results-stats">
          <span class="results-count">
            <i class="fas fa-users"></i>
            Showing <strong id="employeeCount"><%= employees.length %></strong> of <%= typeof totalEmployees !== 'undefined' ? totalEmployees : employees.length %> employees
          </span>
          <div class="stats-display">
            <span class="stat-item">
              <i class="fas fa-check-circle text-success"></i>
              <%= employees.filter(emp => !emp.left_date).length %> Active
            </span>
            <% if (employees.filter(emp => emp.left_date).length > 0) { %>
              <span class="stat-item">
                <i class="fas fa-user-times text-muted"></i>
                <%= employees.filter(emp => emp.left_date).length %> Former
              </span>
            <% } %>
          </div>
          <div class="pagination-controls">
            <% if (typeof currentPage !== 'undefined' && typeof totalPages !== 'undefined') { %>
              <div class="pagination">
                <% if (currentPage > 1) { %>
                  <a href="?page=<%= currentPage - 1 %><%
                    const urlParams = new URLSearchParams(req.query);
                    urlParams.delete('page');
                    for (const [key, value] of urlParams) { %>&<%= key %>=<%= encodeURIComponent(value) %><% } %>" class="btn btn-sm">&laquo; Previous</a>
                <% } %>

                <span class="page-info">Page <%= currentPage %> of <%= totalPages %></span>

                <% if (currentPage < totalPages) { %>
                  <a href="?page=<%= currentPage + 1 %><%
                    const urlParams = new URLSearchParams(req.query);
                    urlParams.delete('page');
                    for (const [key, value] of urlParams) { %>&<%= key %>=<%= encodeURIComponent(value) %><% } %>" class="btn btn-sm">Next &raquo;</a>
                <% } %>
              </div>
            <% } %>

            <div class="items-per-page-compact">
              <select id="employeesPerPage">
                <option value="10" <%= typeof perPage !== 'undefined' && perPage == 10 ? 'selected' : '' %>>10</option>
                <option value="25" <%= typeof perPage !== 'undefined' && perPage == 25 ? 'selected' : '' %>>25</option>
                <option value="50" <%= typeof perPage !== 'undefined' && perPage == 50 ? 'selected' : '' %>>50</option>
                <option value="100" <%= typeof perPage !== 'undefined' && perPage == 100 ? 'selected' : '' %>>100</option>
              </select>
              <span>per page</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  <% } else { %>
    <div class="content-section">
      <div class="empty-state">
        <div class="empty-icon">
          <i class="fas fa-users"></i>
        </div>
        <h3>No employees found</h3>
        <p>No employees match your current search or filter criteria.</p>
        <div class="empty-actions">
          <button id="clearFiltersBtn" class="btn btn-secondary" style="display: none;">
            <i class="fas fa-times"></i> Clear All Filters
          </button>
          <a href="/employees/new" class="btn btn-primary">
            <i class="fas fa-user-plus"></i> Add First Employee
          </a>
        </div>
      </div>
    </div>
  <% } %>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Get URL parameters to preserve filter values
  const urlParams = new URLSearchParams(window.location.search);

  // Initialize filters with URL parameter values
  const statusFilter = document.getElementById('statusFilter');
  const departmentFilter = document.getElementById('departmentFilter');
  const locationFilter = document.getElementById('locationFilter');
  const joinedDateFrom = document.getElementById('joinedDateFrom');
  const joinedDateTo = document.getElementById('joinedDateTo');
  const searchInput = document.getElementById('employeeSearch');

  // Set filter values from URL parameters
  if (statusFilter) {
    statusFilter.value = urlParams.get('status') || urlParams.get('statusFilter') || 'active';
  }

  if (departmentFilter) {
    departmentFilter.value = urlParams.get('department') || urlParams.get('departmentFilter') || '';
  }

  if (locationFilter) {
    locationFilter.value = urlParams.get('location') || urlParams.get('locationFilter') || '';
  }

  if (joinedDateFrom) {
    joinedDateFrom.value = urlParams.get('joinedDateFrom') || '';
  }

  if (joinedDateTo) {
    joinedDateTo.value = urlParams.get('joinedDateTo') || '';
  }

  if (searchInput) {
    searchInput.value = urlParams.get('search') || '';
  }

  // Search functionality
  const searchResults = document.getElementById('searchResults');

  // Filters functionality
  const filtersToggle = document.getElementById('filtersToggle');
  const filtersPanel = document.querySelector('.filters-panel');
  const filtersContent = document.getElementById('filtersContent');
  const filterBadge = document.getElementById('filterBadge');
  const appliedFiltersPreview = document.getElementById('appliedFiltersPreview');

  // Initialize filters to collapsed state (expand if filters are applied)
  const hasActiveFilters = urlParams.get('department') || urlParams.get('location') ||
                          urlParams.get('joinedDateFrom') || urlParams.get('joinedDateTo') ||
                          urlParams.get('search') ||
                          (urlParams.get('status') && urlParams.get('status') !== 'active');

  if (hasActiveFilters) {
    filtersPanel.classList.add('expanded');
    filtersContent.classList.add('expanded');
  } else {
    filtersContent.classList.remove('expanded');
    filtersPanel.classList.remove('expanded');
  }

  // Filter toggle with proper animation
  filtersToggle.addEventListener('click', () => {
    const isExpanded = filtersPanel.classList.contains('expanded');

    if (isExpanded) {
      filtersPanel.classList.remove('expanded');
      filtersContent.classList.remove('expanded');
    } else {
      filtersPanel.classList.add('expanded');
      filtersContent.classList.add('expanded');
    }
  });

  // Update filter count and display applied filters
  function updateFilterCount() {
    const filters = document.querySelectorAll('#filtersContent select, #filtersContent input[type="date"]');
    let count = 0;
    let appliedFilters = [];
    let previewText = '';

    filters.forEach(filter => {
      if (filter.value && filter.value.trim() !== '') {
        // Skip counting status filter if it's the default "active"
        if (filter.id === 'statusFilter' && filter.value === 'active') {
          return;
        }

        count++;
        let filterLabel = filter.closest('.filter-group').querySelector('label').textContent;
        let filterValue = filter.value;

        if (filter.tagName === 'SELECT' && filter.selectedIndex > 0) {
          filterValue = filter.options[filter.selectedIndex].textContent;
        }

        appliedFilters.push({
          name: filterLabel,
          value: filterValue,
          element: filter
        });
      }
    });

    // Include search term if present
    if (searchInput && searchInput.value.trim()) {
      count++;
      appliedFilters.push({
        name: 'Search',
        value: searchInput.value.trim(),
        element: searchInput
      });
    }

    filterBadge.textContent = count;

    // Update preview text
    if (count > 0) {
      if (count === 1) {
        previewText = appliedFilters[0].name;
      } else if (count === 2) {
        previewText = `${appliedFilters[0].name} & ${appliedFilters[1].name}`;
      } else {
        previewText = `${count} filters active`;
      }
    } else {
      previewText = 'No filters applied';
    }
    appliedFiltersPreview.textContent = previewText;

    // Update applied filters display
    const appliedFiltersElement = document.getElementById('appliedFilters');
    if (appliedFiltersElement) {
      appliedFiltersElement.innerHTML = appliedFilters.map((filter, index) =>
        `<span class="filter-tag" data-filter-index="${index}">
          ${filter.name}: ${filter.value}
          <span class="remove" onclick="removeFilter(${index})" title="Remove filter">&times;</span>
        </span>`
      ).join('');
    }

    // Store current filters
    window.currentFilters = appliedFilters;
  }

  // Function to remove individual filters
  window.removeFilter = function(index) {
    const filter = window.currentFilters[index];
    if (filter.element === searchInput) {
      searchInput.value = '';
      if (searchResults) {
        searchResults.classList.remove('active');
      }
    } else {
      filter.element.value = '';
      // If removing status filter, set back to default 'active'
      if (filter.element.id === 'statusFilter') {
        filter.element.value = 'active';
      }
    }
    updateFilterCount();
  };

  // Add event listeners to all filter inputs
  document.querySelectorAll('#filtersContent select, #filtersContent input').forEach(input => {
    input.addEventListener('change', updateFilterCount);
    input.addEventListener('input', updateFilterCount);
  });

  if (searchInput) {
    searchInput.addEventListener('input', updateFilterCount);
  }

  // Initial filter count
  updateFilterCount();

  // Apply filters
  const applyFiltersBtn = document.getElementById('applyFilters');
  if (applyFiltersBtn) {
    applyFiltersBtn.addEventListener('click', () => {
      const params = new URLSearchParams();

      // Add all filter values, using correct parameter names
      if (departmentFilter && departmentFilter.value) {
        params.append('department', departmentFilter.value);
      }

      if (locationFilter && locationFilter.value) {
        params.append('location', locationFilter.value);
      }

      if (statusFilter && statusFilter.value) {
        params.append('status', statusFilter.value);
      }

      if (joinedDateFrom && joinedDateFrom.value) {
        params.append('joinedDateFrom', joinedDateFrom.value);
      }

      if (joinedDateTo && joinedDateTo.value) {
        params.append('joinedDateTo', joinedDateTo.value);
      }

      if (searchInput && searchInput.value.trim()) {
        params.append('search', searchInput.value.trim());
      }

      // Navigate to the filtered results
      window.location.search = params.toString();
    });
  }

  // Reset filters
  const resetFiltersBtn = document.getElementById('resetFilters');
  if (resetFiltersBtn) {
    resetFiltersBtn.addEventListener('click', () => {
      // Reset to default state (active employees only)
      window.location.href = window.location.pathname + '?status=active';
    });
  }

  // Auto-apply filters on Enter key in search
  if (searchInput) {
    searchInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        document.getElementById('applyFilters').click();
      }
    });
  }

  // Checkbox functionality for bulk actions
  const selectAllCheckbox = document.getElementById('selectAll');
  const employeeCheckboxes = document.querySelectorAll('.row-checkbox');
  const bulkActions = document.getElementById('bulkActions');
  const selectionCount = bulkActions?.querySelector('.selection-count');

  if (selectAllCheckbox) {
    selectAllCheckbox.addEventListener('change', function() {
      employeeCheckboxes.forEach(checkbox => {
        checkbox.checked = this.checked;
      });
      updateBulkActions();
    });
  }

  employeeCheckboxes.forEach(checkbox => {
    checkbox.addEventListener('change', updateBulkActions);
  });

  function updateBulkActions() {
    const selectedCount = document.querySelectorAll('.row-checkbox:checked').length;
    if (selectedCount > 0 && bulkActions) {
      bulkActions.style.display = 'block';
      if (selectionCount) {
        selectionCount.textContent = `${selectedCount} employee${selectedCount !== 1 ? 's' : ''} selected`;
      }
    } else if (bulkActions) {
      bulkActions.style.display = 'none';
    }

    // Update select all checkbox state
    if (selectAllCheckbox) {
      selectAllCheckbox.indeterminate = selectedCount > 0 && selectedCount < employeeCheckboxes.length;
      selectAllCheckbox.checked = selectedCount === employeeCheckboxes.length && employeeCheckboxes.length > 0;
    }
  }

  // Items per page change
  const employeesPerPageSelect = document.getElementById('employeesPerPage');
  if (employeesPerPageSelect) {
    // Set current value from URL
    const currentPerPage = urlParams.get('perPage');
    if (currentPerPage) {
      employeesPerPageSelect.value = currentPerPage;
    }

    employeesPerPageSelect.addEventListener('change', function() {
      const urlParams = new URLSearchParams(window.location.search);
      urlParams.set('perPage', this.value);
      urlParams.delete('page'); // Reset to first page
      window.location.search = urlParams.toString();
    });
  }

  // Export functionality
  const exportBtn = document.getElementById('exportEmployeesBtn');
  if (exportBtn) {
    exportBtn.addEventListener('click', () => {
      const exportParams = new URLSearchParams(window.location.search);
      exportParams.append('export_type', 'current_view');
      exportParams.append('export_timestamp', new Date().toISOString());

      // Create export URL
      const exportUrl = `/employees/export?${exportParams.toString()}`;

      // Create hidden iframe for download
      const iframe = document.createElement('iframe');
      iframe.style.display = 'none';
      iframe.src = exportUrl;
      document.body.appendChild(iframe);

      setTimeout(() => {
        document.body.removeChild(iframe);
      }, 2000);
    });
  }

  // Close search results when clicking outside
  document.addEventListener('click', (e) => {
    if (searchInput && searchResults && !searchInput.contains(e.target) && !searchResults.contains(e.target)) {
      searchResults.classList.remove('active');
    }
  });

  // Show clear filters button in empty state if filters are applied
  const clearFiltersBtn = document.getElementById('clearFiltersBtn');
  if (clearFiltersBtn && hasActiveFilters) {
    clearFiltersBtn.style.display = 'inline-flex';
    clearFiltersBtn.addEventListener('click', () => {
      window.location.href = window.location.pathname + '?status=active';
    });
  }
});

// Confirmation for delete
function confirmDelete(employeeName) {
  return confirm(`Are you sure you want to delete ${employeeName}? This action cannot be undone and will unassign all their items.`);
}
</script>
