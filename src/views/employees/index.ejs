<div class="container mx-auto px-4 py-8">
  <!-- Header -->
  <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-8">
    <div>
      <h1 class="text-2xl font-bold text-gray-800 dark:text-gray-100 mb-2 flex items-center gap-2">
        <i class="fas fa-users"></i> <%= t('employee_management') %>
      </h1>
    </div>
    <div class="flex flex-wrap gap-3 mt-4 md:mt-0">
      <button id="exportEmployeesBtn" class="group px-4 py-2 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-semibold rounded-lg transition-all duration-300 flex items-center gap-2 hover:scale-105 hover:shadow-lg">
        <i class="fas fa-download mr-2 group-hover:translate-y-1 transition-transform duration-300"></i> <%= t('export_employee_list') %>
      </button>
      <a href="/employees/new" class="group px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-semibold rounded-lg transition-all duration-300 flex items-center gap-2 hover:scale-105 hover:shadow-lg">
        <i class="fas fa-user-plus mr-2 group-hover:scale-110 transition-transform duration-300"></i> <%= t('add_new_employee') %>
      </a>
    </div>
  </div>

  <!-- Search Bar -->
  <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-6">
    <div class="relative w-full md:w-1/2">
      <i class="fas fa-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 dark:text-gray-500"></i>
      <input type="text" id="employeeSearch"
        class="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
        placeholder="Search employees by name, ID, or department..."
        autocomplete="off"
        value="<%= currentFilters && currentFilters.search || '' %>">
      <div class="absolute left-0 right-0 z-10 bg-white dark:bg-gray-800 rounded-b shadow hidden" id="searchResults"></div>
    </div>
  </div>

  <% if (showDeletedMessage) { %>
    <div class="mb-6 flex items-center gap-2 px-4 py-3 rounded-lg bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 border border-green-200 dark:border-green-700">
      <i class="fas fa-check-circle"></i>
      <span><%= t('employee_deleted') %></span>
    </div>
  <% } %>

  <!-- Advanced Filters Panel -->
  <div class="mb-6 bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg shadow">
    <div class="flex items-center justify-between px-6 py-4 cursor-pointer select-none" id="filtersToggle">
      <div class="flex items-center gap-2">
        <i class="fas fa-filter"></i>
        <h3 class="font-semibold text-gray-700 dark:text-gray-200"><%= t('advanced_filters') %></h3>
        <span class="ml-2 inline-flex items-center justify-center w-6 h-6 rounded-full bg-blue-600 text-white text-xs font-bold" id="filterBadge">0</span>
      </div>
      <div class="flex items-center gap-2">
        <span class="text-sm text-gray-500 dark:text-gray-400" id="appliedFiltersPreview"><%= t('no_filters_applied') %></span>
        <i class="fas fa-chevron-down toggle-icon"></i>
      </div>
    </div>
    <div class="px-6 py-4 border-t border-gray-200 dark:border-gray-700 hidden" id="filtersContent">
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-4">
        <div>
          <label for="departmentFilter" class="block text-xs font-semibold text-gray-700 dark:text-gray-300 mb-1"><%= t('department') %></label>
          <select id="departmentFilter" name="department"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
            <option value=""><%= t('all_departments') %></option>
            <% if (typeof departments !== 'undefined') { %>
              <% departments.forEach(dept => { %>
                <option value="<%= dept.id %>" <%= currentFilters && currentFilters.department == dept.id ? 'selected' : '' %>>
                  <%= dept.name %>
                </option>
              <% }) %>
            <% } %>
          </select>
        </div>
        <div>
          <label for="locationFilter" class="block text-xs font-semibold text-gray-700 dark:text-gray-300 mb-1">Location</label>
          <select id="locationFilter" name="location"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
            <option value=""><%= t('all_locations') %></option>
            <% if (typeof locations !== 'undefined') { %>
              <% locations.forEach(location => { %>
                <option value="<%= location.id %>" <%= currentFilters && currentFilters.location == location.id ? 'selected' : '' %>>
                  <%= location.name %>
                </option>
              <% }) %>
            <% } %>
          </select>
        </div>
        <div>
          <label for="statusFilter" class="block text-xs font-semibold text-gray-700 dark:text-gray-300 mb-1"><%= t('employment_status') %></label>
          <select id="statusFilter" name="status"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
            <option value="" <%= currentFilters && currentFilters.status === '' ? 'selected' : '' %>><%= t('all_employees') %></option>
            <option value="active" <%= !currentFilters || currentFilters.status === 'active' ? 'selected' : '' %>><%= t('active_employees') %></option>
            <option value="inactive" <%= currentFilters && currentFilters.status === 'inactive' ? 'selected' : '' %>><%= t('former_employees') %></option>
          </select>
        </div>
        <div>
          <label class="block text-xs font-semibold text-gray-700 dark:text-gray-300 mb-1"><%= t('joined_date_range') %></label>
          <div class="flex items-center gap-2">
            <input type="date" id="joinedDateFrom" name="joinedDateFrom"
              class="px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 w-32"
              value="<%= currentFilters && currentFilters.joinedDateFrom || '' %>">
            <span class="text-gray-400 dark:text-gray-500"><%= t('to') %></span>
            <input type="date" id="joinedDateTo" name="joinedDateTo"
              class="px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 w-32"
              value="<%= currentFilters && currentFilters.joinedDateTo || '' %>">
          </div>
        </div>
      </div>
      <div class="flex flex-wrap items-center justify-between gap-4">
        <div class="flex flex-wrap gap-2 text-xs" id="appliedFilters"></div>
        <div class="flex gap-2">
          <button type="button" id="applyFilters" class="group px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-semibold rounded-lg transition-all duration-300 flex items-center gap-2 hover:scale-105 hover:shadow-lg">
            <i class="fas fa-search group-hover:scale-110 transition-transform duration-300"></i> <%= t('apply_filters') %>
          </button>
          <button type="button" id="resetFilters" class="group px-4 py-2 bg-gradient-to-r from-gray-400 to-gray-600 hover:from-gray-500 hover:to-gray-700 text-white font-semibold rounded-lg transition-all duration-300 flex items-center gap-2 hover:scale-105 hover:shadow-lg">
            <i class="fas fa-times group-hover:-rotate-12 transition-transform duration-300"></i> <%= t('reset_all') %>
          </button>
        </div>
      </div>
    </div>
  </div>

  <% if (employees && employees.length > 0) { %>
    <div class="overflow-x-auto bg-white dark:bg-gray-800 rounded-lg shadow">
      <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
        <thead class="bg-gray-50 dark:bg-gray-900">
          <tr>
            <th class="px-4 py-3">
              <input type="checkbox" id="selectAll" class="accent-blue-600">
            </th>
            <th class="px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200"><%= t('name') %></th>
            <th class="px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200"><%= t('employee_id') %></th>
            <th class="px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200"><%= t('email') %></th>
            <th class="px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200"><%= t('department') %></th>
            <th class="px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200"><%= t('location') %></th>
            <th class="px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200"><%= t('status') %></th>
            <th class="px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200"><%= t('actions') %></th>
          </tr>
        </thead>
        <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
          <%
          // Sort employees to show active first
          const sortedEmployees = employees.sort((a, b) => {
            if (!a.left_date && b.left_date) return -1;
            if (a.left_date && !b.left_date) return 1;
            return a.name.localeCompare(b.name);
          });
          %>
          <% sortedEmployees.forEach(employee => { %>
            <tr class="<%= employee.left_date ? 'bg-gray-50 dark:bg-gray-900' : '' %>">
              <td class="px-4 py-3">
                <input type="checkbox" class="row-checkbox accent-blue-600" value="<%= employee.id %>">
              </td>
              <td class="px-4 py-3">
                <a href="/employees/<%= employee.id %>" class="font-semibold text-blue-700 dark:text-blue-300 hover:underline">
                  <%= employee.name %>
                </a>
                <% if (employee.left_date) { %>
                  <span class="ml-2 inline-flex items-center px-2 py-0.5 rounded bg-gray-300 dark:bg-gray-700 text-xs text-gray-700 dark:text-gray-200">Former</span>
                <% } %>
              </td>
              <td class="px-4 py-3 font-mono text-xs text-gray-700 dark:text-gray-300"><%= employee.cep %></td>
              <td class="px-4 py-3">
                <a href="mailto:<%= employee.email %>" class="text-gray-700 dark:text-gray-200 hover:underline"><%= employee.email %></a>
              </td>
              <td class="px-4 py-3">
                <% if (employee.department_name) { %>
                  <span class="inline-flex items-center gap-1 px-2 py-0.5 rounded bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 text-xs font-semibold">
                    <i class="fas fa-building"></i> <%= employee.department_name %>
                  </span>
                <% } else { %>
                  <span class="inline-flex items-center gap-1 px-2 py-0.5 rounded bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-300 text-xs">
                    <i class="fas fa-minus"></i> <%= t('not_assigned') %>
                  </span>
                <% } %>
              </td>
              <td class="px-4 py-3">
                <% if (employee.location_name) { %>
                  <span class="inline-flex items-center gap-1 px-2 py-0.5 rounded bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300 text-xs font-semibold">
                    <i class="fas fa-map-marker-alt"></i> <%= employee.location_name %>
                  </span>
                <% } else { %>
                  <span class="inline-flex items-center gap-1 px-2 py-0.5 rounded bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-300 text-xs">
                    <i class="fas fa-minus"></i> <%= t('not_assigned') %>
                  </span>
                <% } %>
              </td>
              <td class="px-4 py-3">
                <%
                  let statusClass = 'bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300';
                  let statusIcon = 'fas fa-check-circle';
                  let statusText = 'Active';
                  if (employee.left_date) {
                    statusClass = 'bg-gray-300 dark:bg-gray-700 text-gray-700 dark:text-gray-200';
                    statusIcon = 'fas fa-user-times';
                    statusText = 'Former';
                  }
                %>
                <span class="inline-flex items-center gap-1 px-2 py-0.5 rounded <%= statusClass %> text-xs font-semibold">
                  <i class="<%= statusIcon %>"></i> <%= statusText %>
                </span>
                <% if (employee.joined_date) { %>
                  <div class="text-xs text-gray-500 dark:text-gray-400"><%= t('joined') %> <%= new Date(employee.joined_date).toLocaleDateString() %></div>
                <% } %>
              </td>
              <td class="px-4 py-3">
                <div class="flex flex-wrap gap-2">
                  <a href="/employees/<%= employee.id %>" class="group inline-flex items-center px-2 py-1 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 rounded-lg transition-all duration-300 hover:scale-105 hover:shadow-lg" title="View Details">
                    <i class="fas fa-eye"></i>
                  </a>
                  <a href="/employees/<%= employee.id %>/edit" class="group inline-flex items-center px-2 py-1 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white rounded-lg transition-all duration-300 hover:scale-105 hover:shadow-lg" title="Edit">
                    <i class="fas fa-edit group-hover:rotate-12 transition-transform duration-300"></i>
                  </a>
                  <a href="/employees/<%= employee.id %>/history" class="group inline-flex items-center px-2 py-1 bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 text-white rounded-lg transition-all duration-300 hover:scale-105 hover:shadow-lg" title="View History">
                    <i class="fas fa-history group-hover:scale-110 transition-transform duration-300"></i>
                  </a>
                  <form style="display: inline;" method="POST" action="/employees/<%= employee.id %>/delete" class="inline-form" onsubmit="return confirmDelete('<%= employee.name %>');">
                    <button type="submit" class="group inline-flex items-center px-2 py-1 bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white rounded-lg transition-all duration-300 hover:scale-105 hover:shadow-lg" title="Delete Employee">
                      <i class="fas fa-trash group-hover:scale-110 transition-transform duration-300"></i>
                    </button>
                  </form>
                </div>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>

    <!-- Bulk Actions -->
    <div class="mt-4" id="bulkActions" style="display: none;">
      <div class="flex flex-wrap items-center justify-between bg-blue-50 dark:bg-blue-900 border border-blue-200 dark:border-blue-700 rounded-lg px-6 py-4">
        <span class="selection-count text-sm font-semibold text-blue-700 dark:text-blue-300">0 <%= t('employees_selected') %></span>
        <div class="flex gap-2">
          <button class="group px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-semibold rounded-lg transition-all duration-300 flex items-center gap-2 hover:scale-105 hover:shadow-lg" id="bulkExport">
            <i class="fas fa-download group-hover:translate-y-1 transition-transform duration-300"></i> <%= t('export_selected') %>
          </button>
          <button class="group px-4 py-2 bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 text-white font-semibold rounded-lg transition-all duration-300 flex items-center gap-2 hover:scale-105 hover:shadow-lg" id="bulkTransfer">
            <i class="fas fa-exchange-alt group-hover:rotate-12 transition-transform duration-300"></i> <%= t('bulk_transfer') %>
          </button>
          <button class="group px-4 py-2 bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white font-semibold rounded-lg transition-all duration-300 flex items-center gap-2 hover:scale-105 hover:shadow-lg" id="bulkDelete">
            <i class="fas fa-trash group-hover:scale-110 transition-transform duration-300"></i> <%= t('delete_selected') %>
          </button>
        </div>
      </div>
    </div>

    <!-- Results Summary & Pagination -->
    <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mt-8">
      <div class="flex flex-col gap-2">
        <span class="text-sm text-gray-700 dark:text-gray-200">
          <i class="fas fa-users"></i>
          <%= t('showing') %> <strong id="employeeCount"><%= employees.length %></strong> <%= t('of') %> <%= typeof totalEmployees !== 'undefined' ? totalEmployees : employees.length %> <%= t('employees') %>
        </span>
        <div class="flex gap-4 text-xs text-gray-500 dark:text-gray-400">
          <span>
            <i class="fas fa-check-circle text-green-600 dark:text-green-400"></i>
            <%= employees.filter(emp => !emp.left_date).length %> <%= t('active') %>
          </span>
          <% if (employees.filter(emp => emp.left_date).length > 0) { %>
            <span>
              <i class="fas fa-user-times text-gray-400 dark:text-gray-500"></i>
              <%= employees.filter(emp => emp.left_date).length %> <%= t('former') %>
            </span>
          <% } %>
        </div>
      </div>
      <div class="flex items-center gap-4">
        <% if (typeof currentPage !== 'undefined' && typeof totalPages !== 'undefined') { %>
          <div class="flex items-center gap-2">
            <% if (currentPage > 1) { %>
              <a href="?page=<%= currentPage - 1 %><%
                const urlParams = new URLSearchParams(req.query);
                urlParams.delete('page');
                for (const [key, value] of urlParams) { %>&<%= key %>=<%= encodeURIComponent(value) %><% } %>" class="px-3 py-1 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 rounded transition flex items-center gap-1">
                <i class="fas fa-chevron-left"></i> <%= t('previous') %>
              </a>
            <% } %>
            <span class="text-xs text-gray-500 dark:text-gray-400"><%= t('page') %> <%= currentPage %> <%= t('of') %> <%= totalPages %></span>
            <% if (currentPage < totalPages) { %>
              <a href="?page=<%= currentPage + 1 %><%
                const urlParams = new URLSearchParams(req.query);
                urlParams.delete('page');
                for (const [key, value] of urlParams) { %>&<%= key %>=<%= encodeURIComponent(value) %><% } %>" class="px-3 py-1 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 rounded transition flex items-center gap-1">
                Next <i class="fas fa-chevron-right"></i>
              </a>
            <% } %>
          </div>
        <% } %>
        <div>
          <select id="employeesPerPage" class="ml-2 px-2 py-1 border border-gray-300 dark:border-gray-700 rounded bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 text-xs">
            <option value="10" <%= typeof perPage !== 'undefined' && perPage == 10 ? 'selected' : '' %>>10</option>
            <option value="25" <%= typeof perPage !== 'undefined' && perPage == 25 ? 'selected' : '' %>>25</option>
            <option value="50" <%= typeof perPage !== 'undefined' && perPage == 50 ? 'selected' : '' %>>50</option>
            <option value="100" <%= typeof perPage !== 'undefined' && perPage == 100 ? 'selected' : '' %>>100</option>
          </select>
          <span class="text-xs text-gray-500 dark:text-gray-400"><%= t('per_page') %></span>
        </div>
      </div>
    </div>
  <% } else { %>
    <div class="flex flex-col items-center justify-center py-16 text-center border border-dashed border-blue-400 rounded bg-blue-50 dark:bg-blue-950 mt-8">
      <div class="text-4xl text-blue-500 mb-2">
        <i class="fas fa-users"></i>
      </div>
      <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-1"><%= t('no_employees_found') %></h3>
      <p class="text-gray-500 dark:text-gray-400 mb-4"><%= t('no_employees_match') %></p>
      <div class="flex gap-2 justify-center">
        <button id="clearFiltersBtn" class="group px-4 py-2 bg-gradient-to-r from-gray-400 to-gray-600 hover:from-gray-500 hover:to-gray-700 text-white font-semibold rounded-lg transition-all duration-300 flex items-center gap-2 hover:scale-105 hover:shadow-lg" style="display: none;">
          <i class="fas fa-times group-hover:-rotate-12 transition-transform duration-300"></i> <%= t('clear_all_filters') %>
        </button>
        <a href="/employees/new" class="group px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-semibold rounded-lg transition-all duration-300 flex items-center gap-2 hover:scale-105 hover:shadow-lg">
          <i class="fas fa-user-plus mr-2 group-hover:scale-110 transition-transform duration-300"></i> <%= t('add_first_employee') %>
        </a>
      </div>
    </div>
  <% } %>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Get URL parameters to preserve filter values
  const urlParams = new URLSearchParams(window.location.search);

  // Initialize filters with URL parameter values
  const statusFilter = document.getElementById('statusFilter');
  const departmentFilter = document.getElementById('departmentFilter');
  const locationFilter = document.getElementById('locationFilter');
  const joinedDateFrom = document.getElementById('joinedDateFrom');
  const joinedDateTo = document.getElementById('joinedDateTo');
  const searchInput = document.getElementById('employeeSearch');

  // Set filter values from URL parameters
  if (statusFilter) {
    statusFilter.value = urlParams.get('status') || urlParams.get('statusFilter') || 'active';
  }

  if (departmentFilter) {
    departmentFilter.value = urlParams.get('department') || urlParams.get('departmentFilter') || '';
  }

  if (locationFilter) {
    locationFilter.value = urlParams.get('location') || urlParams.get('locationFilter') || '';
  }

  if (joinedDateFrom) {
    joinedDateFrom.value = urlParams.get('joinedDateFrom') || '';
  }

  if (joinedDateTo) {
    joinedDateTo.value = urlParams.get('joinedDateTo') || '';
  }

  if (searchInput) {
    searchInput.value = urlParams.get('search') || '';
  }

  // Search functionality
  const searchResults = document.getElementById('searchResults');

  // Filters functionality
  const filtersToggle = document.getElementById('filtersToggle');
  const filtersPanel = document.querySelector('.filters-panel');
  const filtersContent = document.getElementById('filtersContent');
  const filterBadge = document.getElementById('filterBadge');
  const appliedFiltersPreview = document.getElementById('appliedFiltersPreview');

  // Initialize filters to collapsed state (expand if filters are applied)
  const hasActiveFilters = urlParams.get('department') || urlParams.get('location') ||
                          urlParams.get('joinedDateFrom') || urlParams.get('joinedDateTo') ||
                          urlParams.get('search') ||
                          (urlParams.get('status') && urlParams.get('status') !== 'active');

  if (hasActiveFilters) {
    filtersPanel.classList.add('expanded');
    filtersContent.classList.add('expanded');
  } else {
    filtersContent.classList.remove('expanded');
    filtersPanel.classList.remove('expanded');
  }

  // Filter toggle with proper animation
  filtersToggle.addEventListener('click', () => {
    const isExpanded = filtersPanel.classList.contains('expanded');

    if (isExpanded) {
      filtersPanel.classList.remove('expanded');
      filtersContent.classList.remove('expanded');
    } else {
      filtersPanel.classList.add('expanded');
      filtersContent.classList.add('expanded');
    }
  });

  // Update filter count and display applied filters
  function updateFilterCount() {
    const filters = document.querySelectorAll('#filtersContent select, #filtersContent input[type="date"]');
    let count = 0;
    let appliedFilters = [];
    let previewText = '';

    filters.forEach(filter => {
      if (filter.value && filter.value.trim() !== '') {
        // Skip counting status filter if it's the default "active"
        if (filter.id === 'statusFilter' && filter.value === 'active') {
          return;
        }

        count++;
        let filterLabel = filter.closest('.filter-group').querySelector('label').textContent;
        let filterValue = filter.value;

        if (filter.tagName === 'SELECT' && filter.selectedIndex > 0) {
          filterValue = filter.options[filter.selectedIndex].textContent;
        }

        appliedFilters.push({
          name: filterLabel,
          value: filterValue,
          element: filter
        });
      }
    });

    // Include search term if present
    if (searchInput && searchInput.value.trim()) {
      count++;
      appliedFilters.push({
        name: 'Search',
        value: searchInput.value.trim(),
        element: searchInput
      });
    }

    filterBadge.textContent = count;

    // Update preview text
    if (count > 0) {
      if (count === 1) {
        previewText = appliedFilters[0].name;
      } else if (count === 2) {
        previewText = `${appliedFilters[0].name} & ${appliedFilters[1].name}`;
      } else {
        previewText = `${count} filters active`;
      }
    } else {
      previewText = 'No filters applied';
    }
    appliedFiltersPreview.textContent = previewText;

    // Update applied filters display
    const appliedFiltersElement = document.getElementById('appliedFilters');
    if (appliedFiltersElement) {
      appliedFiltersElement.innerHTML = appliedFilters.map((filter, index) =>
        `<span class="filter-tag" data-filter-index="${index}">
          ${filter.name}: ${filter.value}
          <span class="remove" onclick="removeFilter(${index})" title="Remove filter">&times;</span>
        </span>`
      ).join('');
    }

    // Store current filters
    window.currentFilters = appliedFilters;
  }

  // Function to remove individual filters
  window.removeFilter = function(index) {
    const filter = window.currentFilters[index];
    if (filter.element === searchInput) {
      searchInput.value = '';
      if (searchResults) {
        searchResults.classList.remove('active');
      }
    } else {
      filter.element.value = '';
      // If removing status filter, set back to default 'active'
      if (filter.element.id === 'statusFilter') {
        filter.element.value = 'active';
      }
    }
    updateFilterCount();
  };

  // Add event listeners to all filter inputs
  document.querySelectorAll('#filtersContent select, #filtersContent input').forEach(input => {
    input.addEventListener('change', updateFilterCount);
    input.addEventListener('input', updateFilterCount);
  });

  if (searchInput) {
    searchInput.addEventListener('input', updateFilterCount);
  }

  // Initial filter count
  updateFilterCount();

  // Apply filters
  const applyFiltersBtn = document.getElementById('applyFilters');
  if (applyFiltersBtn) {
    applyFiltersBtn.addEventListener('click', () => {
      const params = new URLSearchParams();

      // Add all filter values, using correct parameter names
      if (departmentFilter && departmentFilter.value) {
        params.append('department', departmentFilter.value);
      }

      if (locationFilter && locationFilter.value) {
        params.append('location', locationFilter.value);
      }

      if (statusFilter && statusFilter.value) {
        params.append('status', statusFilter.value);
      }

      if (joinedDateFrom && joinedDateFrom.value) {
        params.append('joinedDateFrom', joinedDateFrom.value);
      }

      if (joinedDateTo && joinedDateTo.value) {
        params.append('joinedDateTo', joinedDateTo.value);
      }

      if (searchInput && searchInput.value.trim()) {
        params.append('search', searchInput.value.trim());
      }

      // Navigate to the filtered results
      window.location.search = params.toString();
    });
  }

  // Reset filters
  const resetFiltersBtn = document.getElementById('resetFilters');
  if (resetFiltersBtn) {
    resetFiltersBtn.addEventListener('click', () => {
      // Reset to default state (active employees only)
      window.location.href = window.location.pathname + '?status=active';
    });
  }

  // Auto-apply filters on Enter key in search
  if (searchInput) {
    searchInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        document.getElementById('applyFilters').click();
      }
    });
  }

  // Checkbox functionality for bulk actions
  const selectAllCheckbox = document.getElementById('selectAll');
  const employeeCheckboxes = document.querySelectorAll('.row-checkbox');
  const bulkActions = document.getElementById('bulkActions');
  const selectionCount = bulkActions?.querySelector('.selection-count');

  if (selectAllCheckbox) {
    selectAllCheckbox.addEventListener('change', function() {
      employeeCheckboxes.forEach(checkbox => {
        checkbox.checked = this.checked;
      });
      updateBulkActions();
    });
  }

  employeeCheckboxes.forEach(checkbox => {
    checkbox.addEventListener('change', updateBulkActions);
  });

  function updateBulkActions() {
    const selectedCount = document.querySelectorAll('.row-checkbox:checked').length;
    if (selectedCount > 0 && bulkActions) {
      bulkActions.style.display = 'block';
      if (selectionCount) {
        selectionCount.textContent = `${selectedCount} employee${selectedCount !== 1 ? 's' : ''} selected`;
      }
    } else if (bulkActions) {
      bulkActions.style.display = 'none';
    }

    // Update select all checkbox state
    if (selectAllCheckbox) {
      selectAllCheckbox.indeterminate = selectedCount > 0 && selectedCount < employeeCheckboxes.length;
      selectAllCheckbox.checked = selectedCount === employeeCheckboxes.length && employeeCheckboxes.length > 0;
    }
  }

  // Items per page change
  const employeesPerPageSelect = document.getElementById('employeesPerPage');
  if (employeesPerPageSelect) {
    // Set current value from URL
    const currentPerPage = urlParams.get('perPage');
    if (currentPerPage) {
      employeesPerPageSelect.value = currentPerPage;
    }

    employeesPerPageSelect.addEventListener('change', function() {
      const urlParams = new URLSearchParams(window.location.search);
      urlParams.set('perPage', this.value);
      urlParams.delete('page'); // Reset to first page
      window.location.search = urlParams.toString();
    });
  }

  // Export functionality
  const exportBtn = document.getElementById('exportEmployeesBtn');
  if (exportBtn) {
    exportBtn.addEventListener('click', () => {
      const exportParams = new URLSearchParams(window.location.search);
      exportParams.append('export_type', 'current_view');
      exportParams.append('export_timestamp', new Date().toISOString());

      // Create export URL
      const exportUrl = `/employees/export?${exportParams.toString()}`;

      // Create hidden iframe for download
      const iframe = document.createElement('iframe');
      iframe.style.display = 'none';
      iframe.src = exportUrl;
      document.body.appendChild(iframe);

      setTimeout(() => {
        document.body.removeChild(iframe);
      }, 2000);
    });
  }

  // Close search results when clicking outside
  document.addEventListener('click', (e) => {
    if (searchInput && searchResults && !searchInput.contains(e.target) && !searchResults.contains(e.target)) {
      searchResults.classList.remove('active');
    }
  });

  // Show clear filters button in empty state if filters are applied
  const clearFiltersBtn = document.getElementById('clearFiltersBtn');
  if (clearFiltersBtn && hasActiveFilters) {
    clearFiltersBtn.style.display = 'inline-flex';
    clearFiltersBtn.addEventListener('click', () => {
      window.location.href = window.location.pathname + '?status=active';
    });
  }
});

// Confirmation for delete
function confirmDelete(employeeName) {
  return confirm(`Are you sure you want to delete ${employeeName}? This action cannot be undone and will unassign all their items.`);
}
</script>
