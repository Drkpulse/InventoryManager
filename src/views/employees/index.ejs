<div class="container mx-auto px-4 py-8">
  <!-- Header -->
  <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-8">
    <div>
      <h1 class="text-2xl font-bold text-gray-800 dark:text-gray-100 mb-2 flex items-center gap-2">
        <i class="fas fa-users"></i> <%= t('employee_management') %>
      </h1>
    </div>
    <div class="flex flex-wrap gap-3 mt-4 md:mt-0">
      <button id="exportEmployeesBtn" class="group px-4 py-2 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-semibold rounded-lg transition-all duration-300 flex items-center gap-2 hover:scale-105 hover:shadow-lg">
        <i class="fas fa-download mr-2 group-hover:translate-y-1 transition-transform duration-300"></i> <%= t('export_employee_list') %>
      </button>
      <a href="/employees/new" class="group px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-semibold rounded-lg transition-all duration-300 flex items-center gap-2 hover:scale-105 hover:shadow-lg">
        <i class="fas fa-user-plus mr-2 group-hover:scale-110 transition-transform duration-300"></i> <%= t('add_new_employee') %>
      </a>
    </div>
  </div>

  <!-- Error Messages -->
  <% if (req.query.error) { %>
    <div class="mb-6 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700 rounded-lg p-4">
      <div class="flex items-center gap-2 text-red-800 dark:text-red-200">
        <i class="fas fa-exclamation-triangle"></i>
        <span class="font-semibold">Error:</span>
        <% if (req.query.error === 'employee_not_found') { %>
          Employee not found.
        <% } else if (req.query.error === 'invalid_cep_confirmation') { %>
          Invalid CEP ID confirmation. Please enter the correct CEP ID to confirm deletion.
        <% } else if (req.query.error === 'employee_has_items') { %>
          Cannot delete employee with assigned items. Please unassign all items first.
        <% } else if (req.query.error === 'server_error') { %>
          A server error occurred. Please try again.
        <% } else { %>
          <%= req.query.error %>
        <% } %>
      </div>
    </div>
  <% } %>

  <!-- Success Messages -->
  <% if (showDeletedMessage) { %>
    <div class="mb-6 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-700 rounded-lg p-4">
      <div class="flex items-center gap-2 text-green-800 dark:text-green-200">
        <i class="fas fa-check-circle"></i>
        <span class="font-semibold">Success:</span>
        Employee has been successfully deleted.
      </div>
    </div>
  <% } %>

  <!-- Search Bar -->
  <div class="mb-6 bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700 p-4">
    <div class="flex items-center gap-3 mb-2">
      <div class="w-8 h-8 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center">
        <i class="fas fa-search text-blue-600 dark:text-blue-300"></i>
      </div>
      <div>
        <label class="block font-semibold text-gray-700 dark:text-gray-200">Search Employees</label>
        <p class="text-xs text-gray-500 dark:text-gray-400">Find employees by name, ID, or department</p>
      </div>
    </div>
    <div class="relative">
      <input type="text" id="employeeSearch" placeholder="Search by Employee Name, ID, or Department..." autocomplete="off"
        class="w-full px-4 py-2 pl-10 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition"
        value="<%= currentFilters && currentFilters.search || '' %>">
      <i class="fas fa-search absolute left-3 top-1/2 -translate-y-1/2 text-blue-500 dark:text-blue-400"></i>
    </div>
  </div>

  <% if (showDeletedMessage) { %>
    <div class="mb-6 flex items-center gap-2 px-4 py-3 rounded-lg bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200 border border-green-200 dark:border-green-700">
      <i class="fas fa-check-circle"></i>
      <span><%= t('employee_deleted') %></span>
    </div>
  <% } %>

  <!-- Advanced Filters Panel -->
  <div class="mb-6 bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg shadow">
    <div class="flex items-center justify-between px-6 py-4 cursor-pointer select-none" id="filtersToggle">
      <div class="flex items-center gap-2">
        <i class="fas fa-filter"></i>
        <h3 class="font-semibold text-gray-700 dark:text-gray-200"><%= t('advanced_filters') %></h3>
        <span class="ml-2 inline-flex items-center justify-center w-6 h-6 rounded-full bg-blue-600 text-white text-xs font-bold" id="filterBadge">0</span>
      </div>
      <div class="flex items-center gap-2">
        <span class="text-sm text-gray-500 dark:text-gray-400" id="appliedFiltersPreview"><%= t('no_filters_applied') %></span>
        <i class="fas fa-chevron-down toggle-icon"></i>
      </div>
    </div>
    <div class="px-6 py-4 border-t border-gray-200 dark:border-gray-700 hidden" id="filtersContent">
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-4">
        <div>
          <label for="departmentFilter" class="block text-xs font-semibold text-gray-700 dark:text-gray-300 mb-1"><%= t('department') %></label>
          <select id="departmentFilter" name="department"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
            <option value=""><%= t('all_departments') %></option>
            <% if (typeof departments !== 'undefined') { %>
              <% departments.forEach(dept => { %>
                <option value="<%= dept.id %>" <%= currentFilters && currentFilters.department == dept.id ? 'selected' : '' %>>
                  <%= dept.name %>
                </option>
              <% }) %>
            <% } %>
          </select>
        </div>
        <div>
          <label for="locationFilter" class="block text-xs font-semibold text-gray-700 dark:text-gray-300 mb-1">Location</label>
          <select id="locationFilter" name="location"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
            <option value=""><%= t('all_locations') %></option>
            <% if (typeof locations !== 'undefined') { %>
              <% locations.forEach(location => { %>
                <option value="<%= location.id %>" <%= currentFilters && currentFilters.location == location.id ? 'selected' : '' %>>
                  <%= location.name %>
                </option>
              <% }) %>
            <% } %>
          </select>
        </div>
        <div>
          <label for="statusFilter" class="block text-xs font-semibold text-gray-700 dark:text-gray-300 mb-1"><%= t('employment_status') %></label>
          <select id="statusFilter" name="status"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
            <option value="" <%= currentFilters && currentFilters.status === '' ? 'selected' : '' %>><%= t('all_employees') %></option>
            <option value="active" <%= !currentFilters || currentFilters.status === 'active' ? 'selected' : '' %>><%= t('active_employees') %></option>
            <option value="inactive" <%= currentFilters && currentFilters.status === 'inactive' ? 'selected' : '' %>><%= t('former_employees') %></option>
          </select>
        </div>
        <div>
          <label class="block text-xs font-semibold text-gray-700 dark:text-gray-300 mb-1"><%= t('joined_date_range') %></label>
          <div class="flex items-center gap-2">
            <input type="date" id="joinedDateFrom" name="joinedDateFrom"
              class="px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 w-32"
              value="<%= currentFilters && currentFilters.joinedDateFrom || '' %>">
            <span class="text-gray-400 dark:text-gray-500"><%= t('to') %></span>
            <input type="date" id="joinedDateTo" name="joinedDateTo"
              class="px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 w-32"
              value="<%= currentFilters && currentFilters.joinedDateTo || '' %>">
          </div>
        </div>
      </div>
      <div class="flex flex-wrap items-center justify-between gap-4">
        <div class="flex flex-wrap gap-2 text-xs" id="appliedFilters"></div>
        <div class="flex gap-2">
          <button type="button" id="applyFilters" class="group px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-semibold rounded-lg transition-all duration-300 flex items-center gap-2 hover:scale-105 hover:shadow-lg">
            <i class="fas fa-search group-hover:scale-110 transition-transform duration-300"></i> <%= t('apply_filters') %>
          </button>
          <button type="button" id="resetFilters" class="group px-4 py-2 bg-gradient-to-r from-gray-400 to-gray-600 hover:from-gray-500 hover:to-gray-700 text-white font-semibold rounded-lg transition-all duration-300 flex items-center gap-2 hover:scale-105 hover:shadow-lg">
            <i class="fas fa-times group-hover:-rotate-12 transition-transform duration-300"></i> <%= t('reset_all') %>
          </button>
        </div>
      </div>
    </div>
  </div>

  <% if (employees && employees.length > 0) { %>
    <div id="employeesTableBlock">
      <div class="overflow-x-auto bg-white dark:bg-gray-800 rounded-lg shadow">
        <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
          <thead class="bg-gray-50 dark:bg-gray-900">
            <tr>
              <th class="px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200"><%= t('name') %></th>
              <th class="px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200"><%= t('employee_id') %></th>
              <th class="px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200"><%= t('email') %></th>
              <th class="px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200"><%= t('department') %></th>
              <th class="px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200"><%= t('location') %></th>
              <th class="px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200"><%= t('status') %></th>
              <th class="px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200"><%= t('actions') %></th>
            </tr>
          </thead>
          <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
            <%
            // Sort employees to show active first
            const sortedEmployees = employees.sort((a, b) => {
              if (!a.left_date && b.left_date) return -1;
              if (a.left_date && !b.left_date) return 1;
              return a.name.localeCompare(b.name);
            });
            %>
            <% sortedEmployees.forEach(employee => { %>
              <tr class="<%= employee.left_date ? 'bg-gray-50 dark:bg-gray-900' : '' %>">
                <td class="px-4 py-3">
                  <a href="/employees/<%= employee.id %>" class="font-semibold text-blue-700 dark:text-blue-300 hover:underline">
                    <%= employee.name %>
                  </a>
                  <% if (employee.left_date) { %>
                    <span class="ml-2 inline-flex items-center px-2 py-0.5 rounded bg-gray-300 dark:bg-gray-700 text-xs text-gray-700 dark:text-gray-200">Former</span>
                  <% } %>
                </td>
                <td class="px-4 py-3 font-mono text-xs text-gray-700 dark:text-gray-300"><%= employee.cep %></td>
                <td class="px-4 py-3">
                  <a href="mailto:<%= employee.email %>" class="text-gray-700 dark:text-gray-200 hover:underline"><%= employee.email %></a>
                </td>
                <td class="px-4 py-3">
                  <% if (employee.department_name) { %>
                    <span class="inline-flex items-center gap-1 px-2 py-0.5 rounded bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 text-xs font-semibold">
                      <i class="fas fa-building"></i> <%= employee.department_name %>
                    </span>
                  <% } else { %>
                    <span class="inline-flex items-center gap-1 px-2 py-0.5 rounded bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-300 text-xs">
                      <i class="fas fa-minus"></i> <%= t('not_assigned') %>
                    </span>
                  <% } %>
                </td>
                <td class="px-4 py-3">
                  <% if (employee.location_name) { %>
                    <span class="inline-flex items-center gap-1 px-2 py-0.5 rounded bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300 text-xs font-semibold">
                      <i class="fas fa-map-marker-alt"></i> <%= employee.location_name %>
                    </span>
                  <% } else { %>
                    <span class="inline-flex items-center gap-1 px-2 py-0.5 rounded bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-300 text-xs">
                      <i class="fas fa-minus"></i> <%= t('not_assigned') %>
                    </span>
                  <% } %>
                </td>
                <td class="px-4 py-3">
                  <%
                    let statusClass = 'bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300';
                    let statusIcon = 'fas fa-check-circle';
                    let statusText = 'Active';
                    if (employee.left_date) {
                      statusClass = 'bg-gray-300 dark:bg-gray-700 text-gray-700 dark:text-gray-200';
                      statusIcon = 'fas fa-user-times';
                      statusText = 'Former';
                    }
                  %>
                  <span class="inline-flex items-center gap-1 px-2 py-0.5 rounded <%= statusClass %> text-xs font-semibold">
                    <i class="<%= statusIcon %>"></i> <%= statusText %>
                  </span>
                  <% if (employee.joined_date) { %>
                    <div class="text-xs text-gray-500 dark:text-gray-400"><%= t('joined') %> <%= new Date(employee.joined_date).toLocaleDateString() %></div>
                  <% } %>
                </td>
                <td class="px-4 py-3">
                  <div class="flex gap-1">
                    <a href="/employees/<%= employee.id %>" class="inline-flex items-center justify-center w-8 h-8 rounded bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 hover:bg-blue-200 dark:hover:bg-blue-800 transition" title="Ver Detalhes">
                      <i class="fas fa-eye"></i>
                    </a>
                    <a href="/employees/<%= employee.id %>/edit" class="inline-flex items-center justify-center w-8 h-8 rounded bg-yellow-100 dark:bg-yellow-900 text-yellow-700 dark:text-yellow-300 hover:bg-yellow-200 dark:hover:bg-yellow-800 transition" title="Editar">
                      <i class="fas fa-edit"></i>
                    </a>
                    <a href="/employees/<%= employee.id %>/history" class="inline-flex items-center justify-center w-8 h-8 rounded bg-gray-100 dark:bg-gray-900 text-gray-700 dark:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-800 transition" title="Ver Histórico">
                      <i class="fas fa-history"></i>
                    </a>
                    <button type="button" class="delete-employee-btn inline-flex items-center justify-center w-8 h-8 rounded bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-300 hover:bg-red-200 dark:hover:bg-red-800 transition group hover:scale-105 hover:shadow-lg"
                      title="Delete Employee"
                      data-employee-id="<%= employee.id %>"
                      data-employee-name="<%= employee.name %>"
                      data-employee-cep="<%= employee.cep %>">
                      <i class="fas fa-trash group-hover:scale-110 transition-transform duration-300"></i>
                    </button>
                  </div>
                </td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>

      <!-- Results Summary & Pagination -->
      <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mt-8">
        <div class="flex flex-col gap-2">
          <span class="text-sm text-gray-700 dark:text-gray-200">
            <i class="fas fa-users"></i>
            <%= t('showing') %> <strong id="employeeCount"><%= employees.length %></strong> <%= t('of') %> <%= typeof totalEmployees !== 'undefined' ? totalEmployees : employees.length %> <%= t('employees') %>
          </span>
          <div class="flex gap-4 text-xs text-gray-500 dark:text-gray-400">
            <span>
              <i class="fas fa-check-circle text-green-600 dark:text-green-400"></i>
              <%= employees.filter(emp => !emp.left_date).length %> <%= t('active') %>
            </span>
            <% if (employees.filter(emp => emp.left_date).length > 0) { %>
              <span>
                <i class="fas fa-user-times text-gray-400 dark:text-gray-500"></i>
                <%= employees.filter(emp => emp.left_date).length %> <%= t('former') %>
              </span>
            <% } %>
          </div>
        </div>
        <div class="flex items-center gap-4">
          <% if (typeof currentPage !== 'undefined' && typeof totalPages !== 'undefined') { %>
            <div class="flex items-center gap-2">
              <% if (currentPage > 1) { %>
                <a href="?page=<%= currentPage - 1 %><%
                  const urlParams = new URLSearchParams(req.query);
                  urlParams.delete('page');
                  for (const [key, value] of urlParams) { %>&<%= key %>=<%= encodeURIComponent(value) %><% } %>"
                  class="pagination-link px-3 py-1 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 rounded transition flex items-center gap-1">
                  <i class="fas fa-chevron-left"></i> <%= t('previous') %>
                </a>
              <% } %>
              <span class="text-xs text-gray-500 dark:text-gray-400"><%= t('page') %> <%= currentPage %> <%= t('of') %> <%= totalPages %></span>
              <% if (currentPage < totalPages) { %>
                <a href="?page=<%= currentPage + 1 %><%
                  const urlParams = new URLSearchParams(req.query);
                  urlParams.delete('page');
                  for (const [key, value] of urlParams) { %>&<%= key %>=<%= encodeURIComponent(value) %><% } %>"
                  class="pagination-link px-3 py-1 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 rounded transition flex items-center gap-1">
                  Next <i class="fas fa-chevron-right"></i>
                </a>
              <% } %>
            </div>
          <% } %>
          <div>
            <select id="employeesPerPage" class="ml-2 px-2 py-1 border border-gray-300 dark:border-gray-700 rounded bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 text-xs">
              <option value="10" <%= typeof perPage !== 'undefined' && perPage == 10 ? 'selected' : '' %>>10</option>
              <option value="25" <%= typeof perPage !== 'undefined' && perPage == 25 ? 'selected' : '' %>>25</option>
              <option value="50" <%= typeof perPage !== 'undefined' && perPage == 50 ? 'selected' : '' %>>50</option>
              <option value="100" <%= typeof perPage !== 'undefined' && perPage == 100 ? 'selected' : '' %>>100</option>
            </select>
            <span class="text-xs text-gray-500 dark:text-gray-400"><%= t('per_page') %></span>
          </div>
        </div>
      </div>
    </div>
  <% } else { %>
    <div class="flex flex-col items-center justify-center py-16 text-center border border-dashed border-blue-400 rounded bg-blue-50 dark:bg-blue-950 mt-8">
      <div class="text-4xl text-blue-500 mb-2">
        <i class="fas fa-users"></i>
      </div>
      <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-1"><%= t('no_employees_found') %></h3>
      <p class="text-gray-500 dark:text-gray-400 mb-4"><%= t('no_employees_match') %></p>
      <div class="flex gap-2 justify-center">
        <button id="clearFiltersBtn" class="group px-4 py-2 bg-gradient-to-r from-gray-400 to-gray-600 hover:from-gray-500 hover:to-gray-700 text-white font-semibold rounded-lg transition-all duration-300 flex items-center gap-2 hover:scale-105 hover:shadow-lg" style="display: none;">
          <i class="fas fa-times group-hover:-rotate-12 transition-transform duration-300"></i> <%= t('clear_all_filters') %>
        </button>
        <a href="/employees/new" class="group px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-semibold rounded-lg transition-all duration-300 flex items-center gap-2 hover:scale-105 hover:shadow-lg">
          <i class="fas fa-user-plus mr-2 group-hover:scale-110 transition-transform duration-300"></i> <%= t('add_first_employee') %>
        </a>
      </div>
    </div>
  <% } %>
</div>

<!-- Employee Delete Confirmation Modal -->
<div id="deleteModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50" style="display: none;">
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto">
    <div id="modalContent" class="p-6">
      <!-- Content will be populated by JavaScript -->
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Simple search functionality
  const searchInput = document.getElementById('employeeSearch');
  if (searchInput) {
    let searchTimeout;

    searchInput.addEventListener('input', function(e) {
      clearTimeout(searchTimeout);
      const query = e.target.value.trim().toLowerCase();

      searchTimeout = setTimeout(() => {
        const tableBody = document.querySelector('#employeesTableBlock tbody');
        if (tableBody) {
          const rows = tableBody.querySelectorAll('tr');

          rows.forEach(row => {
            if (query === '' || row.textContent.toLowerCase().includes(query)) {
              row.style.display = '';
            } else {
              row.style.display = 'none';
            }
          });
        }
      }, 300);
    });
  }

  // Delete button functionality
  document.querySelectorAll('.delete-employee-btn').forEach(button => {
    button.addEventListener('click', function() {
      const employeeId = this.dataset.employeeId;
      const employeeName = this.dataset.employeeName;
      const employeeCep = this.dataset.employeeCep;

      confirmEmployeeDelete(employeeId, employeeName, employeeCep);
    });
  });
});

// CSRF Helper Function - Prevents token duplication
function createCSRFHeaders(additionalHeaders = {}) {
  const csrfToken = document.querySelector('meta[name="csrf-token"]');

  // Start with clean headers object - avoid spreading existing headers that might contain duplicates
  const headers = {};

  // Add additional headers first (but not x-csrf-token)
  Object.keys(additionalHeaders).forEach(key => {
    if (key.toLowerCase() !== 'x-csrf-token') {
      headers[key] = additionalHeaders[key];
    }
  });

  // Ensure X-Requested-With is always present
  if (!headers['X-Requested-With']) {
    headers['X-Requested-With'] = 'XMLHttpRequest';
  }

  // Add CSRF token - force overwrite to absolutely prevent duplication
  if (csrfToken && csrfToken.getAttribute('content')) {
    const tokenValue = csrfToken.getAttribute('content').trim();
    if (tokenValue && !tokenValue.includes(',')) {  // Extra safety check
      headers['x-csrf-token'] = tokenValue;
    }
  }

  return headers;
}

// Employee delete confirmation function (same as in employee show page)
function confirmEmployeeDelete(employeeId, employeeName, employeeCep) {
  // Show loading state
  document.getElementById('deleteModal').style.display = 'flex';
  document.getElementById('modalContent').innerHTML = `
    <div class="text-center">
      <i class="fas fa-spinner fa-spin text-blue-500 text-2xl mb-4"></i>
      <p class="text-gray-600 dark:text-gray-300">Checking employee assignments...</p>
    </div>
  `;

  // Create headers with CSRF token
  const headers = createCSRFHeaders({
    'Content-Type': 'application/json'
  });

  // Fetch employee deletion info
  fetch(`/employees/${employeeId}/delete`, {
    method: 'POST',
    headers: headers
  })
  .then(response => {
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    return response.json();
  })
  .then(data => {
    if (data.error) {
      throw new Error(data.error);
    }

    const modalContent = document.getElementById('modalContent');

    // Store the employee CEP in the modal for later use
    modalContent.setAttribute('data-employee-cep', employeeCep);

    if (data.hasAssignedItems) {
      // Employee has assigned items - show items and prevent deletion
      modalContent.innerHTML = `
        <div class="text-center mb-6">
          <i class="fas fa-exclamation-triangle text-red-500 text-3xl mb-4"></i>
          <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-100 mb-2">Cannot Delete Employee</h3>
          <p class="text-gray-600 dark:text-gray-300">
            <strong>${employeeName}</strong> (ID: ${employeeCep}) has <strong>${data.itemCount}</strong> assigned item(s).
          </p>
        </div>

        <div class="mb-6">
          <h4 class="font-semibold text-gray-700 dark:text-gray-200 mb-3">Assigned Items:</h4>
          <div class="max-h-60 overflow-y-auto border border-gray-200 dark:border-gray-700 rounded-md">
            ${data.items.map(item => `
              <div class="flex items-center justify-between p-3 border-b border-gray-100 dark:border-gray-700 last:border-b-0" id="item-row-${item.id}">
                <div class="flex-1">
                  <div class="font-medium text-gray-800 dark:text-gray-100">${item.name}</div>
                  <div class="text-sm text-gray-500 dark:text-gray-400">${item.cep_brc} • ${item.type_name || 'N/A'}</div>
                </div>
                <div class="ml-3">
                  <button type="button"
                    class="unassign-item-btn px-3 py-1 text-xs bg-yellow-100 dark:bg-yellow-900 hover:bg-yellow-200 dark:hover:bg-yellow-800 text-yellow-800 dark:text-yellow-200 rounded-md transition border border-yellow-300 dark:border-yellow-700"
                    data-item-id="${item.id}"
                    data-item-name="${item.name}"
                    data-employee-id="${employeeId}"
                    data-employee-name="${employeeName}">
                    <i class="fas fa-unlink mr-1"></i> Unassign
                  </button>
                </div>
              </div>
            `).join('')}
          </div>
        </div>

        <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-md p-4 mb-6">
          <div class="flex items-center gap-2 text-blue-800 dark:text-blue-200">
            <i class="fas fa-info-circle"></i>
            <span class="text-sm">You can unassign items individually using the buttons above, or go to the employee profile to manage all assignments.</span>
          </div>
        </div>

        <div class="flex gap-3 justify-end">
          <button type="button" class="px-4 py-2 bg-gray-300 dark:bg-gray-700 hover:bg-gray-400 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 rounded-md transition" onclick="closeDeleteModal()">
            Close
          </button>
        </div>
      `;

      // Add event handlers for unassign buttons
      document.querySelectorAll('.unassign-item-btn').forEach(button => {
        button.addEventListener('click', function() {
          const itemId = this.dataset.itemId;
          const itemName = this.dataset.itemName;
          const employeeId = this.dataset.employeeId;
          const employeeName = this.dataset.employeeName;

          confirmUnassignItem(employeeId, itemId, itemName, employeeName);
        });
      });
    } else {
      // Employee has no assigned items - show CEP confirmation
      modalContent.innerHTML = `
        <div class="text-center mb-6">
          <i class="fas fa-exclamation-triangle text-red-500 text-3xl mb-4"></i>
          <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-100 mb-2">Confirm Employee Deletion</h3>
          <p class="text-gray-600 dark:text-gray-300">
            You are about to permanently delete <strong>${employeeName}</strong>.
          </p>
        </div>

        <div class="mb-6">
          <div class="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-700 rounded-md p-4 mb-4">
            <div class="flex items-center gap-2 text-green-800 dark:text-green-200">
              <i class="fas fa-check-circle"></i>
              <span class="text-sm">This employee has <strong>0 assigned items</strong>.</span>
            </div>
          </div>

          <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700 rounded-md p-4 mb-4">
            <div class="flex items-center gap-2 text-red-800 dark:text-red-200">
              <i class="fas fa-exclamation-triangle"></i>
              <span class="text-sm">This action cannot be undone. All employee data will be permanently deleted.</span>
            </div>
          </div>

          <form id="deleteEmployeeForm" method="POST" action="/employees/${employeeId}/delete">
            <label class="block text-sm font-semibold text-gray-700 dark:text-gray-200 mb-2">
              To confirm deletion, enter the employee CEP ID: <strong>${employeeCep}</strong>
            </label>
            <input type="text" name="cepConfirmation" id="cepConfirmation"
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-red-500"
              placeholder="Enter CEP ID to confirm" required>
            <div id="cepValidation" class="text-xs mt-1"></div>
          </form>
        </div>

        <div class="flex gap-3 justify-end">
          <button type="button" class="px-4 py-2 bg-gray-300 dark:bg-gray-700 hover:bg-gray-400 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 rounded-md transition" onclick="closeDeleteModal()">
            Cancel
          </button>
          <button type="button" id="confirmDeleteBtn" class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md transition" disabled>
            Delete Employee
          </button>
        </div>
      `;

      // Add CEP validation
      const cepInput = document.getElementById('cepConfirmation');
      const confirmBtn = document.getElementById('confirmDeleteBtn');
      const validation = document.getElementById('cepValidation');

      cepInput.addEventListener('input', function() {
        const value = this.value.trim();
        if (value === employeeCep) {
          confirmBtn.disabled = false;
          confirmBtn.classList.remove('opacity-50', 'cursor-not-allowed');
          validation.className = 'text-xs mt-1 text-green-600';
          validation.innerHTML = '<i class="fas fa-check"></i> CEP ID confirmed';
        } else if (value.length > 0) {
          confirmBtn.disabled = true;
          confirmBtn.classList.add('opacity-50', 'cursor-not-allowed');
          validation.className = 'text-xs mt-1 text-red-600';
          validation.innerHTML = '<i class="fas fa-times"></i> CEP ID does not match';
        } else {
          confirmBtn.disabled = true;
          confirmBtn.classList.add('opacity-50', 'cursor-not-allowed');
          validation.className = 'text-xs mt-1';
          validation.innerHTML = '';
        }
      });

      confirmBtn.addEventListener('click', function() {
        if (cepInput.value.trim() === employeeCep) {
          document.getElementById('deleteEmployeeForm').submit();
        }
      });
    }
  })
  .catch(error => {
    console.error('Error checking employee assignments:', error);

    // Determine error message
    let errorMessage = 'Unable to check employee assignments. Please try again.';
    if (error.message.includes('403')) {
      errorMessage = 'Permission denied. Please refresh the page and try again.';
    } else if (error.message.includes('500')) {
      errorMessage = 'Server error occurred. Please try again later.';
    } else if (error.message.includes('CSRF')) {
      errorMessage = 'Security token expired. Please refresh the page and try again.';
    }

    document.getElementById('modalContent').innerHTML = `
      <div class="text-center">
        <i class="fas fa-exclamation-triangle text-red-500 text-2xl mb-4"></i>
        <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-100 mb-2">Error</h3>
        <p class="text-gray-600 dark:text-gray-300 mb-2">${errorMessage}</p>
        <p class="text-xs text-gray-500 dark:text-gray-400 mb-6">Error details: ${error.message}</p>
        <div class="flex gap-3 justify-end">
          <button type="button" class="px-4 py-2 bg-gray-300 dark:bg-gray-700 hover:bg-gray-400 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 rounded-md transition" onclick="closeDeleteModal()">
            Close
          </button>
        </div>
      </div>
    `;
  });
}

function confirmUnassignItem(employeeId, itemId, itemName, employeeName) {
  if (confirm(`Are you sure you want to unassign "${itemName}" from ${employeeName}?\n\nThis action cannot be undone.`)) {
    // Find the item row to show loading state
    const itemRow = document.getElementById(`item-row-${itemId}`);
    const unassignBtn = itemRow.querySelector('.unassign-item-btn');

    // Show loading state
    unassignBtn.disabled = true;
    unassignBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> Unassigning...';
    unassignBtn.classList.add('opacity-50', 'cursor-not-allowed');

    // Create headers with CSRF token
    const headers = createCSRFHeaders({
      'Content-Type': 'application/json'
    });

    // Send unassign request
    fetch(`/employees/${employeeId}/unassign-item/${itemId}`, {
      method: 'POST',
      headers: headers
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // Remove the item row with animation
        itemRow.style.transition = 'opacity 0.3s ease-out';
        itemRow.style.opacity = '0';

        setTimeout(() => {
          itemRow.remove();

          // Check if there are any items left
          const remainingItems = document.querySelectorAll('[id^="item-row-"]');
          if (remainingItems.length === 0) {
            // No more items - show CEP confirmation form
            const employeeCep = document.getElementById('modalContent').getAttribute('data-employee-cep');

            document.getElementById('modalContent').innerHTML = `
              <div class="text-center mb-6">
                <i class="fas fa-check-circle text-green-500 text-3xl mb-4"></i>
                <h3 class="text-lg font-semibold text-gray-800 dark:text-gray-100 mb-2">All Items Unassigned!</h3>
                <p class="text-gray-600 dark:text-gray-300">
                  All items have been successfully unassigned from <strong>${employeeName}</strong>.
                  You can now proceed with deleting the employee.
                </p>
              </div>

              <div class="mb-6">
                <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700 rounded-md p-4 mb-4">
                  <div class="flex items-center gap-2 text-red-800 dark:text-red-200">
                    <i class="fas fa-exclamation-triangle"></i>
                    <span class="text-sm">This action cannot be undone. All employee data will be permanently deleted.</span>
                  </div>
                </div>

                <form id="deleteEmployeeFormFinal" method="POST" action="/employees/${employeeId}/delete">
                  <label class="block text-sm font-semibold text-gray-700 dark:text-gray-200 mb-2">
                    To confirm deletion, enter the employee CEP ID: <strong>${employeeCep}</strong>
                  </label>
                  <input type="text" name="cepConfirmation" id="cepConfirmationFinal"
                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-red-500"
                    placeholder="Enter CEP ID to confirm" required>
                  <div id="cepValidationFinal" class="text-xs mt-1"></div>
                </form>
              </div>

              <div class="flex gap-3 justify-end">
                <button type="button" class="px-4 py-2 bg-gray-300 dark:bg-gray-700 hover:bg-gray-400 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 rounded-md transition" onclick="closeDeleteModal()">
                  Cancel
                </button>
                <button type="button" id="confirmDeleteBtnFinal" class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md transition" disabled>
                  Delete Employee
                </button>
              </div>
            `;

            // Add CEP validation for the final confirmation
            const cepInputFinal = document.getElementById('cepConfirmationFinal');
            const confirmBtnFinal = document.getElementById('confirmDeleteBtnFinal');
            const validationFinal = document.getElementById('cepValidationFinal');

            cepInputFinal.addEventListener('input', function() {
              const value = this.value.trim();
              if (value === employeeCep) {
                confirmBtnFinal.disabled = false;
                confirmBtnFinal.classList.remove('opacity-50', 'cursor-not-allowed');
                validationFinal.className = 'text-xs mt-1 text-green-600';
                validationFinal.innerHTML = '<i class="fas fa-check"></i> CEP ID confirmed';
              } else if (value.length > 0) {
                confirmBtnFinal.disabled = true;
                confirmBtnFinal.classList.add('opacity-50', 'cursor-not-allowed');
                validationFinal.className = 'text-xs mt-1 text-red-600';
                validationFinal.innerHTML = '<i class="fas fa-times"></i> CEP ID does not match';
              } else {
                confirmBtnFinal.disabled = true;
                confirmBtnFinal.classList.add('opacity-50', 'cursor-not-allowed');
                validationFinal.className = 'text-xs mt-1';
                validationFinal.innerHTML = '';
              }
            });

            confirmBtnFinal.addEventListener('click', function() {
              if (cepInputFinal.value.trim() === employeeCep) {
                document.getElementById('deleteEmployeeFormFinal').submit();
              }
            });
          } else {
            // Update the count in the modal header
            const countElement = document.querySelector('.text-gray-600.dark\\:text-gray-300');
            if (countElement) {
              const newCount = remainingItems.length;
              countElement.innerHTML = `<strong>${employeeName}</strong> (ID: ${document.getElementById('modalContent').getAttribute('data-employee-cep')}) has <strong>${newCount}</strong> assigned item(s).`;
            }
          }
        }, 300);

        // Show success notification
        showNotification(data.message, 'success');

        // Reload the page to refresh the assigned items list
        setTimeout(() => {
          location.reload();
        }, 1500);
      } else {
        throw new Error(data.error || 'Failed to unassign item');
      }
    })
    .catch(error => {
      console.error('Error unassigning item:', error);

      // Reset button state
      unassignBtn.disabled = false;
      unassignBtn.innerHTML = '<i class="fas fa-unlink mr-1"></i> Unassign';
      unassignBtn.classList.remove('opacity-50', 'cursor-not-allowed');

      // Show error notification
      showNotification('Failed to unassign item: ' + error.message, 'error');
    });
  }
}

function showNotification(message, type = 'info') {
  // Create notification element
  const notification = document.createElement('div');
  notification.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg transition-all duration-300 transform translate-x-full`;

  if (type === 'success') {
    notification.classList.add('bg-green-500', 'text-white');
    notification.innerHTML = `<i class="fas fa-check-circle mr-2"></i>${message}`;
  } else if (type === 'error') {
    notification.classList.add('bg-red-500', 'text-white');
    notification.innerHTML = `<i class="fas fa-exclamation-triangle mr-2"></i>${message}`;
  } else {
    notification.classList.add('bg-blue-500', 'text-white');
    notification.innerHTML = `<i class="fas fa-info-circle mr-2"></i>${message}`;
  }

  document.body.appendChild(notification);

  // Show notification
  setTimeout(() => {
    notification.classList.remove('translate-x-full');
  }, 100);

  // Hide notification after 4 seconds
  setTimeout(() => {
    notification.classList.add('translate-x-full');
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 300);
  }, 4000);
}

function closeDeleteModal() {
  document.getElementById('deleteModal').style.display = 'none';
}
</script>

