<div class="page-container">
  <div class="page-header-simple">
    <h1>Asset Management</h1>
    <div class="header-actions">
      <div class="search-container">
        <i class="fas fa-search search-icon"></i>
        <input type="text" id="itemSearch" placeholder="Search assets by name, ID, or type..." autocomplete="off" value="<%= (typeof currentFilters !== 'undefined' && currentFilters && currentFilters.search) || '' %>">
        <div class="search-results" id="searchResults"></div>
      </div>
      <div class="action-buttons">
        <button id="exportItemsBtn" class="btn btn-success">
          <i class="fas fa-download"></i> Export Asset List
        </button>
        <a href="/items/new" class="btn btn-secondary">
          <i class="fas fa-plus"></i> Add New Asset
        </a>
        <a href="/items/new-receipt" class="btn btn-primary">
          <i class="fas fa-receipt"></i> Add Purchase Receipt
        </a>
      </div>
    </div>
  </div>

  <!-- Advanced Filters Panel -->
  <div class="filters-panel" id="filtersPanel">
    <div class="filters-header" id="filtersToggle">
      <div class="filters-title">
        <i class="fas fa-filter"></i>
        <h3>Advanced Filters</h3>
        <span class="filter-badge" id="filterBadge">0</span>
      </div>
      <div class="filters-actions">
        <span class="applied-filters-preview" id="appliedFiltersPreview">No filters applied</span>
        <i class="fas fa-chevron-down toggle-icon"></i>
      </div>
    </div>

    <div class="filters-content" id="filtersContent">
      <div class="filter-row">
        <div class="filter-group">
          <label for="typeFilter">Asset Type</label>
          <select id="typeFilter" name="type">
            <option value="">All Types</option>
            <% if (typeof types !== 'undefined') { %>
              <% types.forEach(type => { %>
                <option value="<%= type.id %>" <%= (typeof currentFilters !== 'undefined' && currentFilters && currentFilters.type == type.id) ? 'selected' : '' %>>
                  <%= type.name %>
                </option>
              <% }) %>
            <% } %>
          </select>
        </div>

        <div class="filter-group">
          <label for="brandFilter"><%= t("items.brand") %></label>
          <select id="brandFilter" name="brand">
            <option value="">All Brands</option>
            <% if (typeof brands !== 'undefined') { %>
              <% brands.forEach(brand => { %>
                <option value="<%= brand.id %>" <%= (typeof currentFilters !== 'undefined' && currentFilters && currentFilters.brand == brand.id) ? 'selected' : '' %>>
                  <%= brand.name %>
                </option>
              <% }) %>
            <% } %>
          </select>
        </div>

        <div class="filter-group">
          <label for="statusFilter">Assignment Status</label>
          <select id="statusFilter" name="assigned">
            <option value="" <%= (typeof currentFilters !== 'undefined' && currentFilters && currentFilters.assigned === '') ? 'selected' : '' %>>All Assets</option>
            <option value="assigned" <%= (typeof currentFilters !== 'undefined' && currentFilters && currentFilters.assigned === 'assigned') ? 'selected' : '' %>>Assigned Assets</option>
            <option value="unassigned" <%= (typeof currentFilters === 'undefined' || !currentFilters || currentFilters.assigned === 'unassigned') ? 'selected' : '' %>>Unassigned Assets</option>
          </select>
        </div>

        <div class="filter-group">
          <label for="conditionFilter">Condition</label>
          <select id="conditionFilter" name="condition">
            <option value="">All Conditions</option>
            <option value="active"><%= t("status.active") %></option>
            <option value="maintenance"><%= t("status.maintenance") %></option>
            <option value="retired"><%= t("status.retired") %></option>
            <option value="damaged"><%= t("status.damaged") %></option>
          </select>
        </div>
      </div>

      <div class="filter-row">
        <div class="filter-group">
          <label for="priceRange">Price Range</label>
          <div class="price-range">
            <input type="number" id="minPrice" name="minPrice" placeholder="Min €" min="0" step="0.01" value="<%= (typeof currentFilters !== 'undefined' && currentFilters && currentFilters.minPrice) || '' %>">
            <span>to</span>
            <input type="number" id="maxPrice" name="maxPrice" placeholder="Max €" min="0" step="0.01" value="<%= (typeof currentFilters !== 'undefined' && currentFilters && currentFilters.maxPrice) || '' %>">
          </div>
        </div>

        <div class="filter-group">
          <label for="dateRange">Date Acquired</label>
          <div class="date-range">
            <input type="date" id="startDate" name="startDate" value="<%= (typeof currentFilters !== 'undefined' && currentFilters && currentFilters.startDate) || '' %>">
            <span>to</span>
            <input type="date" id="endDate" name="endDate" value="<%= (typeof currentFilters !== 'undefined' && currentFilters && currentFilters.endDate) || '' %>">
          </div>
        </div>

        <div class="filter-group">
          <label for="departmentFilter">Department</label>
          <select id="departmentFilter" name="department">
            <option value="">All Departments</option>
            <% if (typeof departments !== 'undefined') { %>
              <% departments.forEach(dept => { %>
                <option value="<%= dept.id %>" <%= (typeof currentFilters !== 'undefined' && currentFilters && currentFilters.department == dept.id) ? 'selected' : '' %>>
                  <%= dept.name %>
                </option>
              <% }) %>
            <% } %>
          </select>
        </div>
      </div>

      <div class="filter-actions-bar">
        <div class="applied-filters-display" id="appliedFilters"></div>
        <div class="filter-buttons">
          <button type="button" id="applyFilters" class="btn btn-primary">
            <i class="fas fa-search"></i> Apply Filters
          </button>
          <button type="button" id="resetFilters" class="btn btn-secondary">
            <i class="fas fa-times"></i> Reset All
          </button>
        </div>
      </div>
    </div>
  </div>

  <% if (items && items.length > 0) { %>
    <div class="content-section">
      <div class="table-container">
        <table class="data-table">
          <thead>
            <tr>
              <th class="checkbox-col">
                <input type="checkbox" id="selectAll">
              </th>
              <th class="sortable" data-sort="cep_brc">
                Asset ID <i class="fas fa-sort"></i>
              </th>
              <th class="sortable" data-sort="name">
                Name <i class="fas fa-sort"></i>
              </th>
              <th class="sortable" data-sort="type_name">
                Type <i class="fas fa-sort"></i>
              </th>
              <th class="sortable" data-sort="brand_name">
                Brand <i class="fas fa-sort"></i>
              </th>
              <th class="sortable" data-sort="assigned_to_name">
                Assigned To <i class="fas fa-sort"></i>
              </th>
              <th class="sortable" data-sort="status">
                Status <i class="fas fa-sort"></i>
              </th>
              <th class="actions-col">Actions</th>
            </tr>
          </thead>
          <tbody>
            <%
            // Sort items to show unassigned first
            const sortedItems = items.sort((a, b) => {
              // Unassigned items first
              if (!a.assigned_to && b.assigned_to) return -1;
              if (a.assigned_to && !b.assigned_to) return 1;
              // Then sort by name
              return a.name.localeCompare(b.name);
            });
            %>
            <% sortedItems.forEach(item => { %>
              <tr data-item-id="<%= item.id %>" class="table-row <%= item.assigned_to ? 'assigned-item' : 'unassigned-item' %>">
                <td>
                  <input type="checkbox" class="row-checkbox" value="<%= item.id %>">
                </td>
                <td>
                  <span class="entity-id"><%= item.cep_brc %></span>
                </td>
                <td>
                  <div class="entity-info">
                    <a href="/items/<%= item.id %>/<%= item.cep_brc %>" class="entity-name">
                      <%= item.name %>
                    </a>
                    <% if (item.model) { %>
                      <small class="entity-detail"><%= item.model %></small>
                    <% } %>
                  </div>
                </td>
                <td>
                  <% if (item.type_name) { %>
                    <span class="category-badge">
                      <i class="fas fa-tag"></i> <%= item.type_name %>
                    </span>
                  <% } else { %>
                    <span class="badge badge-secondary">
                      <i class="fas fa-minus"></i> Not Assigned
                    </span>
                  <% } %>
                </td>
                <td>
                  <% if (item.brand_name) { %>
                    <span class="brand-badge">
                      <i class="fas fa-building"></i>
                      <%= item.brand_name %>
                    </span>
                  <% } else { %>
                    <span class="badge badge-secondary">
                      <i class="fas fa-minus"></i> Not Specified
                    </span>
                  <% } %>
                </td>
                <td>
                  <% if (item.assigned_to_name) { %>
                    <div class="entity-info">
                      <a href="/employees/<%= item.assigned_to %>" class="entity-name">
                        <i class="fas fa-user"></i> <%= item.assigned_to_name %>
                      </a>
                      <% if (item.department_name) { %>
                        <small class="entity-detail"><%= item.department_name %></small>
                      <% } %>
                    </div>
                  <% } else { %>
                    <span class="badge badge-secondary">
                      <i class="fas fa-user-slash"></i> Unassigned
                    </span>
                  <% } %>
                </td>
                <td>
                  <%
                    let statusClass = 'badge-secondary';
                    let statusIcon = 'fas fa-question';
                    let statusText = 'Unknown';

                    if (item.assigned_to) {
                      if (item.condition === 'maintenance') {
                        statusClass = 'badge-warning';
                        statusIcon = 'fas fa-wrench';
                        statusText = 'Maintenance';
                      } else if (item.condition === 'retired') {
                        statusClass = 'badge-dark';
                        statusIcon = 'fas fa-archive';
                        statusText = 'Retired';
                      } else {
                        statusClass = 'badge-success';
                        statusIcon = 'fas fa-check-circle';
                        statusText = 'Active';
                      }
                    } else {
                      statusClass = 'badge-info';
                      statusIcon = 'fas fa-clock';
                      statusText = 'Available';
                    }
                  %>
                  <span class="status-badge <%= statusClass %>">
                    <i class="<%= statusIcon %>"></i> <%= statusText %>
                  </span>
                  <% if (item.date_acquired) { %>
                    <small class="entity-detail">
                      Acquired <%= new Date(item.date_acquired).toLocaleDateString() %>
                    </small>
                  <% } %>
                </td>
                <td class="actions-cell">
                  <div class="action-buttons-inline">
                    <a href="/items/<%= item.id %>/<%= item.cep_brc %>" class="btn-action btn-view" title="View Details">
                      <i class="fas fa-eye"></i>
                    </a>
                    <a href="/items/<%= item.id %>/<%= item.cep_brc %>/edit" class="btn-action btn-edit" title="Edit">
                      <i class="fas fa-edit"></i>
                    </a>
                    <% if (item.assigned_to) { %>
                      <form style="display: inline;" method="POST" action="/items/<%= item.id %>/<%= item.cep_brc %>/unassign" class="inline-form">
                        <button type="submit" class="btn-action btn-delete" title="Unassign">
                          <i class="fas fa-user-minus"></i>
                        </button>
                      </form>
                    <% } else { %>
                      <a href="/items/<%= item.id %>/<%= item.cep_brc %>/assign" class="btn-action btn-view" title="Assign">
                        <i class="fas fa-user-plus"></i>
                      </a>
                    <% } %>
                    <a href="/items/<%= item.id %>/<%= item.cep_brc %>/history" class="btn-action btn-history" title="View History">
                      <i class="fas fa-history"></i>
                    </a>
                  </div>
                </td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>

      <!-- Bulk Actions -->
      <div class="bulk-actions" id="bulkActions" style="display: none;">
        <div class="bulk-actions-content">
          <span class="selection-count">0 assets selected</span>
          <div class="bulk-buttons">
            <button class="btn btn-primary" id="bulkAssign">
              <i class="fas fa-user-plus"></i> Bulk Assign
            </button>
            <button class="btn btn-warning" id="bulkUnassign">
              <i class="fas fa-user-minus"></i> Bulk Unassign
            </button>
            <button class="btn btn-info" id="bulkExport">
              <i class="fas fa-download"></i> Export Selected
            </button>
            <button class="btn btn-danger" id="bulkDelete">
              <i class="fas fa-trash"></i> Delete Selected
            </button>
          </div>
        </div>
      </div>

      <!-- Results Summary Bottom with Pagination -->
      <div class="results-summary-bottom">
        <div class="results-stats">
          <span class="results-count">
            <i class="fas fa-boxes"></i>
            Showing <strong id="itemCount"><%= items.length %></strong> of <%= typeof totalItems !== 'undefined' ? totalItems : items.length %> assets
          </span>
          <div class="stats-display">
            <span class="stat-item">
              <i class="fas fa-user text-success"></i>
              <%= items.filter(item => item.assigned_to).length %> Assigned
            </span>
            <% if (items.filter(item => !item.assigned_to).length > 0) { %>
              <span class="stat-item">
                <i class="fas fa-clock text-warning"></i>
                <%= items.filter(item => !item.assigned_to).length %> Unassigned
              </span>
            <% } %>
          </div>
          <div class="pagination-controls">
            <% if (typeof currentPage !== 'undefined' && typeof totalPages !== 'undefined') { %>
              <div class="pagination">
                <% if (currentPage > 1) { %>
                  <a href="?page=<%= currentPage - 1 %><%
                    const urlParams = new URLSearchParams(req.query);
                    urlParams.delete('page');
                    for (const [key, value] of urlParams) { %>&<%= key %>=<%= encodeURIComponent(value) %><% } %>" class="btn btn-sm">&laquo; Previous</a>
                <% } %>

                <span class="page-info">Page <%= currentPage %> of <%= totalPages %></span>

                <% if (currentPage < totalPages) { %>
                  <a href="?page=<%= currentPage + 1 %><%
                    const urlParams = new URLSearchParams(req.query);
                    urlParams.delete('page');
                    for (const [key, value] of urlParams) { %>&<%= key %>=<%= encodeURIComponent(value) %><% } %>" class="btn btn-sm">Next &raquo;</a>
                <% } %>
              </div>
            <% } %>

            <div class="items-per-page-compact">
              <select id="itemsPerPage">
                <option value="10" <%= typeof perPage !== 'undefined' && perPage == 10 ? 'selected' : '' %>>10</option>
                <option value="25" <%= typeof perPage !== 'undefined' && perPage == 25 ? 'selected' : '' %>>25</option>
                <option value="50" <%= typeof perPage !== 'undefined' && perPage == 50 ? 'selected' : '' %>>50</option>
                <option value="100" <%= typeof perPage !== 'undefined' && perPage == 100 ? 'selected' : '' %>>100</option>
              </select>
              <span>per page</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  <% } else { %>
    <div class="content-section">
      <div class="empty-state">
        <div class="empty-icon">
          <i class="fas fa-boxes"></i>
        </div>
        <h3>No assets found</h3>
        <p>No assets match your current search or filter criteria.</p>
        <div class="empty-actions">
          <button id="clearFiltersBtn" class="btn btn-secondary" style="display: none;">
            <i class="fas fa-times"></i> Clear All Filters
          </button>
          <a href="/items/new" class="btn btn-primary">
            <i class="fas fa-plus"></i> Add First Asset
          </a>
        </div>
      </div>
    </div>
  <% } %>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Get URL parameters to preserve filter values
  const urlParams = new URLSearchParams(window.location.search);

  // Initialize filters with URL parameter values
  const statusFilter = document.getElementById('statusFilter');
  const typeFilter = document.getElementById('typeFilter');
  const brandFilter = document.getElementById('brandFilter');
  const conditionFilter = document.getElementById('conditionFilter');
  const departmentFilter = document.getElementById('departmentFilter');
  const minPrice = document.getElementById('minPrice');
  const maxPrice = document.getElementById('maxPrice');
  const startDate = document.getElementById('startDate');
  const endDate = document.getElementById('endDate');
  const searchInput = document.getElementById('itemSearch');

  // Set filter values from URL parameters - Default to unassigned
  if (statusFilter) {
    statusFilter.value = urlParams.get('assigned') || urlParams.get('statusFilter') || 'unassigned';
  }

  if (typeFilter) {
    typeFilter.value = urlParams.get('type') || urlParams.get('typeFilter') || '';
  }

  if (brandFilter) {
    brandFilter.value = urlParams.get('brand') || urlParams.get('brandFilter') || '';
  }

  if (conditionFilter) {
    conditionFilter.value = urlParams.get('condition') || '';
  }

  if (departmentFilter) {
    departmentFilter.value = urlParams.get('department') || urlParams.get('departmentFilter') || '';
  }

  if (minPrice) {
    minPrice.value = urlParams.get('minPrice') || '';
  }

  if (maxPrice) {
    maxPrice.value = urlParams.get('maxPrice') || '';
  }

  if (startDate) {
    startDate.value = urlParams.get('startDate') || '';
  }

  if (endDate) {
    endDate.value = urlParams.get('endDate') || '';
  }

  if (searchInput) {
    searchInput.value = urlParams.get('search') || '';
  }

  // Search functionality
  const searchResults = document.getElementById('searchResults');

  // Filters functionality
  const filtersToggle = document.getElementById('filtersToggle');
  const filtersPanel = document.querySelector('.filters-panel');
  const filtersContent = document.getElementById('filtersContent');
  const filterBadge = document.getElementById('filterBadge');
  const appliedFiltersPreview = document.getElementById('appliedFiltersPreview');

  // Initialize filters to collapsed state (expand if filters are applied)
  const hasActiveFilters = urlParams.get('type') || urlParams.get('brand') ||
                          urlParams.get('condition') || urlParams.get('department') ||
                          urlParams.get('minPrice') || urlParams.get('maxPrice') ||
                          urlParams.get('startDate') || urlParams.get('endDate') ||
                          urlParams.get('search') ||
                          (urlParams.get('assigned') && urlParams.get('assigned') !== 'unassigned');

  if (hasActiveFilters) {
    filtersPanel.classList.add('expanded');
    filtersContent.classList.add('expanded');
  } else {
    filtersContent.classList.remove('expanded');
    filtersPanel.classList.remove('expanded');
  }

  // Filter toggle with proper animation
  filtersToggle.addEventListener('click', () => {
    const isExpanded = filtersPanel.classList.contains('expanded');

    if (isExpanded) {
      filtersPanel.classList.remove('expanded');
      filtersContent.classList.remove('expanded');
    } else {
      filtersPanel.classList.add('expanded');
      filtersContent.classList.add('expanded');
    }
  });

  // Update filter count and display applied filters
  function updateFilterCount() {
    const filters = document.querySelectorAll('#filtersContent select, #filtersContent input[type="date"], #filtersContent input[type="number"]');
    let count = 0;
    let appliedFilters = [];
    let previewText = '';

    filters.forEach(filter => {
      if (filter.value && filter.value.trim() !== '') {
        // Skip counting status filter if it's the default "unassigned"
        if (filter.id === 'statusFilter' && filter.value === 'unassigned') {
          return;
        }

        count++;
        let filterLabel = filter.closest('.filter-group').querySelector('label').textContent;
        let filterValue = filter.value;

        if (filter.tagName === 'SELECT' && filter.selectedIndex > 0) {
          filterValue = filter.options[filter.selectedIndex].textContent;
        }

        appliedFilters.push({
          name: filterLabel,
          value: filterValue,
          element: filter
        });
      }
    });

    // Include search term if present
    if (searchInput && searchInput.value.trim()) {
      count++;
      appliedFilters.push({
        name: 'Search',
        value: searchInput.value.trim(),
        element: searchInput
      });
    }

    filterBadge.textContent = count;

    // Update preview text
    if (count > 0) {
      if (count === 1) {
        previewText = appliedFilters[0].name;
      } else if (count === 2) {
        previewText = `${appliedFilters[0].name} & ${appliedFilters[1].name}`;
      } else {
        previewText = `${count} filters active`;
      }
    } else {
      previewText = 'No filters applied';
    }
    appliedFiltersPreview.textContent = previewText;

    // Update applied filters display
    const appliedFiltersElement = document.getElementById('appliedFilters');
    if (appliedFiltersElement) {
      appliedFiltersElement.innerHTML = appliedFilters.map((filter, index) =>
        `<span class="filter-tag" data-filter-index="${index}">
          ${filter.name}: ${filter.value}
          <span class="remove" onclick="removeFilter(${index})" title="Remove filter">&times;</span>
        </span>`
      ).join('');
    }

    // Store current filters
    window.currentFilters = appliedFilters;
  }

  // Function to remove individual filters
  window.removeFilter = function(index) {
    const filter = window.currentFilters[index];
    if (filter.element === searchInput) {
      searchInput.value = '';
      if (searchResults) {
        searchResults.classList.remove('active');
      }
    } else {
      filter.element.value = '';
      // If removing status filter, set back to default 'unassigned'
      if (filter.element.id === 'statusFilter') {
        filter.element.value = 'unassigned';
      }
    }
    updateFilterCount();
  };

  // Add event listeners to all filter inputs
  document.querySelectorAll('#filtersContent select, #filtersContent input').forEach(input => {
    input.addEventListener('change', updateFilterCount);
    input.addEventListener('input', updateFilterCount);
  });

  if (searchInput) {
    searchInput.addEventListener('input', updateFilterCount);
  }

  // Initial filter count
  updateFilterCount();

  // Apply filters
  const applyFiltersBtn = document.getElementById('applyFilters');
  if (applyFiltersBtn) {
    applyFiltersBtn.addEventListener('click', () => {
      const params = new URLSearchParams();

      // Add all filter values, using correct parameter names
      if (typeFilter && typeFilter.value) {
        params.append('type', typeFilter.value);
      }

      if (brandFilter && brandFilter.value) {
        params.append('brand', brandFilter.value);
      }

      if (statusFilter && statusFilter.value) {
        params.append('assigned', statusFilter.value);
      }

      if (conditionFilter && conditionFilter.value) {
        params.append('condition', conditionFilter.value);
      }

      if (departmentFilter && departmentFilter.value) {
        params.append('department', departmentFilter.value);
      }

      if (minPrice && minPrice.value) {
        params.append('minPrice', minPrice.value);
      }

      if (maxPrice && maxPrice.value) {
        params.append('maxPrice', maxPrice.value);
      }

      if (startDate && startDate.value) {
        params.append('startDate', startDate.value);
      }

      if (endDate && endDate.value) {
        params.append('endDate', endDate.value);
      }

      if (searchInput && searchInput.value.trim()) {
        params.append('search', searchInput.value.trim());
      }

      // Navigate to the filtered results
      window.location.search = params.toString();
    });
  }

  // Reset filters
  const resetFiltersBtn = document.getElementById('resetFilters');
  if (resetFiltersBtn) {
    resetFiltersBtn.addEventListener('click', () => {
      // Reset to default state (unassigned assets only)
      window.location.href = window.location.pathname + '?assigned=unassigned';
    });
  }

  // Auto-apply filters on Enter key in search
  if (searchInput) {
    searchInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        document.getElementById('applyFilters').click();
      }
    });
  }

  // Checkbox functionality for bulk actions
  const selectAllCheckbox = document.getElementById('selectAll');
  const itemCheckboxes = document.querySelectorAll('.row-checkbox');
  const bulkActions = document.getElementById('bulkActions');
  const selectionCount = bulkActions?.querySelector('.selection-count');

  if (selectAllCheckbox) {
    selectAllCheckbox.addEventListener('change', function() {
      itemCheckboxes.forEach(checkbox => {
        checkbox.checked = this.checked;
      });
      updateBulkActions();
    });
  }

  itemCheckboxes.forEach(checkbox => {
    checkbox.addEventListener('change', updateBulkActions);
  });

  function updateBulkActions() {
    const selectedCount = document.querySelectorAll('.row-checkbox:checked').length;
    if (selectedCount > 0 && bulkActions) {
      bulkActions.style.display = 'block';
      if (selectionCount) {
        selectionCount.textContent = `${selectedCount} asset${selectedCount !== 1 ? 's' : ''} selected`;
      }
    } else if (bulkActions) {
      bulkActions.style.display = 'none';
    }

    // Update select all checkbox state
    if (selectAllCheckbox) {
      selectAllCheckbox.indeterminate = selectedCount > 0 && selectedCount < itemCheckboxes.length;
      selectAllCheckbox.checked = selectedCount === itemCheckboxes.length && itemCheckboxes.length > 0;
    }
  }

  // Items per page change
  const itemsPerPageSelect = document.getElementById('itemsPerPage');
  if (itemsPerPageSelect) {
    // Set current value from URL
    const currentPerPage = urlParams.get('perPage');
    if (currentPerPage) {
      itemsPerPageSelect.value = currentPerPage;
    }

    itemsPerPageSelect.addEventListener('change', function() {
      const urlParams = new URLSearchParams(window.location.search);
      urlParams.set('perPage', this.value);
      urlParams.delete('page'); // Reset to first page
      window.location.search = urlParams.toString();
    });
  }

  // Export functionality
  const exportBtn = document.getElementById('exportItemsBtn');
  if (exportBtn) {
    exportBtn.addEventListener('click', () => {
      const exportParams = new URLSearchParams(window.location.search);
      exportParams.append('export_type', 'current_view');
      exportParams.append('export_timestamp', new Date().toISOString());

      // Create export URL
      const exportUrl = `/items/export?${exportParams.toString()}`;

      // Create hidden iframe for download
      const iframe = document.createElement('iframe');
      iframe.style.display = 'none';
      iframe.src = exportUrl;
      document.body.appendChild(iframe);

      setTimeout(() => {
        document.body.removeChild(iframe);
      }, 2000);
    });
  }

  // Close search results when clicking outside
  document.addEventListener('click', (e) => {
    if (searchInput && searchResults && !searchInput.contains(e.target) && !searchResults.contains(e.target)) {
      searchResults.classList.remove('active');
    }
  });

  // Show clear filters button in empty state if filters are applied
  const clearFiltersBtn = document.getElementById('clearFiltersBtn');
  if (clearFiltersBtn && hasActiveFilters) {
    clearFiltersBtn.style.display = 'inline-flex';
    clearFiltersBtn.addEventListener('click', () => {
      window.location.href = window.location.pathname + '?assigned=unassigned';
    });
  }
});
</script>

