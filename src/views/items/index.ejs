<div class="container mx-auto px-4 py-8">
  <!-- Page Header -->
  <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-8">
    <div>
      <h1 class="text-2xl font-bold text-gray-800 dark:text-gray-100">Asset Management</h1>
    </div>
    <div class="flex flex-col md:flex-row gap-2">
      <a href="/items/new" class="inline-flex items-center px-4 py-2 bg-gray-300 dark:bg-gray-700 hover:bg-gray-400 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 font-semibold rounded-md transition">
        <i class="fas fa-plus mr-2"></i> Add New Asset
      </a>
      <a href="/items/new-receipt" class="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md transition">
        <i class="fas fa-receipt mr-2"></i> Add Purchase Receipt
      </a>
      <button id="exportItemsBtn" class="inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md transition">
        <i class="fas fa-download mr-2"></i> Export Asset List
      </button>
    </div>
  </div>

  <!-- Filters Panel -->
  <div class="mb-8 bg-white dark:bg-gray-800 rounded-lg shadow border border-gray-200 dark:border-gray-700">
    <div class="flex items-center justify-between px-6 py-4 cursor-pointer select-none" id="filtersToggle">
      <div class="flex items-center gap-2 text-gray-700 dark:text-gray-200">
        <i class="fas fa-filter"></i>
        <span class="font-semibold">Advanced Filters</span>
        <span class="ml-2 inline-flex items-center justify-center w-6 h-6 rounded-full bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 text-xs" id="filterBadge">0</span>
      </div>
      <div class="flex items-center gap-2">
        <span class="text-sm text-gray-500 dark:text-gray-400" id="appliedFiltersPreview">No filters applied</span>
        <i class="fas fa-chevron-down transition-transform duration-200"></i>
      </div>
    </div>
    <div class="px-6 pb-6 pt-2 hidden" id="filtersContent">
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-4">
        <div>
          <label for="typeFilter" class="block font-semibold mb-1 text-gray-700 dark:text-gray-200">Asset Type</label>
          <select id="typeFilter" name="type"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
            <option value="">All Types</option>
            <% if (typeof types !== 'undefined') { %>
              <% types.forEach(type => { %>
                <option value="<%= type.id %>" <%= (typeof currentFilters !== 'undefined' && currentFilters && currentFilters.type == type.id) ? 'selected' : '' %>>
                  <%= type.name %>
                </option>
              <% }) %>
            <% } %>
          </select>
        </div>
        <div>
          <label for="brandFilter" class="block font-semibold mb-1 text-gray-700 dark:text-gray-200">Brand</label>
          <select id="brandFilter" name="brand"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
            <option value="">All Brands</option>
            <% if (typeof brands !== 'undefined') { %>
              <% brands.forEach(brand => { %>
                <option value="<%= brand.id %>" <%= (typeof currentFilters !== 'undefined' && currentFilters && currentFilters.brand == brand.id) ? 'selected' : '' %>>
                  <%= brand.name %>
                </option>
              <% }) %>
            <% } %>
          </select>
        </div>
        <div>
          <label for="statusFilter" class="block font-semibold mb-1 text-gray-700 dark:text-gray-200">Assignment Status</label>
          <select id="statusFilter" name="assigned"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
            <option value="" <%= (typeof currentFilters !== 'undefined' && currentFilters && currentFilters.assigned === '') ? 'selected' : '' %>>All Assets</option>
            <option value="assigned" <%= (typeof currentFilters !== 'undefined' && currentFilters && currentFilters.assigned === 'assigned') ? 'selected' : '' %>>Assigned Assets</option>
            <option value="unassigned" <%= (typeof currentFilters === 'undefined' || !currentFilters || currentFilters.assigned === 'unassigned') ? 'selected' : '' %>>Unassigned Assets</option>
          </select>
        </div>
        <div>
          <label for="conditionFilter" class="block font-semibold mb-1 text-gray-700 dark:text-gray-200">Condition</label>
          <select id="conditionFilter" name="condition"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
            <option value="">All Conditions</option>
            <option value="active">Active</option>
            <option value="maintenance">Under Maintenance</option>
            <option value="retired">Retired</option>
            <option value="damaged">Damaged</option>
          </select>
        </div>
        <div>
          <label for="priceRange" class="block font-semibold mb-1 text-gray-700 dark:text-gray-200">Price Range</label>
          <div class="flex gap-2">
            <input type="number" id="minPrice" name="minPrice" placeholder="Min €" min="0" step="0.01"
              class="w-1/2 px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
            <span class="self-center text-gray-500 dark:text-gray-400">to</span>
            <input type="number" id="maxPrice" name="maxPrice" placeholder="Max €" min="0" step="0.01"
              class="w-1/2 px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
          </div>
        </div>
        <div>
          <label for="dateRange" class="block font-semibold mb-1 text-gray-700 dark:text-gray-200">Date Acquired</label>
          <div class="flex gap-2">
            <input type="date" id="startDate" name="startDate"
              class="w-1/2 px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
            <span class="self-center text-gray-500 dark:text-gray-400">to</span>
            <input type="date" id="endDate" name="endDate"
              class="w-1/2 px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
          </div>
        </div>
        <div>
          <label for="departmentFilter" class="block font-semibold mb-1 text-gray-700 dark:text-gray-200">Department</label>
          <select id="departmentFilter" name="department"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
            <option value="">All Departments</option>
            <% if (typeof departments !== 'undefined') { %>
              <% departments.forEach(dept => { %>
                <option value="<%= dept.id %>" <%= (typeof currentFilters !== 'undefined' && currentFilters && currentFilters.department == dept.id) ? 'selected' : '' %>>
                  <%= dept.name %>
                </option>
              <% }) %>
            <% } %>
          </select>
        </div>
      </div>
      <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-2">
        <div id="appliedFilters" class="flex flex-wrap gap-2"></div>
        <div class="flex gap-2">
          <button type="button" id="applyFilters" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md transition flex items-center gap-2">
            <i class="fas fa-search"></i> Apply Filters
          </button>
          <button type="button" id="resetFilters" class="px-4 py-2 bg-gray-300 dark:bg-gray-700 hover:bg-gray-400 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 font-semibold rounded-md transition flex items-center gap-2">
            <i class="fas fa-times"></i> Reset All
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Search Bar -->
  <div class="mb-6">
    <div class="relative">
      <input type="text" id="itemSearch" placeholder="Search assets by name, ID, or type..." autocomplete="off"
        class="w-full px-4 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
      <i class="fas fa-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 dark:text-gray-500"></i>
      <div class="absolute w-full bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-b-md z-10 hidden" id="searchResults"></div>
    </div>
  </div>

  <% if (items && items.length > 0) { %>
    <div class="overflow-x-auto bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow">
      <table class="min-w-full text-sm">
        <thead>
          <tr class="bg-gray-100 dark:bg-gray-900 text-gray-700 dark:text-gray-200">
            <th class="px-4 py-3"><input type="checkbox" id="selectAll"></th>
            <th class="px-4 py-3">Asset ID</th>
            <th class="px-4 py-3">Name</th>
            <th class="px-4 py-3">Type</th>
            <th class="px-4 py-3">Brand</th>
            <th class="px-4 py-3">Assigned To</th>
            <th class="px-4 py-3">Status</th>
            <th class="px-4 py-3">Actions</th>
          </tr>
        </thead>
        <tbody>
          <%
          const sortedItems = items.sort((a, b) => {
            if (!a.assigned_to && b.assigned_to) return -1;
            if (a.assigned_to && !b.assigned_to) return 1;
            return a.name.localeCompare(b.name);
          });
          %>
          <% sortedItems.forEach(item => { %>
            <tr class="border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-900 transition">
              <td class="px-4 py-3"><input type="checkbox" class="row-checkbox" value="<%= item.id %>"></td>
              <td class="px-4 py-3 font-mono text-gray-800 dark:text-gray-100"><%= item.cep_brc %></td>
              <td class="px-4 py-3">
                <div>
                  <a href="/items/<%= item.id %>/<%= item.cep_brc %>" class="font-semibold text-blue-700 dark:text-blue-300 hover:underline"><%= item.name %></a>
                  <% if (item.model) { %>
                    <div class="text-xs text-gray-500 dark:text-gray-400"><%= item.model %></div>
                  <% } %>
                </div>
              </td>
              <td class="px-4 py-3">
                <% if (item.type_name) { %>
                  <span class="inline-flex items-center gap-1 px-2 py-0.5 rounded bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 text-xs font-semibold">
                    <i class="fas fa-tag"></i> <%= item.type_name %>
                  </span>
                <% } else { %>
                  <span class="inline-flex items-center gap-1 px-2 py-0.5 rounded bg-gray-100 dark:bg-gray-900 text-gray-500 dark:text-gray-400 text-xs font-semibold">
                    <i class="fas fa-minus"></i> Not Assigned
                  </span>
                <% } %>
              </td>
              <td class="px-4 py-3">
                <% if (item.brand_name) { %>
                  <span class="inline-flex items-center gap-1 px-2 py-0.5 rounded bg-gray-100 dark:bg-gray-900 text-gray-700 dark:text-gray-200 text-xs font-semibold">
                    <i class="fas fa-building"></i> <%= item.brand_name %>
                  </span>
                <% } else { %>
                  <span class="inline-flex items-center gap-1 px-2 py-0.5 rounded bg-gray-100 dark:bg-gray-900 text-gray-500 dark:text-gray-400 text-xs font-semibold">
                    <i class="fas fa-minus"></i> Not Specified
                  </span>
                <% } %>
              </td>
              <td class="px-4 py-3">
                <% if (item.assigned_to_name) { %>
                  <div>
                    <a href="/employees/<%= item.assigned_to %>" class="inline-flex items-center gap-1 text-gray-800 dark:text-gray-100 hover:underline">
                      <i class="fas fa-user"></i> <%= item.assigned_to_name %>
                    </a>
                    <% if (item.department_name) { %>
                      <div class="text-xs text-gray-500 dark:text-gray-400"><%= item.department_name %></div>
                    <% } %>
                  </div>
                <% } else { %>
                  <span class="inline-flex items-center gap-1 px-2 py-0.5 rounded bg-gray-100 dark:bg-gray-900 text-gray-500 dark:text-gray-400 text-xs font-semibold">
                    <i class="fas fa-user-slash"></i> Unassigned
                  </span>
                <% } %>
              </td>
              <td class="px-4 py-3">
                <%
                  let statusClass = 'bg-gray-100 dark:bg-gray-900 text-gray-500 dark:text-gray-400';
                  let statusIcon = 'fas fa-question-circle';
                  let statusText = item.status_name || 'Unknown';

                  if (item.status_name) {
                    switch (item.status_name.toLowerCase()) {
                      case 'active':
                        statusClass = 'bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300';
                        statusIcon = 'fas fa-check-circle';
                        break;
                      case 'maintenance':
                        statusClass = 'bg-yellow-100 dark:bg-yellow-900 text-yellow-700 dark:text-yellow-300';
                        statusIcon = 'fas fa-wrench';
                        break;
                      case 'retired':
                        statusClass = 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300';
                        statusIcon = 'fas fa-archive';
                        break;
                      case 'lost':
                        statusClass = 'bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-300';
                        statusIcon = 'fas fa-times-circle';
                        break;
                      case 'in storage':
                      case 'available':
                        statusClass = 'bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300';
                        statusIcon = 'fas fa-clock';
                        break;
                      default:
                        statusClass = 'bg-gray-100 dark:bg-gray-900 text-gray-700 dark:text-gray-300';
                        statusIcon = 'fas fa-question-circle';
                    }
                  }
                %>
                <span class="inline-flex items-center gap-1 px-2 py-0.5 rounded text-xs font-semibold <%= statusClass %>">
                  <i class="<%= statusIcon %>"></i> <%= statusText %>
                </span>
                <% if (item.date_acquired) { %>
                  <div class="text-xs text-gray-500 dark:text-gray-400">
                    Acquired <%= new Date(item.date_acquired).toLocaleDateString() %>
                  </div>
                <% } %>
              </td>
              <td class="px-4 py-3">
                <div class="flex gap-1">
                  <a href="/items/<%= item.id %>/<%= item.cep_brc %>" class="inline-flex items-center justify-center w-8 h-8 rounded bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-300 hover:bg-blue-200 dark:hover:bg-blue-800 transition" title="View Details">
                    <i class="fas fa-eye"></i>
                  </a>
                  <a href="/items/<%= item.id %>/<%= item.cep_brc %>/edit" class="inline-flex items-center justify-center w-8 h-8 rounded bg-yellow-100 dark:bg-yellow-900 text-yellow-700 dark:text-yellow-300 hover:bg-yellow-200 dark:hover:bg-yellow-800 transition" title="Edit">
                    <i class="fas fa-edit"></i>
                  </a>
                  <% if (item.assigned_to) { %>
                    <form style="display: inline;" method="POST" action="/items/<%= item.id %>/<%= item.cep_brc %>/unassign" class="inline-form">
                      <button type="submit" class="inline-flex items-center justify-center w-8 h-8 rounded bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-300 hover:bg-red-200 dark:hover:bg-red-800 transition" title="Unassign">
                        <i class="fas fa-user-minus"></i>
                      </button>
                    </form>
                  <% } else { %>
                    <a href="/items/<%= item.id %>/<%= item.cep_brc %>/assign" class="inline-flex items-center justify-center w-8 h-8 rounded bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-300 hover:bg-green-200 dark:hover:bg-green-800 transition" title="Assign">
                      <i class="fas fa-user-plus"></i>
                    </a>
                  <% } %>
                  <a href="/items/<%= item.id %>/<%= item.cep_brc %>/history" class="inline-flex items-center justify-center w-8 h-8 rounded bg-gray-100 dark:bg-gray-900 text-gray-700 dark:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-800 transition" title="View History">
                    <i class="fas fa-history"></i>
                  </a>
                </div>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>

    <!-- Bulk Actions -->
    <div class="mt-4" id="bulkActions" style="display: none;">
      <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-2 bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg px-6 py-4">
        <span class="selection-count text-gray-700 dark:text-gray-300"></span>
        <div class="flex gap-2">
          <button class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md transition flex items-center gap-2" id="bulkAssign">
            <i class="fas fa-user-plus"></i> Bulk Assign
          </button>
          <button class="px-4 py-2 bg-yellow-500 hover:bg-yellow-600 text-white font-semibold rounded-md transition flex items-center gap-2" id="bulkUnassign">
            <i class="fas fa-user-minus"></i> Bulk Unassign
          </button>
          <button class="px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-md transition flex items-center gap-2" id="bulkExport">
            <i class="fas fa-download"></i> Export Selected
          </button>
          <button class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white font-semibold rounded-md transition flex items-center gap-2" id="bulkDelete">
            <i class="fas fa-trash"></i> Delete Selected
          </button>
        </div>
      </div>
    </div>

    <!-- Results Summary & Pagination -->
    <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-2 px-6 py-4 bg-gray-50 dark:bg-gray-900 border-t border-gray-200 dark:border-gray-700 mt-4 rounded-b-lg">
      <div class="flex items-center gap-2 text-gray-700 dark:text-gray-300 text-sm">
        <i class="fas fa-boxes"></i>
        Showing <strong id="itemCount"><%= items.length %></strong> of <%= typeof totalItems !== 'undefined' ? totalItems : items.length %> assets
        <span class="ml-4"><i class="fas fa-user text-green-600"></i> <%= items.filter(item => item.assigned_to).length %> Assigned</span>
        <% if (items.filter(item => !item.assigned_to).length > 0) { %>
          <span class="ml-2"><i class="fas fa-clock text-yellow-500"></i> <%= items.filter(item => !item.assigned_to).length %> Unassigned</span>
        <% } %>
      </div>
      <div class="flex items-center gap-4">
        <% if (typeof currentPage !== 'undefined' && typeof totalPages !== 'undefined') { %>
          <div class="flex items-center gap-2">
            <% if (currentPage > 1) { %>
              <a href="?page=<%= currentPage - 1 %><%
                const urlParams = new URLSearchParams(req.query);
                urlParams.delete('page');
                for (const [key, value] of urlParams) { %>&<%= key %>=<%= encodeURIComponent(value) %><% } %>" class="px-3 py-1 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 rounded transition">« Previous</a>
            <% } %>
            <span class="text-xs text-gray-500 dark:text-gray-400">Page <%= currentPage %> of <%= totalPages %></span>
            <% if (currentPage < totalPages) { %>
              <a href="?page=<%= currentPage + 1 %><%
                const urlParams = new URLSearchParams(req.query);
                urlParams.delete('page');
                for (const [key, value] of urlParams) { %>&<%= key %>=<%= encodeURIComponent(value) %><% } %>" class="px-3 py-1 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 rounded transition">Next »</a>
            <% } %>
          </div>
        <% } %>
        <div>
          <select id="itemsPerPage" class="px-2 py-1 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100">
            <option value="10" <%= typeof perPage !== 'undefined' && perPage == 10 ? 'selected' : '' %>>10</option>
            <option value="25" <%= typeof perPage !== 'undefined' && perPage == 25 ? 'selected' : '' %>>25</option>
            <option value="50" <%= typeof perPage !== 'undefined' && perPage == 50 ? 'selected' : '' %>>50</option>
            <option value="100" <%= typeof perPage !== 'undefined' && perPage == 100 ? 'selected' : '' %>>100</option>
          </select>
          <span class="text-xs text-gray-500 dark:text-gray-400 ml-1">per page</span>
        </div>
      </div>
    </div>
  <% } else { %>
    <div class="flex flex-col items-center justify-center py-16 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
      <div class="mb-4 text-4xl text-gray-400 dark:text-gray-600">
        <i class="fas fa-boxes"></i>
      </div>
      <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-2">No assets found</h3>
      <p class="text-gray-500 dark:text-gray-400 mb-4">No assets match your current search or filter criteria.</p>
      <div class="flex gap-2">
        <button id="clearFiltersBtn" class="px-4 py-2 bg-gray-300 dark:bg-gray-700 hover:bg-gray-400 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 font-semibold rounded-md transition flex items-center gap-2" style="display: none;">
          <i class="fas fa-times"></i> Clear All Filters
        </button>
        <a href="/items/new" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md transition flex items-center gap-2">
          <i class="fas fa-plus"></i> Add First Asset
        </a>
      </div>
    </div>
  <% } %>
</div>

<!-- The original script block from your file remains unchanged for filter and table logic -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Get URL parameters to preserve filter values
  const urlParams = new URLSearchParams(window.location.search);

  // Initialize filters with URL parameter values
  const statusFilter = document.getElementById('statusFilter');
  const typeFilter = document.getElementById('typeFilter');
  const brandFilter = document.getElementById('brandFilter');
  const conditionFilter = document.getElementById('conditionFilter');
  const departmentFilter = document.getElementById('departmentFilter');
  const minPrice = document.getElementById('minPrice');
  const maxPrice = document.getElementById('maxPrice');
  const startDate = document.getElementById('startDate');
  const endDate = document.getElementById('endDate');
  const searchInput = document.getElementById('itemSearch');

  // Set filter values from URL parameters - Default to unassigned
  if (statusFilter) {
    statusFilter.value = urlParams.get('assigned') || urlParams.get('statusFilter') || 'unassigned';
  }

  if (typeFilter) {
    typeFilter.value = urlParams.get('type') || urlParams.get('typeFilter') || '';
  }

  if (brandFilter) {
    brandFilter.value = urlParams.get('brand') || urlParams.get('brandFilter') || '';
  }

  if (conditionFilter) {
    conditionFilter.value = urlParams.get('condition') || '';
  }

  if (departmentFilter) {
    departmentFilter.value = urlParams.get('department') || urlParams.get('departmentFilter') || '';
  }

  if (minPrice) {
    minPrice.value = urlParams.get('minPrice') || '';
  }

  if (maxPrice) {
    maxPrice.value = urlParams.get('maxPrice') || '';
  }

  if (startDate) {
    startDate.value = urlParams.get('startDate') || '';
  }

  if (endDate) {
    endDate.value = urlParams.get('endDate') || '';
  }

  if (searchInput) {
    searchInput.value = urlParams.get('search') || '';
  }

  // Search functionality
  const searchResults = document.getElementById('searchResults');

  // Filters functionality
  const filtersToggle = document.getElementById('filtersToggle');
  const filtersPanel = document.querySelector('.filters-panel');
  const filtersContent = document.getElementById('filtersContent');
  const filterBadge = document.getElementById('filterBadge');
  const appliedFiltersPreview = document.getElementById('appliedFiltersPreview');

  // Initialize filters to collapsed state (expand if filters are applied)
  const hasActiveFilters = urlParams.get('type') || urlParams.get('brand') ||
                          urlParams.get('condition') || urlParams.get('department') ||
                          urlParams.get('minPrice') || urlParams.get('maxPrice') ||
                          urlParams.get('startDate') || urlParams.get('endDate') ||
                          urlParams.get('search') ||
                          (urlParams.get('assigned') && urlParams.get('assigned') !== 'unassigned');

  if (hasActiveFilters) {
    filtersPanel.classList.add('expanded');
    filtersContent.classList.add('expanded');
  } else {
    filtersContent.classList.remove('expanded');
    filtersPanel.classList.remove('expanded');
  }

  // Filter toggle with proper animation
  filtersToggle.addEventListener('click', () => {
    const isExpanded = filtersPanel.classList.contains('expanded');

    if (isExpanded) {
      filtersPanel.classList.remove('expanded');
      filtersContent.classList.remove('expanded');
    } else {
      filtersPanel.classList.add('expanded');
      filtersContent.classList.add('expanded');
    }
  });

  // Update filter count and display applied filters
  function updateFilterCount() {
    const filters = document.querySelectorAll('#filtersContent select, #filtersContent input[type="date"], #filtersContent input[type="number"]');
    let count = 0;
    let appliedFilters = [];
    let previewText = '';

    filters.forEach(filter => {
      if (filter.value && filter.value.trim() !== '') {
        // Skip counting status filter if it's the default "unassigned"
        if (filter.id === 'statusFilter' && filter.value === 'unassigned') {
          return;
        }

        count++;
        let filterLabel = filter.closest('.filter-group').querySelector('label').textContent;
        let filterValue = filter.value;

        if (filter.tagName === 'SELECT' && filter.selectedIndex > 0) {
          filterValue = filter.options[filter.selectedIndex].textContent;
        }

        appliedFilters.push({
          name: filterLabel,
          value: filterValue,
          element: filter
        });
      }
    });

    // Include search term if present
    if (searchInput && searchInput.value.trim()) {
      count++;
      appliedFilters.push({
        name: 'Search',
        value: searchInput.value.trim(),
        element: searchInput
      });
    }

    filterBadge.textContent = count;

    // Update preview text
    if (count > 0) {
      if (count === 1) {
        previewText = appliedFilters[0].name;
      } else if (count === 2) {
        previewText = `${appliedFilters[0].name} & ${appliedFilters[1].name}`;
      } else {
        previewText = `${count} filters active`;
      }
    } else {
      previewText = 'No filters applied';
    }
    appliedFiltersPreview.textContent = previewText;

    // Update applied filters display
    const appliedFiltersElement = document.getElementById('appliedFilters');
    if (appliedFiltersElement) {
      appliedFiltersElement.innerHTML = appliedFilters.map((filter, index) =>
        `<span class="filter-tag" data-filter-index="${index}">
          ${filter.name}: ${filter.value}
          <span class="remove" onclick="removeFilter(${index})" title="Remove filter">&times;</span>
        </span>`
      ).join('');
    }

    // Store current filters
    window.currentFilters = appliedFilters;
  }

  // Function to remove individual filters
  window.removeFilter = function(index) {
    const filter = window.currentFilters[index];
    if (filter.element === searchInput) {
      searchInput.value = '';
      if (searchResults) {
        searchResults.classList.remove('active');
      }
    } else {
      filter.element.value = '';
      // If removing status filter, set back to default 'unassigned'
      if (filter.element.id === 'statusFilter') {
        filter.element.value = 'unassigned';
      }
    }
    updateFilterCount();
  };

  // Add event listeners to all filter inputs
  document.querySelectorAll('#filtersContent select, #filtersContent input').forEach(input => {
    input.addEventListener('change', updateFilterCount);
    input.addEventListener('input', updateFilterCount);
  });

  if (searchInput) {
    searchInput.addEventListener('input', updateFilterCount);
  }

  // Initial filter count
  updateFilterCount();

  // Apply filters
  const applyFiltersBtn = document.getElementById('applyFilters');
  if (applyFiltersBtn) {
    applyFiltersBtn.addEventListener('click', () => {
      const params = new URLSearchParams();

      // Add all filter values, using correct parameter names
      if (typeFilter && typeFilter.value) {
        params.append('type', typeFilter.value);
      }

      if (brandFilter && brandFilter.value) {
        params.append('brand', brandFilter.value);
      }

      if (statusFilter && statusFilter.value) {
        params.append('assigned', statusFilter.value);
      }

      if (conditionFilter && conditionFilter.value) {
        params.append('condition', conditionFilter.value);
      }

      if (departmentFilter && departmentFilter.value) {
        params.append('department', departmentFilter.value);
      }

      if (minPrice && minPrice.value) {
        params.append('minPrice', minPrice.value);
      }

      if (maxPrice && maxPrice.value) {
        params.append('maxPrice', maxPrice.value);
      }

      if (startDate && startDate.value) {
        params.append('startDate', startDate.value);
      }

      if (endDate && endDate.value) {
        params.append('endDate', endDate.value);
      }

      if (searchInput && searchInput.value.trim()) {
        params.append('search', searchInput.value.trim());
      }

      // Navigate to the filtered results
      window.location.search = params.toString();
    });
  }

  // Reset filters
  const resetFiltersBtn = document.getElementById('resetFilters');
  if (resetFiltersBtn) {
    resetFiltersBtn.addEventListener('click', () => {
      // Reset to default state (unassigned assets only)
      window.location.href = window.location.pathname + '?assigned=unassigned';
    });
  }

  // Auto-apply filters on Enter key in search
  if (searchInput) {
    searchInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        document.getElementById('applyFilters').click();
      }
    });
  }

  // Checkbox functionality for bulk actions
  const selectAllCheckbox = document.getElementById('selectAll');
  const itemCheckboxes = document.querySelectorAll('.row-checkbox');
  const bulkActions = document.getElementById('bulkActions');
  const selectionCount = bulkActions?.querySelector('.selection-count');

  if (selectAllCheckbox) {
    selectAllCheckbox.addEventListener('change', function() {
      itemCheckboxes.forEach(checkbox => {
        checkbox.checked = this.checked;
      });
      updateBulkActions();
    });
  }

  itemCheckboxes.forEach(checkbox => {
    checkbox.addEventListener('change', updateBulkActions);
  });

  function updateBulkActions() {
    const selectedCount = document.querySelectorAll('.row-checkbox:checked').length;
    if (selectedCount > 0 && bulkActions) {
      bulkActions.style.display = 'block';
      if (selectionCount) {
        selectionCount.textContent = `${selectedCount} asset${selectedCount !== 1 ? 's' : ''} selected`;
      }
    } else if (bulkActions) {
      bulkActions.style.display = 'none';
    }

    // Update select all checkbox state
    if (selectAllCheckbox) {
      selectAllCheckbox.indeterminate = selectedCount > 0 && selectedCount < itemCheckboxes.length;
      selectAllCheckbox.checked = selectedCount === itemCheckboxes.length && itemCheckboxes.length > 0;
    }
  }

  // Items per page change
  const itemsPerPageSelect = document.getElementById('itemsPerPage');
  if (itemsPerPageSelect) {
    // Set current value from URL
    const currentPerPage = urlParams.get('perPage');
    if (currentPerPage) {
      itemsPerPageSelect.value = currentPerPage;
    }

    itemsPerPageSelect.addEventListener('change', function() {
      const urlParams = new URLSearchParams(window.location.search);
      urlParams.set('perPage', this.value);
      urlParams.delete('page'); // Reset to first page
      window.location.search = urlParams.toString();
    });
  }

  // Export functionality
  const exportBtn = document.getElementById('exportItemsBtn');
  if (exportBtn) {
    exportBtn.addEventListener('click', () => {
      const exportParams = new URLSearchParams(window.location.search);
      exportParams.append('export_type', 'current_view');
      exportParams.append('export_timestamp', new Date().toISOString());

      // Create export URL
      const exportUrl = `/items/export?${exportParams.toString()}`;

      // Create hidden iframe for download
      const iframe = document.createElement('iframe');
      iframe.style.display = 'none';
      iframe.src = exportUrl;
      document.body.appendChild(iframe);

      setTimeout(() => {
        document.body.removeChild(iframe);
      }, 2000);
    });
  }

  // Close search results when clicking outside
  document.addEventListener('click', (e) => {
    if (searchInput && searchResults && !searchInput.contains(e.target) && !searchResults.contains(e.target)) {
      searchResults.classList.remove('active');
    }
  });

  // Show clear filters button in empty state if filters are applied
  const clearFiltersBtn = document.getElementById('clearFiltersBtn');
  if (clearFiltersBtn && hasActiveFilters) {
    clearFiltersBtn.style.display = 'inline-flex';
    clearFiltersBtn.addEventListener('click', () => {
      window.location.href = window.location.pathname + '?assigned=unassigned';
    });
  }
});
</script>

