<div class="container mx-auto px-4 py-8">
  <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-8">
    <div>
      <div class="flex items-center gap-2 text-gray-500 dark:text-gray-400 mb-2">
        <a href="/reports" class="hover:underline flex items-center gap-1">
          <i class="fas fa-chart-bar"></i> Reports
        </a>
        <i class="fas fa-chevron-right"></i>
        <span class="font-semibold text-gray-700 dark:text-gray-200">Asset Analytics</span>
      </div>
      <h1 class="text-2xl font-bold text-gray-800 dark:text-gray-100 flex items-center gap-2">
        <i class="fas fa-boxes"></i> Asset Analytics Dashboard
      </h1>
      <div class="text-sm text-gray-500 dark:text-gray-400 mt-1">
        <i class="fas fa-calendar"></i>
        Generated <%= new Date().toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        }) %>
      </div>
    </div>
    <div class="flex flex-wrap gap-2">
      <a href="/reports" class="inline-flex items-center px-4 py-2 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 rounded-md transition">
        <i class="fas fa-arrow-left mr-2"></i> Back to Reports
      </a>
      <div class="relative">
        <button class="inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-md transition" id="exportDropdown">
          <i class="fas fa-download mr-2"></i> Export Data
        </button>
        <div class="absolute right-0 mt-2 w-56 bg-white dark:bg-gray-800 rounded-md shadow-lg z-10 hidden" id="exportMenu">
          <a href="#" onclick="exportReport('summary')" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-800 dark:text-gray-100">
            <i class="fas fa-chart-pie mr-2"></i> Executive Summary (PDF)
          </a>
          <a href="#" onclick="exportReport('detailed')" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-800 dark:text-gray-100">
            <i class="fas fa-table mr-2"></i> Detailed Assets (CSV)
          </a>
          <a href="#" onclick="exportReport('analytics')" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-800 dark:text-gray-100">
            <i class="fas fa-chart-bar mr-2"></i> Analytics Data (JSON)
          </a>
          <a href="#" onclick="exportReport('custom')" class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-800 dark:text-gray-100">
            <i class="fas fa-cog mr-2"></i> Custom Export
          </a>
        </div>
      </div>
      <button onclick="printReport()" class="inline-flex items-center px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md transition">
        <i class="fas fa-print mr-2"></i> Print Report
      </button>
    </div>
  </div>

  <!-- Executive Summary Cards -->
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-10">
    <div class="bg-blue-100 dark:bg-blue-900 rounded-lg shadow p-6 flex flex-col items-center">
      <div class="text-3xl text-blue-600 dark:text-blue-300 mb-2"><i class="fas fa-boxes"></i></div>
      <div class="text-lg font-semibold text-gray-700 dark:text-gray-200">Total Assets</div>
      <div class="text-2xl font-bold text-gray-900 dark:text-gray-100"><%= totalAssets.toLocaleString() %></div>
      <div class="text-xs text-blue-700 dark:text-blue-300 mt-1 flex items-center gap-1">
        <i class="fas fa-arrow-up"></i> Inventory managed
      </div>
    </div>
    <div class="bg-green-100 dark:bg-green-900 rounded-lg shadow p-6 flex flex-col items-center">
      <div class="text-3xl text-green-600 dark:text-green-300 mb-2"><i class="fas fa-euro-sign"></i></div>
      <div class="text-lg font-semibold text-gray-700 dark:text-gray-200">Total Value</div>
      <div class="text-2xl font-bold text-gray-900 dark:text-gray-100">€<%= totalValue.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 }) %></div>
      <div class="text-xs text-green-700 dark:text-green-300 mt-1 flex items-center gap-1">
        <i class="fas fa-calculator"></i> Avg: €<%= avgValue.toFixed(0) %> per asset
      </div>
    </div>
    <div class="bg-blue-50 dark:bg-blue-950 rounded-lg shadow p-6 flex flex-col items-center">
      <div class="text-3xl text-blue-500 dark:text-blue-400 mb-2"><i class="fas fa-chart-pie"></i></div>
      <div class="text-lg font-semibold text-gray-700 dark:text-gray-200">Utilization Rate</div>
      <div class="text-2xl font-bold text-gray-900 dark:text-gray-100"><%= utilizationRate.toFixed(1) %>%</div>
      <div class="text-xs mt-1 flex items-center gap-1
        <%= utilizationRate >= 80 ? 'text-green-700 dark:text-green-300' : utilizationRate >= 60 ? 'text-yellow-700 dark:text-yellow-300' : 'text-red-700 dark:text-red-300' %>">
        <i class="fas fa-<%= utilizationRate >= 80 ? 'check-circle' : utilizationRate >= 60 ? 'minus-circle' : 'exclamation-triangle' %>"></i>
        <%= assignedAssets %>/<%= totalAssets %> assigned
      </div>
    </div>
    <div class="bg-yellow-100 dark:bg-yellow-900 rounded-lg shadow p-6 flex flex-col items-center">
      <div class="text-3xl text-yellow-600 dark:text-yellow-300 mb-2"><i class="fas fa-exclamation-triangle"></i></div>
      <div class="text-lg font-semibold text-gray-700 dark:text-gray-200">Needs Attention</div>
      <div class="text-2xl font-bold text-gray-900 dark:text-gray-100"><%= itemsNeedingAttention %></div>
      <div class="text-xs text-yellow-700 dark:text-yellow-300 mt-1 flex items-center gap-1">
        <i class="fas fa-wrench"></i> Maintenance or issues
      </div>
    </div>
  </div>

  <!-- Analytics Charts Grid -->
  <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 mb-10">
    <!-- Asset Distribution by Type -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 flex flex-col">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-200 flex items-center gap-2">
          <i class="fas fa-tags"></i> Assets by Type
        </h3>
        <button onclick="exportChart('typeChart')" class="text-blue-600 dark:text-blue-400 hover:underline text-sm flex items-center gap-1">
          <i class="fas fa-download"></i> Export
        </button>
      </div>
      <% if (topTypes.length > 0) { %>
        <div class="flex flex-col md:flex-row gap-4">
          <div class="flex-1">
            <canvas id="typeChart" width="300" height="200"></canvas>
          </div>
          <div class="flex-1 flex flex-col gap-2">
            <% topTypes.forEach(([type, count], index) => { %>
              <div class="flex items-center gap-2">
                <span class="inline-block w-4 h-4 rounded" style="background-color: hsl(<%= index * 40 %>, 70%, 50%)"></span>
                <span class="text-gray-700 dark:text-gray-200"><%= type %></span>
                <span class="ml-auto text-xs text-gray-500 dark:text-gray-400"><%= count %> (<%= (count / totalAssets * 100).toFixed(1) %>%)</span>
              </div>
            <% }) %>
          </div>
        </div>
      <% } else { %>
        <div class="flex flex-col items-center justify-center py-8 text-center border border-dashed border-blue-400 rounded bg-blue-50 dark:bg-blue-950">
          <div class="text-3xl text-blue-500 mb-2">
            <i class="fas fa-chart-pie"></i>
          </div>
          <p class="text-gray-500 dark:text-gray-400">No asset type data available</p>
        </div>
      <% } %>
    </div>

    <!-- Value Distribution -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 flex flex-col">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-200 flex items-center gap-2">
          <i class="fas fa-euro-sign"></i> Value Distribution
        </h3>
        <button onclick="exportChart('valueChart')" class="text-blue-600 dark:text-blue-400 hover:underline text-sm flex items-center gap-1">
          <i class="fas fa-download"></i> Export
        </button>
      </div>
      <div>
        <% Object.entries(valueRanges).forEach(([range, count]) => { %>
          <div class="flex items-center gap-2 mb-2">
            <span class="w-32 text-xs text-gray-700 dark:text-gray-200">
              <% if (range === 'under_500') { %>Under €500<% }
                 else if (range === '500-2000') { %>€500 - €2,000<% }
                 else if (range === '2000-5000') { %>€2,000 - €5,000<% }
                 else { %>Over €5,000<% } %>
            </span>
            <div class="flex-1 bg-gray-200 dark:bg-gray-700 rounded h-3 relative">
              <div class="absolute left-0 top-0 h-3 rounded bg-blue-500 dark:bg-blue-400" style="width: <%= totalAssets > 0 ? (count / totalAssets * 100).toFixed(1) : 0 %>%"></div>
            </div>
            <span class="ml-2 text-xs text-gray-500 dark:text-gray-400"><%= count %></span>
          </div>
        <% }) %>
      </div>
    </div>

    <!-- Age Analysis -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 flex flex-col">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-200 flex items-center gap-2">
          <i class="fas fa-clock"></i> Asset Age Distribution
        </h3>
        <button onclick="exportChart('ageChart')" class="text-blue-600 dark:text-blue-400 hover:underline text-sm flex items-center gap-1">
          <i class="fas fa-download"></i> Export
        </button>
      </div>
      <div>
        <% Object.entries(ageBreakdown).forEach(([age, count]) => { %>
          <div class="flex items-center gap-2 mb-2">
            <span class="w-24 text-xs text-gray-700 dark:text-gray-200">
              <% if (age === '0-1') { %>< 1 year<% }
                 else if (age === '1-3') { %>1-3 years<% }
                 else if (age === '3-5') { %>3-5 years<% }
                 else { %>5+ years<% } %>
            </span>
            <div class="flex-1 bg-gray-200 dark:bg-gray-700 rounded h-3 relative">
              <div class="absolute left-0 top-0 h-3 rounded bg-green-500 dark:bg-green-400" style="width: <%= totalAssets > 0 ? (count / totalAssets * 100).toFixed(1) : 0 %>%"></div>
            </div>
            <span class="ml-2 text-xs text-gray-500 dark:text-gray-400"><%= count %></span>
          </div>
        <% }) %>
      </div>
    </div>

    <!-- Department Allocation -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 flex flex-col">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-200 flex items-center gap-2">
          <i class="fas fa-building"></i> Department Allocation
        </h3>
        <button onclick="exportChart('deptChart')" class="text-blue-600 dark:text-blue-400 hover:underline text-sm flex items-center gap-1">
          <i class="fas fa-download"></i> Export
        </button>
      </div>
      <% if (topDepartments.length > 0) { %>
        <div>
          <% topDepartments.forEach(([dept, count]) => { %>
            <div class="flex items-center gap-2 mb-2">
              <span class="w-32 text-xs text-gray-700 dark:text-gray-200"><%= dept %></span>
              <div class="flex-1 bg-gray-200 dark:bg-gray-700 rounded h-3 relative">
                <div class="absolute left-0 top-0 h-3 rounded bg-purple-500 dark:bg-purple-400" style="width: <%= assignedAssets > 0 ? (count / assignedAssets * 100).toFixed(1) : 0 %>%"></div>
              </div>
              <span class="ml-2 text-xs text-gray-500 dark:text-gray-400"><%= count %> assets (<%= assignedAssets > 0 ? (count / assignedAssets * 100).toFixed(1) : 0 %>%)</span>
            </div>
          <% }) %>
        </div>
      <% } else { %>
        <div class="flex flex-col items-center justify-center py-8 text-center border border-dashed border-blue-400 rounded bg-blue-50 dark:bg-blue-950">
          <div class="text-3xl text-blue-500 mb-2">
            <i class="fas fa-building"></i>
          </div>
          <p class="text-gray-500 dark:text-gray-400">No department allocation data available</p>
        </div>
      <% } %>
    </div>

    <!-- Asset Health Status -->
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 flex flex-col">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-200 flex items-center gap-2">
          <i class="fas fa-heartbeat"></i> Asset Health Status
        </h3>
        <button onclick="exportChart('conditionChart')" class="text-blue-600 dark:text-blue-400 hover:underline text-sm flex items-center gap-1">
          <i class="fas fa-download"></i> Export
        </button>
      </div>
      <div class="grid grid-cols-2 gap-4">
        <% Object.entries(conditionBreakdown).forEach(([condition, count]) => { %>
          <div class="flex items-center gap-3 p-3 rounded bg-gray-50 dark:bg-gray-900">
            <div class="text-xl
              <%= condition === 'active' ? 'text-green-600 dark:text-green-300' :
                  condition === 'maintenance' ? 'text-yellow-600 dark:text-yellow-300' :
                  condition === 'retired' ? 'text-gray-600 dark:text-gray-300' :
                  'text-red-600 dark:text-red-300' %>">
              <i class="fas fa-<%= condition === 'active' ? 'check-circle' :
                                 condition === 'maintenance' ? 'wrench' :
                                 condition === 'retired' ? 'archive' : 'exclamation-triangle' %>"></i>
            </div>
            <div>
              <div class="font-bold text-gray-800 dark:text-gray-100"><%= count %></div>
              <div class="text-xs text-gray-500 dark:text-gray-400"><%= condition.charAt(0).toUpperCase() + condition.slice(1) %></div>
              <div class="text-xs text-gray-400 dark:text-gray-500"><%= totalAssets > 0 ? (count / totalAssets * 100).toFixed(1) : 0 %>%</div>
            </div>
          </div>
        <% }) %>
      </div>
    </div>
  </div>

  <!-- Detailed Asset Table with Advanced Filtering -->
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 mb-10">
    <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mb-4">
      <h2 class="text-lg font-semibold text-gray-700 dark:text-gray-200 flex items-center gap-2">
        <i class="fas fa-table"></i> Detailed Asset Inventory
      </h2>
      <div class="flex flex-wrap gap-2">
        <select id="tableTypeFilter" class="px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
          <option value="">All Types</option>
          <% allTypes.forEach(type => { %>
            <option value="<%= type.name %>"><%= type.name %></option>
          <% }) %>
        </select>
        <select id="tableStatusFilter" class="px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
          <option value="">All Statuses</option>
          <% allStatuses.forEach(status => { %>
            <option value="<%= status.name.toLowerCase() %>"><%= status.name %></option>
          <% }) %>
        </select>
        <select id="tableConditionFilter" class="px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
          <option value="">All Conditions</option>
          <% allConditions.forEach(condition => { %>
            <option value="<%= condition %>"><%= condition.charAt(0).toUpperCase() + condition.slice(1) %></option>
          <% }) %>
        </select>
        <button onclick="exportTableData()" class="inline-flex items-center px-4 py-2 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 rounded-md transition">
          <i class="fas fa-download mr-2"></i> Export Table
        </button>
      </div>
    </div>
    <div class="overflow-x-auto">
      <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700" id="assetsTable">
        <thead class="bg-gray-50 dark:bg-gray-900">
          <tr>
            <th class="sortable px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200" data-sort="cep_brc">
              Asset ID <i class="fas fa-sort"></i>
            </th>
            <th class="sortable px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200" data-sort="name">
              Name <i class="fas fa-sort"></i>
            </th>
            <th class="sortable px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200" data-sort="type_name">
              Type <i class="fas fa-sort"></i>
            </th>
            <th class="sortable px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200" data-sort="brand_name">
              Brand <i class="fas fa-sort"></i>
            </th>
            <th class="sortable px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200" data-sort="price">
              Value <i class="fas fa-sort"></i>
            </th>
            <th class="sortable px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200" data-sort="assigned_to_name">
              Assigned To <i class="fas fa-sort"></i>
            </th>
            <th class="sortable px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200" data-sort="department_name">
              Department <i class="fas fa-sort"></i>
            </th>
            <th class="sortable px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200" data-sort="date_acquired">
              Age <i class="fas fa-sort"></i>
            </th>
            <th class="px-4 py-3 text-left font-semibold text-gray-700 dark:text-gray-200">Status</th>
          </tr>
        </thead>
        <tbody>
          <% if (safeItems.length > 0) { %>
            <% safeItems.forEach(item => { %>
              <tr data-type="<%= item.type_name || '' %>"
                  data-status="<%= item.assigned_to_name ? 'assigned' : 'unassigned' %>"
                  data-condition="<%= item.condition || 'active' %>">
                <td class="px-4 py-3 font-mono text-blue-700 dark:text-blue-300"><%= item.cep_brc %></td>
                <td class="px-4 py-3">
                  <a href="/items/<%= item.id %>/<%= item.cep_brc %>" class="text-blue-600 dark:text-blue-300 hover:underline">
                    <%= item.name %>
                  </a>
                </td>
                <td class="px-4 py-3">
                  <% if (item.type_name) { %>
                    <span class="inline-block px-2 py-0.5 rounded bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-200 text-xs font-semibold"><%= item.type_name %></span>
                  <% } else { %>
                    <span class="inline-block px-2 py-0.5 rounded bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-300 text-xs font-semibold">Unknown</span>
                  <% } %>
                </td>
                <td class="px-4 py-3">
                  <% if (item.brand_name) { %>
                    <span class="inline-block px-2 py-0.5 rounded bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-200 text-xs font-semibold"><%= item.brand_name %></span>
                  <% } else { %>
                    <span class="inline-block px-2 py-0.5 rounded bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-300 text-xs font-semibold">Unknown</span>
                  <% } %>
                </td>
                <td class="px-4 py-3">
                  <% if (item.price) { %>
                    <span class="text-gray-800 dark:text-gray-100">€<%= parseFloat(item.price).toLocaleString(undefined, { minimumFractionDigits: 2 }) %></span>
                  <% } else { %>
                    <span class="text-gray-400 dark:text-gray-500 italic">Not set</span>
                  <% } %>
                </td>
                <td class="px-4 py-3">
                  <% if (item.assigned_to_name) { %>
                    <a href="/employees/<%= item.assigned_to %>" class="text-blue-600 dark:text-blue-300 hover:underline flex items-center gap-1">
                      <i class="fas fa-user"></i> <%= item.assigned_to_name %>
                    </a>
                  <% } else { %>
                    <span class="text-gray-400 dark:text-gray-500 italic flex items-center gap-1">
                      <i class="fas fa-user-slash"></i> Unassigned
                    </span>
                  <% } %>
                </td>
                <td class="px-4 py-3">
                  <% if (item.department_name) { %>
                    <span class="inline-block px-2 py-0.5 rounded bg-purple-100 dark:bg-purple-900 text-purple-700 dark:text-purple-200 text-xs font-semibold"><%= item.department_name %></span>
                  <% } else { %>
                    <span class="inline-block px-2 py-0.5 rounded bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-300 text-xs font-semibold">N/A</span>
                  <% } %>
                </td>
                <td class="px-4 py-3">
                  <% if (item.date_acquired) { %>
                    <%
                      const years = Math.floor((new Date() - new Date(item.date_acquired)) / (1000 * 60 * 60 * 24 * 365));
                      const months = Math.floor(((new Date() - new Date(item.date_acquired)) % (1000 * 60 * 60 * 24 * 365)) / (1000 * 60 * 60 * 24 * 30));
                    %>
                    <span class="text-gray-700 dark:text-gray-200">
                      <% if (years > 0) { %>
                        <%= years %>y <%= months %>m
                      <% } else { %>
                        <%= months %>m
                      <% } %>
                    </span>
                  <% } else { %>
                    <span class="text-gray-400 dark:text-gray-500 italic">Unknown</span>
                  <% } %>
                </td>
                <td class="px-4 py-3">
                  <%
                    let statusClass = 'bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-200';
                    let statusIcon = 'fas fa-check-circle';
                    let statusText = 'Active';

                    if (item.condition === 'maintenance') {
                      statusClass = 'bg-yellow-100 dark:bg-yellow-900 text-yellow-700 dark:text-yellow-200';
                      statusIcon = 'fas fa-wrench';
                      statusText = 'Maintenance';
                    } else if (item.condition === 'retired') {
                      statusClass = 'bg-gray-100 dark:bg-gray-900 text-gray-700 dark:text-gray-200';
                      statusIcon = 'fas fa-archive';
                      statusText = 'Retired';
                    } else if (item.condition === 'damaged') {
                      statusClass = 'bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-200';
                      statusIcon = 'fas fa-exclamation-triangle';
                      statusText = 'Damaged';
                    } else if (!item.assigned_to_name) {
                      statusClass = 'bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-200';
                      statusIcon = 'fas fa-clock';
                      statusText = 'Available';
                    }
                  %>
                  <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-semibold <%= statusClass %>">
                    <i class="<%= statusIcon %> mr-1"></i> <%= statusText %>
                  </span>
                </td>
              </tr>
            <% }) %>
          <% } else { %>
            <tr>
              <td colspan="9" class="text-center py-8">
                <div class="flex flex-col items-center justify-center py-8 text-center border border-dashed border-blue-400 rounded bg-blue-50 dark:bg-blue-950">
                  <div class="text-4xl text-blue-500 mb-2">
                    <i class="fas fa-boxes"></i>
                  </div>
                  <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-1">No assets found</h3>
                  <a href="/items/new" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md transition flex items-center gap-2 mt-4">
                    <i class="fas fa-plus"></i> Add First Asset
                  </a>
                </div>
              </td>
            </tr>
          <% } %>
        </tbody>
      </table>
    </div>
    <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4 mt-4">
      <span class="text-gray-700 dark:text-gray-200 text-sm">
        Showing <span id="visibleRows"><%= safeItems.length %></span> of <%= totalAssets %> assets
      </span>
      <div>
        <select id="rowsPerPage" class="px-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md bg-gray-50 dark:bg-gray-900 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 transition">
          <option value="25">25 per page</option>
          <option value="50" selected>50 per page</option>
          <option value="100">100 per page</option>
          <option value="all">Show all</option>
        </select>
      </div>
    </div>
  </div>

  <!-- Asset Summary Breakdown -->
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6 mb-10">
    <h2 class="text-lg font-semibold text-gray-700 dark:text-gray-200 flex items-center gap-2 mb-4">
      <i class="fas fa-info-circle"></i> Asset Summary Breakdown
    </h2>
    <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
      <!-- Top Asset Types -->
      <div>
        <h3 class="font-semibold text-gray-700 dark:text-gray-200 mb-2 flex items-center gap-2">
          <i class="fas fa-tags"></i> Top Asset Types
        </h3>
        <ul class="text-sm text-gray-600 dark:text-gray-300">
          <% topTypes.forEach(([type, count]) => { %>
            <li><strong><%= type %></strong>: <%= count %> (<%= (count / totalAssets * 100).toFixed(1) %>%)</li>
          <% }) %>
        </ul>
      </div>
      <!-- Top Departments -->
      <div>
        <h3 class="font-semibold text-gray-700 dark:text-gray-200 mb-2 flex items-center gap-2">
          <i class="fas fa-building"></i> Top Departments by Asset Count
        </h3>
        <ul class="text-sm text-gray-600 dark:text-gray-300">
          <% topDepartments.forEach(([dept, count]) => { %>
            <li><strong><%= dept %></strong>: <%= count %> (<%= assignedAssets > 0 ? (count / assignedAssets * 100).toFixed(1) : 0 %>%)</li>
          <% }) %>
        </ul>
      </div>
      <!-- Unassigned Value & Maintenance -->
      <div>
        <h3 class="font-semibold text-gray-700 dark:text-gray-200 mb-2 flex items-center gap-2">
          <i class="fas fa-euro-sign"></i> Unassigned & Maintenance
        </h3>
        <ul class="text-sm text-gray-600 dark:text-gray-300">
          <li><strong>Unassigned Assets:</strong> <%= unassignedAssets %> (<%= unassignedValue > 0 ? '€' + unassignedValue.toLocaleString() : '€0' %>)</li>
          <li><strong>Under Maintenance:</strong> <%= conditionBreakdown['maintenance'] || 0 %></li>
          <li><strong>Damaged:</strong> <%= conditionBreakdown['damaged'] || 0 %></li>
          <li><strong>Retired:</strong> <%= conditionBreakdown['retired'] || 0 %></li>
        </ul>
      </div>
    </div>
  </div>
</div>

<!-- Custom Export Modal -->
<div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40 hidden" id="customExportModal">
  <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full p-6">
    <div class="flex items-center gap-2 mb-4">
      <div class="text-2xl text-blue-600 dark:text-blue-300"><i class="fas fa-cog"></i></div>
      <h4 class="text-lg font-bold text-gray-800 dark:text-gray-100">Custom Export Options</h4>
    </div>
    <div class="mb-4">
      <h5 class="font-semibold text-gray-700 dark:text-gray-200 mb-2">Export Format</h5>
      <div class="flex flex-col gap-2">
        <label class="flex items-center gap-2">
          <input type="radio" id="formatCSV" name="format" value="csv" checked class="form-radio text-blue-600">
          <span>CSV (Comma Separated Values)</span>
        </label>
        <label class="flex items-center gap-2">
          <input type="radio" id="formatExcel" name="format" value="excel" class="form-radio text-blue-600">
          <span>Excel Spreadsheet</span>
        </label>
        <label class="flex items-center gap-2">
          <input type="radio" id="formatPDF" name="format" value="pdf" class="form-radio text-blue-600">
          <span>PDF Report</span>
        </label>
      </div>
    </div>
    <div class="mb-4">
      <h5 class="font-semibold text-gray-700 dark:text-gray-200 mb-2">Include Data</h5>
      <div class="flex flex-col gap-2">
        <label class="flex items-center gap-2">
          <input type="checkbox" id="includeBasic" value="basic" checked class="form-checkbox text-blue-600">
          <span>Basic Asset Information</span>
        </label>
        <label class="flex items-center gap-2">
          <input type="checkbox" id="includeFinancial" value="financial" checked class="form-checkbox text-blue-600">
          <span>Financial Data (Price, Value)</span>
        </label>
        <label class="flex items-center gap-2">
          <input type="checkbox" id="includeAssignment" value="assignment" checked class="form-checkbox text-blue-600">
          <span>Assignment Information</span>
        </label>
        <label class="flex items-center gap-2">
          <input type="checkbox" id="includeHistory" value="history" class="form-checkbox text-blue-600">
          <span>History Summary</span>
        </label>
        <label class="flex items-center gap-2">
          <input type="checkbox" id="includeAnalytics" value="analytics" class="form-checkbox text-blue-600">
          <span>Analytics & Insights</span>
        </label>
      </div>
    </div>
    <div class="flex justify-end gap-2">
      <button id="executeCustomExport" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-md transition">
        <i class="fas fa-download mr-2"></i> Export Data
      </button>
      <button id="cancelCustomExport" class="px-4 py-2 bg-gray-300 dark:bg-gray-700 hover:bg-gray-400 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-100 font-semibold rounded-md transition">
        <i class="fas fa-times mr-2"></i> Cancel
      </button>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Initialize charts
  initializeCharts();

  // Initialize table functionality
  initializeTable();

  // Initialize export functionality
  initializeExports();

  // Initialize dropdown
  const exportDropdown = document.getElementById('exportDropdown');
  const exportMenu = document.getElementById('exportMenu');

  exportDropdown.addEventListener('click', function(e) {
    e.preventDefault();
    exportMenu.classList.toggle('show');
  });

  // Close dropdown when clicking outside
  document.addEventListener('click', function(e) {
    if (!exportDropdown.contains(e.target) && !exportMenu.contains(e.target)) {
      exportMenu.classList.remove('show');
    }
  });
});

function initializeCharts() {
  // Asset Type Donut Chart
  const typeCtx = document.getElementById('typeChart');
  if (typeCtx) {
    const typeData = <%- JSON.stringify(topTypes) %>;
    const typeColors = typeData.map((_, index) => `hsl(${index * 40}, 70%, 50%)`);

    new Chart(typeCtx, {
      type: 'doughnut',
      data: {
        labels: typeData.map(item => item[0]),
        datasets: [{
          data: typeData.map(item => item[1]),
          backgroundColor: typeColors,
          borderWidth: 2,
          borderColor: '#fff'
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            callbacks: {
              label: function(context) {
                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                const percentage = ((context.raw / total) * 100).toFixed(1);
                return `${context.label}: ${context.raw} (${percentage}%)`;
              }
            }
          }
        }
      }
    });
  }
}

function initializeTable() {
  const table = document.getElementById('assetsTable');
  const typeFilter = document.getElementById('tableTypeFilter');
  const statusFilter = document.getElementById('tableStatusFilter');
  const conditionFilter = document.getElementById('tableConditionFilter');

  function filterTable() {
    const typeValue = typeFilter.value.toLowerCase();
    const statusValue = statusFilter.value.toLowerCase();
    const conditionValue = conditionFilter.value.toLowerCase();

    const rows = table.querySelectorAll('tbody tr');
    let visibleCount = 0;

    rows.forEach(row => {
      const type = row.dataset.type.toLowerCase();
      const status = row.dataset.status.toLowerCase();
      const condition = row.dataset.condition.toLowerCase();

      const typeMatch = !typeValue || type.includes(typeValue);
      const statusMatch = !statusValue || status === statusValue;
      const conditionMatch = !conditionValue || condition === conditionValue;

      if (typeMatch && statusMatch && conditionMatch) {
        row.style.display = '';
        visibleCount++;
      } else {
        row.style.display = 'none';
      }
    });

    document.getElementById('visibleRows').textContent = visibleCount;
  }

  // Add filter event listeners
  [typeFilter, statusFilter, conditionFilter].forEach(filter => {
    filter.addEventListener('change', filterTable);
  });

  // Table sorting
  const sortableHeaders = table.querySelectorAll('.sortable');
  sortableHeaders.forEach(header => {
    header.addEventListener('click', function() {
      const column = this.dataset.sort;
      sortTable(column);
    });
  });
}

function sortTable(column) {
  const table = document.getElementById('assetsTable');
  const tbody = table.querySelector('tbody');
  const rows = Array.from(tbody.querySelectorAll('tr'));

  // Determine sort direction
  const currentSort = table.dataset.sortColumn;
  const currentDirection = table.dataset.sortDirection || 'asc';
  const newDirection = (currentSort === column && currentDirection === 'asc') ? 'desc' : 'asc';

  // Sort rows
  rows.sort((a, b) => {
    const aVal = a.children[getColumnIndex(column)].textContent.trim();
    const bVal = b.children[getColumnIndex(column)].textContent.trim();

    // Handle numeric sorting for specific columns
    if (column === 'price') {
      const aNum = parseFloat(aVal.replace(/[€,]/g, '')) || 0;
      const bNum = parseFloat(bVal.replace(/[€,]/g, '')) || 0;
      return newDirection === 'asc' ? aNum - bNum : bNum - aNum;
    }

    // Handle date sorting
    if (column === 'date_acquired') {
      const aDate = new Date(aVal);
      const bDate = new Date(bVal);
      return newDirection === 'asc' ? aDate - bDate : bDate - aDate;
    }

    // Default string sorting
    return newDirection === 'asc' ? aVal.localeCompare(bVal) : bVal.localeCompare(aVal);
  });

  // Reorder table
  rows.forEach(row => tbody.appendChild(row));

  // Update sort indicators
  table.dataset.sortColumn = column;
  table.dataset.sortDirection = newDirection;

  // Update header icons
  table.querySelectorAll('.sortable i').forEach(icon => {
    icon.className = 'fas fa-sort';
  });

  const activeHeader = table.querySelector(`[data-sort="${column}"] i`);
  if (activeHeader) {
    activeHeader.className = `fas fa-sort-${newDirection === 'asc' ? 'up' : 'down'}`;
  }
}

function getColumnIndex(column) {
  const columns = ['cep_brc', 'name', 'type_name', 'brand_name', 'price', 'assigned_to_name', 'department_name', 'date_acquired', 'status'];
  return columns.indexOf(column);
}

function initializeExports() {
  const customModal = document.getElementById('customExportModal');
  const executeExport = document.getElementById('executeCustomExport');
  const cancelExport = document.getElementById('cancelCustomExport');

  executeExport.addEventListener('click', function() {
    const format = document.querySelector('input[name="format"]:checked').value;
    const options = Array.from(document.querySelectorAll('input[type="checkbox"]:checked'))
                        .map(cb => cb.value);

    performCustomExport(format, options);
    customModal.style.display = 'none';
  });

  cancelExport.addEventListener('click', function() {
    customModal.style.display = 'none';
  });
}

function exportReport(type) {
  const params = new URLSearchParams();
  params.append('type', type);
  params.append('timestamp', new Date().toISOString());

  if (type === 'custom') {
    document.getElementById('customExportModal').style.display = 'flex';
    return;
  }

  // Create hidden iframe for download
  const iframe = document.createElement('iframe');
  iframe.style.display = 'none';
  iframe.src = `/reports/assets/export?${params.toString()}`;
  document.body.appendChild(iframe);

  setTimeout(() => {
    document.body.removeChild(iframe);
  }, 2000);
}

function performCustomExport(format, options) {
  const params = new URLSearchParams();
  params.append('type', 'custom');
  params.append('format', format);
  params.append('options', JSON.stringify(options));
  params.append('timestamp', new Date().toISOString());

  const iframe = document.createElement('iframe');
  iframe.style.display = 'none';
  iframe.src = `/reports/assets/export?${params.toString()}`;
  document.body.appendChild(iframe);

  setTimeout(() => {
    document.body.removeChild(iframe);
  }, 2000);
}

function exportChart(chartId) {
  const canvas = document.getElementById(chartId);
  if (canvas) {
    const link = document.createElement('a');
    link.download = `${chartId}-${new Date().toISOString().split('T')[0]}.png`;
    link.href = canvas.toDataURL();
    link.click();
  }
}

function exportTableData() {
  const table = document.getElementById('assetsTable');
  const visibleRows = Array.from(table.querySelectorAll('tbody tr:not([style*="display: none"])'));

  const csvContent = [
    // Header row
    Array.from(table.querySelectorAll('thead th')).map(th => th.textContent.trim().replace(' ', '')),
    // Data rows
    ...visibleRows.map(row =>
      Array.from(row.querySelectorAll('td')).map(td => td.textContent.trim())
    )
  ].map(row => row.join(',')).join('\n');

  const blob = new Blob([csvContent], { type: 'text/csv' });
  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = `asset-table-${new Date().toISOString().split('T')[0]}.csv`;
  link.click();
}

function printReport() {
  window.print();
}
</script>

