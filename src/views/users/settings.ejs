<div class="page-container">
  <div class="page-header-simple">
    <h1><i class="fas fa-cog"></i> User Settings</h1>
    <div class="header-actions">
      <div class="action-buttons">
        <a href="/" class="btn btn-secondary">
          <i class="fas fa-arrow-left"></i> Back to Dashboard
        </a>
      </div>
    </div>
  </div>

  <% if (locals.success) { %>
    <div class="alert alert-success">
      <i class="fas fa-check-circle"></i>
      <%= success %>
    </div>
  <% } %>

  <% if (locals.error) { %>
    <div class="alert alert-danger">
      <i class="fas fa-exclamation-triangle"></i>
      <%= error %>
    </div>
  <% } %>

  <% if (locals.showUpdated) { %>
    <div class="alert alert-success">
      <i class="fas fa-check-circle"></i>
      Settings updated successfully!
    </div>
  <% } %>

  <div class="form-container">
    <!-- Display Settings -->
    <div class="form-section">
      <h3><i class="fas fa-palette"></i> Display Settings</h3>
      <form method="POST" action="/users/settings/display" class="needs-validation" novalidate id="displaySettingsForm" enctype="application/x-www-form-urlencoded">
        <div class="form-row">
          <div class="form-group col-md-6">
            <label for="theme" class="required">Theme</label>
            <select id="theme" name="theme" class="form-control" required>
              <option value="light" <%= (!user.settings || user.settings.theme === 'light') ? 'selected' : '' %>>
                <i class="fas fa-sun"></i> <%= t('theme.light') %>
              </option>
              <option value="dark" <%= (user.settings && user.settings.theme === 'dark') ? 'selected' : '' %>>
                <i class="fas fa-moon"></i> <%= t('theme.dark') %>
              </option>
              <option value="auto" <%= (user.settings && user.settings.theme === 'auto') ? 'selected' : '' %>>
                <i class="fas fa-adjust"></i> <%= t('theme.auto') %>
              </option>
            </select>
            <small class="form-text text-muted">Choose your preferred color scheme</small>
          </div>

          <div class="form-group col-md-6">
            <label for="language" class="required">Language</label>
            <select id="language" name="language" class="form-control" required>
              <option value="en" <%= (!user.settings || user.settings.language === 'en') ? 'selected' : '' %>>
                🇺🇸 <%= t('lang.en') %>
              </option>
              <option value="pt-PT" <%= (user.settings && user.settings.language === 'pt-PT') ? 'selected' : '' %>>
                🇵🇹 <%= t('lang.pt-PT') %>
              </option>
              <option value="es" <%= (user.settings && user.settings.language === 'es') ? 'selected' : '' %>>
                🇪🇸 <%= t('lang.es') %>
              </option>
              <option value="fr" <%= (user.settings && user.settings.language === 'fr') ? 'selected' : '' %>>
                🇫🇷 <%= t('lang.fr') %>
              </option>
            </select>
            <small class="form-text text-muted">Select your preferred language</small>
          </div>
        </div>

        <div class="form-row">
          <div class="form-group col-md-6">
            <label for="timezone">Timezone</label>
            <select id="timezone" name="timezone" class="form-control">
              <option value="UTC" <%= (!user.settings || user.settings.timezone === 'UTC') ? 'selected' : '' %>>UTC</option>
              <option value="Europe/Lisbon" <%= (user.settings && user.settings.timezone === 'Europe/Lisbon') ? 'selected' : '' %>>Europe/Lisbon</option>
              <option value="Europe/Madrid" <%= (user.settings && user.settings.timezone === 'Europe/Madrid') ? 'selected' : '' %>>Europe/Madrid</option>
              <option value="Europe/Paris" <%= (user.settings && user.settings.timezone === 'Europe/Paris') ? 'selected' : '' %>>Europe/Paris</option>
              <option value="America/New_York" <%= (user.settings && user.settings.timezone === 'America/New_York') ? 'selected' : '' %>>America/New_York</option>
            </select>
            <small class="form-text text-muted">Your local timezone for date/time display</small>
          </div>

          <div class="form-group col-md-6">
            <label for="items_per_page">Items per Page</label>
            <select id="items_per_page" name="items_per_page" class="form-control">
              <option value="10" <%= (user.settings && user.settings.items_per_page === '10') ? 'selected' : '' %>>10</option>
              <option value="20" <%= (!user.settings || user.settings.items_per_page === '20') ? 'selected' : '' %>>20</option>
              <option value="50" <%= (user.settings && user.settings.items_per_page === '50') ? 'selected' : '' %>>50</option>
              <option value="100" <%= (user.settings && user.settings.items_per_page === '100') ? 'selected' : '' %>>100</option>
            </select>
            <small class="form-text text-muted">Number of items to display per page in lists</small>
          </div>
        </div>

        <div class="form-actions">
          <button type="submit" class="btn btn-primary" id="saveDisplayBtn">
            <i class="fas fa-save"></i> Save Display Settings
          </button>
        </div>
      </form>
    </div>

    <!-- Notification Settings -->
    <div class="form-section">
      <h3><i class="fas fa-bell"></i> Notification Settings</h3>
      <form method="POST" action="/users/settings/notifications">
        <div class="form-row">
          <div class="form-group col-md-6">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="email_notifications" name="email_notifications" 
                     <%= (!user.settings || user.settings.email_notifications !== false) ? 'checked' : '' %>>
              <label class="form-check-label" for="email_notifications">
                <i class="fas fa-envelope"></i> Email Notifications
              </label>
            </div>
            <small class="form-text text-muted">Receive notifications via email</small>
          </div>

          <div class="form-group col-md-6">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="browser_notifications" name="browser_notifications" 
                     <%= (!user.settings || user.settings.browser_notifications !== false) ? 'checked' : '' %>>
              <label class="form-check-label" for="browser_notifications">
                <i class="fas fa-desktop"></i> Browser Notifications
              </label>
            </div>
            <small class="form-text text-muted">Show browser notifications</small>
          </div>
        </div>

        <div class="form-row">
          <div class="form-group col-md-6">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="maintenance_alerts" name="maintenance_alerts" 
                     <%= (!user.settings || user.settings.maintenance_alerts !== false) ? 'checked' : '' %>>
              <label class="form-check-label" for="maintenance_alerts">
                <i class="fas fa-tools"></i> Maintenance Alerts
              </label>
            </div>
            <small class="form-text text-muted">Notifications about equipment maintenance</small>
          </div>

          <div class="form-group col-md-6">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="assignment_notifications" name="assignment_notifications" 
                     <%= (!user.settings || user.settings.assignment_notifications !== false) ? 'checked' : '' %>>
              <label class="form-check-label" for="assignment_notifications">
                <i class="fas fa-user-plus"></i> Assignment Notifications
              </label>
            </div>
            <small class="form-text text-muted">Notifications about equipment assignments</small>
          </div>
        </div>

        <div class="form-actions">
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-save"></i> Save Notification Settings
          </button>
        </div>
      </form>
    </div>

    <!-- Security Settings -->
    <div class="form-section">
      <h3><i class="fas fa-shield-alt"></i> Security Settings</h3>
      <form method="POST" action="/users/settings/security" class="needs-validation" novalidate>
        <div class="form-row">
          <div class="form-group col-md-6">
            <label for="current_password" class="required">Current Password</label>
            <input type="password" id="current_password" name="current_password" class="form-control" required>
            <div class="invalid-feedback">
              Please enter your current password.
            </div>
          </div>
        </div>

        <div class="form-row">
          <div class="form-group col-md-6">
            <label for="new_password" class="required">New Password</label>
            <input type="password" id="new_password" name="new_password" class="form-control" minlength="8" required>
            <div class="invalid-feedback">
              Password must be at least 8 characters long.
            </div>
            <small class="form-text text-muted">Minimum 8 characters, include letters and numbers</small>
          </div>

          <div class="form-group col-md-6">
            <label for="confirm_password" class="required">Confirm Password</label>
            <input type="password" id="confirm_password" name="confirm_password" class="form-control" required>
            <div class="invalid-feedback">
              Passwords do not match.
            </div>
          </div>
        </div>

        <div class="form-row">
          <div class="form-group col-md-6">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="session_timeout" name="session_timeout" 
                     <%= (user.settings && user.settings.session_timeout) ? 'checked' : '' %>>
              <label class="form-check-label" for="session_timeout">
                <i class="fas fa-clock"></i> Auto-logout after inactivity
              </label>
            </div>
            <small class="form-text text-muted">Automatically log out after 30 minutes of inactivity</small>
          </div>

          <div class="form-group col-md-6">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" id="two_factor_auth" name="two_factor_auth" 
                     <%= (user.settings && user.settings.two_factor_auth) ? 'checked' : '' %>>
              <label class="form-check-label" for="two_factor_auth">
                <i class="fas fa-lock"></i> Two-Factor Authentication
              </label>
            </div>
            <small class="form-text text-muted">Enable 2FA for enhanced security (coming soon)</small>
          </div>
        </div>

        <div class="form-actions">
          <button type="submit" class="btn btn-danger">
            <i class="fas fa-key"></i> Change Password
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
// Form validation
(function() {
  'use strict';
  window.addEventListener('load', function() {
    var forms = document.getElementsByClassName('needs-validation');
    var validation = Array.prototype.filter.call(forms, function(form) {
      form.addEventListener('submit', function(event) {
        if (form.checkValidity() === false) {
          event.preventDefault();
          event.stopPropagation();
        }
        form.classList.add('was-validated');
      }, false);
    });
  }, false);
})();

// Password confirmation validation
document.getElementById('confirm_password').addEventListener('input', function() {
  const password = document.getElementById('new_password').value;
  const confirmPassword = this.value;
  
  if (password !== confirmPassword) {
    this.setCustomValidity('Passwords do not match');
  } else {
    this.setCustomValidity('');
  }
});

// Theme change preview and enhanced form handling
document.addEventListener('DOMContentLoaded', function() {
  const themeSelect = document.getElementById('theme');
  const displayForm = document.getElementById('displaySettingsForm');
  const saveBtn = document.getElementById('saveDisplayBtn');
  
  // Theme preview functionality
  if (themeSelect) {
    themeSelect.addEventListener('change', function() {
      const body = document.body;
      const selectedTheme = this.value;
      
      if (selectedTheme === 'auto') {
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        body.setAttribute('data-theme', prefersDark ? 'dark' : 'light');
      } else {
        body.setAttribute('data-theme', selectedTheme);
      }
    });
  }
  
  // Enhanced form submission with feedback
  if (displayForm) {
    displayForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const originalBtnText = saveBtn.innerHTML;
      saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';
      saveBtn.disabled = true;
      
      // Use URLSearchParams instead of FormData for proper parsing
      const formData = new FormData(this);
      const params = new URLSearchParams();
      
      // Convert FormData to URLSearchParams
      for (let [key, value] of formData.entries()) {
        params.append(key, value);
        console.log(`📝 Form data: ${key} = ${value}`);
      }
      
      fetch(this.action, {
        method: 'POST',
        body: params,
        headers: {
          'X-Requested-With': 'XMLHttpRequest',
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        if (data.success) {
          console.log('✅ Settings saved:', data);
          
          // Show success message
          showMessage('Settings saved successfully!', 'success');
          
          // Apply theme immediately using multiple methods
          const newTheme = data.theme || params.get('theme');
          if (newTheme) {
            console.log('🎨 Applying theme:', newTheme);
            
            // Method 1: Update body attribute
            document.body.setAttribute('data-theme', newTheme);
            
            // Method 2: Use theme handler if available
            if (window.themeHandler) {
              window.themeHandler.setTheme(newTheme);
            }
            
            // Method 3: Set cookie for persistence
            document.cookie = `user_theme=${newTheme}; path=/; max-age=${365 * 24 * 60 * 60}`;
            
            console.log('✅ Theme applied successfully');
          }
        } else {
          throw new Error(data.error || 'Failed to save settings');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showMessage('Failed to save settings: ' + error.message, 'error');
      })
      .finally(() => {
        setTimeout(() => {
          saveBtn.innerHTML = originalBtnText;
          saveBtn.disabled = false;
        }, 1000); // Delay to show success state
      });
    });
  }
  
  function showMessage(message, type) {
    // Remove existing alerts
    document.querySelectorAll('.alert').forEach(alert => alert.remove());
    
    // Create new alert
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type === 'success' ? 'success' : 'danger'}`;
    alertDiv.innerHTML = `
      <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-triangle'}"></i>
      ${message}
    `;
    
    // Insert after page header
    const pageHeader = document.querySelector('.page-header-simple');
    pageHeader.insertAdjacentElement('afterend', alertDiv);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
      alertDiv.remove();
    }, 5000);
  }
});
</script>
